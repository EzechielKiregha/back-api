generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum MediaType {
  IMAGE
  VIDEO
}

enum RechargeMethod {
  MTN_MONEY
  AIRTEL_MONEY
  ORANGE_MONEY
  MPESA
}

enum Country {
  DRC
  KENYA
  UGANDA
  RWANDA
  BURUNDI
  TANZANIA
}

enum KycStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  TOKEN
  MOBILE_MONEY
}

enum FreelanceServiceCategory {
  PLUMBER
  ELECTRICIAN
  CARPENTER
  MECHANIC
  TUTOR
  CLEANER
  OTHER
}

enum FreelanceStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EscrowStatus {
  HELD
  RELEASED
  DISPUTED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SOLD
  ARCHIVED
}

enum PostTransactionStatus {
  PENDING
  COMPLETED
  REFUNDED
}

// Models

model Business {
  id                   String                @id @default(uuid())
  name                 String
  email                String                @unique
  description          String?
  avatar               String?
  coverImage           String?
  address              String?
  phone                String?
  password             String
  isVerified           Boolean               @default(false)
  kyc                  KYC?                  @relation("BusinessKYC")
  products             Product[]
  workers              Worker[]
  repostedItems        RepostedProduct[]
  reownedItems         ReOwnedProduct[]
  recharges            AccountRecharge[]     @relation("BusinessRecharges")
  ads                  Ad[]
  freelanceServices    FreelanceService[]    @relation("ServiceOwner")
  referralsMade        Referral[]            @relation("BusinessAffiliations")
  referralsReceived    Referral[]            @relation("BusinessReferred")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  postOfSales PostOfSale[]
  freelanceOrderBusiness FreelanceOrderBusiness[]

  kycStatus            KycStatus             @default(PENDING)  // Enum: PENDING, VERIFIED, REJECTED
  isB2BEnabled         Boolean               @default(false)    // B2B participation flag
  totalProductsSold    Int                   @default(0)        // Tracks sales for threshold
  hasAgreedToTerms     Boolean               @default(false)    // Terms compliance
  termsAgreedAt        DateTime?             // Timestamp of agreement

  chatParticipants ChatParticipant[]
}

model Client {
  id                   String                @id @default(uuid())
  username             String                @unique
  email                String                @unique
  fullName             String?
  avatar               String?
  address              String?
  phone                String?
  password             String
  isVerified           Boolean               @default(false)
  kyc                  KYC?                  @relation("ClientKYC")
  orders               Order[]
  reviews              Review[]
  recharges            AccountRecharge[]     @relation("ClientRecharges")
  freelanceOrders      FreelanceOrder[]      @relation("ClientOrders")
  referralsMade        Referral[]            @relation("ClientAffiliations")
  referralsReceived    Referral[]            @relation("ClientReferred")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  postTransactions PostTransaction[]

  chatParticipants ChatParticipant[]
}

model Worker {
  id                   String                @id @default(uuid())
  email                String                @unique
  fullName             String?
  role                 String?
  phone                String?
  password             String
  business             Business              @relation(fields: [businessId], references: [id])
  businessId           String
  kyc                  KYC?                  @relation("WorkerKYC")
  isVerified           Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  workerServiceAssignments WorkerServiceAssignment[]
  chatParticipants ChatParticipant[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] @relation("ProductCategory")
}

model Product {
  id                   String                @id @default(uuid())
  title                String
  description          String?
  price                Float
  stock                Int                   @default(0)
  business             Business              @relation(fields: [businessId], references: [id])
  businessId           String
  categoryId      String
  category        Category         @relation("ProductCategory", fields: [categoryId], references: [id])
  medias               Media[]
  reviews              Review[]
  orders               OrderProduct[]
  chats                Chat[]
  reposts              RepostedProduct[]
  reowns               ReOwnedProduct[]
  ads                  Ad[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Media {
  id                   String                @id @default(uuid())
  url                  String
  type                 MediaType
  product              Product               @relation(fields: [productId], references: [id])
  productId            String
  createdAt            DateTime              @default(now())

  postOfSales PostOfSale[]
}

model Order {
  id                   String                @id @default(uuid())
  client               Client                @relation(fields: [clientId], references: [id])
  clientId             String
  products             OrderProduct[]
  deliveryFee          Float                 @default(0)
  deliveryAddress      String?
  qrCode               String?
  payment              PaymentTransaction?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

// Join table for many-to-many between Order and Product
model OrderProduct {
  id                   String                @id @default(uuid())
  order                Order                 @relation(fields: [orderId], references: [id])
  orderId              String
  product              Product               @relation(fields: [productId], references: [id])
  productId            String
  quantity             Int                   @default(1)
  createdAt            DateTime              @default(now())
}

model Review {
  id                   String                @id @default(uuid())
  client               Client                @relation(fields: [clientId], references: [id])
  clientId             String
  product              Product               @relation(fields: [productId], references: [id])
  productId            String
  rating               Int                   @default(0)
  comment              String?
  createdAt            DateTime              @default(now())
}

enum NegotiationType {
  REOWNERSHIP
  FREELANCEORDER
  PURCHASE
  GENERAL
}

model Chat {
  id                   String                @id @default(uuid())
  status               String                @default("PENDING")
  isSecure             Boolean               @default(false)
  negotiationType      NegotiationType?
  product              Product?              @relation(fields: [productId], references: [id])
  productId            String?
  service              FreelanceService?     @relation(fields: [serviceId], references: [id])
  serviceId            String?
  participants         ChatParticipant[]     // New relation for dynamic participants
  messages             ChatMessage[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model ChatParticipant {
  id                   String                @id @default(uuid())
  chat                 Chat                  @relation(fields: [chatId], references: [id])
  chatId               String
  client               Client?               @relation(fields: [clientId], references: [id])
  clientId             String?
  business             Business?             @relation(fields: [businessId], references: [id])
  businessId           String?
  worker               Worker?               @relation(fields: [workerId], references: [id])
  workerId             String?
  createdAt            DateTime              @default(now())
}

model ChatMessage {
  id                   String                @id @default(uuid())
  chat                 Chat                  @relation(fields: [chatId], references: [id])
  chatId               String
  message              String
  senderId             String?               // ID of the sender (business or client)
  createdAt            DateTime              @default(now())
}

model RepostedProduct {
  id                   String                @id @default(uuid())
  business             Business              @relation(fields: [businessId], references: [id])
  businessId           String
  product              Product               @relation(fields: [productId], references: [id])
  productId            String
  earnPercentage       Float                 @default(0.002)
  createdAt            DateTime              @default(now())
}

model ReOwnedProduct {
  id                   String                @id @default(uuid())
  business             Business              @relation(fields: [businessId], references: [id])
  businessId           String
  product              Product               @relation(fields: [productId], references: [id])
  productId            String
  oldOwnerId           String
  oldPrice             Float
  newPrice             Float
  markupPercentage     Float
  agreedViaChatId      String
  agreementDate        DateTime              // When agreement was finalized
  isApproved           Boolean               @default(false)  // Approval status
  createdAt            DateTime              @default(now())
}

model KYC {
  id                   String                @id @default(uuid())
  status               KycStatus             @default(PENDING)
  documentUrl          String
  submittedAt          DateTime              @default(now())
  verifiedAt           DateTime?
  business             Business?             @relation("BusinessKYC", fields: [businessId], references: [id])
  businessId           String? @unique
  client               Client?               @relation("ClientKYC", fields: [clientId], references: [id])
  clientId             String? @unique
  worker               Worker?               @relation("WorkerKYC", fields: [workerId], references: [id])
  workerId             String? @unique
}

model AccountRecharge {
  id                   String                @id @default(uuid())
  amount               Float
  method               RechargeMethod
  origin               Country
  business             Business?             @relation("BusinessRecharges", fields: [businessId], references: [id])
  businessId           String?
  client               Client?               @relation("ClientRecharges", fields: [clientId], references: [id])
  clientId             String?
  createdAt            DateTime              @default(now())
}

model Token {
  id                   String                @id @default(uuid())
  name                 String?               @default("uT")
  value                Int                   @default(0)
  createdAt            DateTime              @default(now())
}

model PaymentTransaction {
  id                   String                @id @default(uuid())
  order                Order?                 @relation(fields: [orderId], references: [id])
  orderId              String?                @unique
  status               PaymentStatus         @default(PENDING)
  method               PaymentMethod         @default(TOKEN)
  amount               Float
  transactionDate      DateTime              @default(now())
  qrCode               String?
  createdAt            DateTime              @default(now())
  freelanceOrder       FreelanceOrder?       @relation(fields: [freelanceOrderId], references: [id])
  freelanceOrderId     String?               @unique

  postTransactions PostTransaction[]
}

model Ad {
  id                   String                @id @default(uuid())
  business             Business              @relation(fields: [businessId], references: [id])
  businessId           String
  product              Product               @relation(fields: [productId], references: [id])
  productId            String
  price                Float
  periodDays           Int
  createdAt            DateTime              @default(now())
  endedAt              DateTime?
}

// Freelancing Models

model FreelanceService {
  id                   String                @id @default(uuid())
  title                String
  description          String?
  isHourly             Boolean               @default(true)
  rate                 Float                 // Ts per hour or fixed
  category             FreelanceServiceCategory? @default(OTHER)
  business             Business              @relation("ServiceOwner", fields: [businessId], references: [id])
  businessId           String
  orders               FreelanceOrder[]      
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  workerServiceAssignments WorkerServiceAssignment[]
  chats Chat[]
}

model WorkerServiceAssignment {
  id                   String                @id @default(uuid())
  worker               Worker                @relation(fields: [workerId], references: [id])
  workerId             String
  freelanceService     FreelanceService      @relation(fields: [freelanceServiceId], references: [id])
  freelanceServiceId   String
  role                 String?               // e.g., "Lead", "Assistant"
  assignedAt           DateTime              @default(now())
}

model FreelanceOrder {
  id                   String                @id @default(uuid())
  client               Client                @relation("ClientOrders", fields: [clientId], references: [id])
  clientId             String
  service              FreelanceService      @relation(fields: [serviceId], references: [id])
  serviceId            String
  status               FreelanceStatus       @default(PENDING)
  quantity             Int                   @default(1)  // hours or units
  totalAmount          Float                 // in Ts
  escrowAmount         Float                 // in Ts
  commissionPercent    Float                 // e.g. 0.1 for 10%
  escrowStatus         EscrowStatus?         @default(HELD) // HELD, RELEASED, DISPUTED
  escrowReleasedAt     DateTime?
  payment              PaymentTransaction?   
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  freelanceOrderBusiness FreelanceOrderBusiness[]
}

model FreelanceOrderBusiness {
  id                   String                @id @default(uuid())
  freelanceOrder       FreelanceOrder        @relation(fields: [freelanceOrderId], references: [id])
  freelanceOrderId     String
  business             Business              @relation(fields: [businessId], references: [id])
  businessId           String
  role                 String?               // e.g., "Contractor"
  assignedAt           DateTime              @default(now())
}

// Affiliation Tracking

model Referral {
  id                   String                @id @default(uuid())
  affiliateBusiness    Business?             @relation("BusinessAffiliations", fields: [affiliateBusinessId], references: [id])
  affiliateBusinessId  String?
  affiliateClient      Client?               @relation("ClientAffiliations", fields: [affiliateClientId], references: [id])
  affiliateClientId    String?
  referredBusiness     Business?             @relation("BusinessReferred", fields: [referredBusinessId], references: [id])
  referredBusinessId   String?
  referredClient       Client?               @relation("ClientReferred", fields: [referredClientId], references: [id])
  referredClientId     String?
  verifiedPurchase     Boolean               @default(false)
  createdAt            DateTime              @default(now())
}

// 2. Core PostOfSale model
model PostOfSale {
  id           String         @id @default(cuid())
  title        String
  description  String?
  price        Float
  status       PostStatus     @default(DRAFT)
  business     Business       @relation(fields: [businessId], references: [id])
  businessId   String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Optional relations
  media        Media[]        // if you attach images/videos
  transactions PostTransaction[]
}

// 3. Link PostTransaction to PostOfSale + Client + PaymentTransaction
model PostTransaction {
  id                  String                  @id @default(cuid())
  post                PostOfSale              @relation(fields: [postId], references: [id])
  postId              String
  client              Client                  @relation(fields: [clientId], references: [id])
  clientId            String
  paymentTransaction  PaymentTransaction?     @relation(fields: [paymentTransactionId], references: [id])
  paymentTransactionId String?

  status              PostTransactionStatus   @default(PENDING)
  amount              Float
  createdAt           DateTime                @default(now())
}
