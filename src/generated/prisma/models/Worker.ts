
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Worker` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Worker
 * 
 */
export type WorkerModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkerPayload>

export type AggregateWorker = {
  _count: WorkerCountAggregateOutputType | null
  _min: WorkerMinAggregateOutputType | null
  _max: WorkerMaxAggregateOutputType | null
}

export type WorkerMinAggregateOutputType = {
  id: string | null
  email: string | null
  fullName: string | null
  role: string | null
  phone: string | null
  password: string | null
  businessId: string | null
  isVerified: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WorkerMaxAggregateOutputType = {
  id: string | null
  email: string | null
  fullName: string | null
  role: string | null
  phone: string | null
  password: string | null
  businessId: string | null
  isVerified: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WorkerCountAggregateOutputType = {
  id: number
  email: number
  fullName: number
  role: number
  phone: number
  password: number
  businessId: number
  isVerified: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type WorkerMinAggregateInputType = {
  id?: true
  email?: true
  fullName?: true
  role?: true
  phone?: true
  password?: true
  businessId?: true
  isVerified?: true
  createdAt?: true
  updatedAt?: true
}

export type WorkerMaxAggregateInputType = {
  id?: true
  email?: true
  fullName?: true
  role?: true
  phone?: true
  password?: true
  businessId?: true
  isVerified?: true
  createdAt?: true
  updatedAt?: true
}

export type WorkerCountAggregateInputType = {
  id?: true
  email?: true
  fullName?: true
  role?: true
  phone?: true
  password?: true
  businessId?: true
  isVerified?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type WorkerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Worker to aggregate.
   */
  where?: Prisma.WorkerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Workers to fetch.
   */
  orderBy?: Prisma.WorkerOrderByWithRelationInput | Prisma.WorkerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Workers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Workers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Workers
  **/
  _count?: true | WorkerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkerMaxAggregateInputType
}

export type GetWorkerAggregateType<T extends WorkerAggregateArgs> = {
      [P in keyof T & keyof AggregateWorker]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorker[P]>
    : Prisma.GetScalarType<T[P], AggregateWorker[P]>
}




export type WorkerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkerWhereInput
  orderBy?: Prisma.WorkerOrderByWithAggregationInput | Prisma.WorkerOrderByWithAggregationInput[]
  by: Prisma.WorkerScalarFieldEnum[] | Prisma.WorkerScalarFieldEnum
  having?: Prisma.WorkerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkerCountAggregateInputType | true
  _min?: WorkerMinAggregateInputType
  _max?: WorkerMaxAggregateInputType
}

export type WorkerGroupByOutputType = {
  id: string
  email: string
  fullName: string | null
  role: string | null
  phone: string | null
  password: string
  businessId: string
  isVerified: boolean
  createdAt: Date
  updatedAt: Date
  _count: WorkerCountAggregateOutputType | null
  _min: WorkerMinAggregateOutputType | null
  _max: WorkerMaxAggregateOutputType | null
}

type GetWorkerGroupByPayload<T extends WorkerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkerGroupByOutputType[P]>
      }
    >
  > 



export type WorkerWhereInput = {
  AND?: Prisma.WorkerWhereInput | Prisma.WorkerWhereInput[]
  OR?: Prisma.WorkerWhereInput[]
  NOT?: Prisma.WorkerWhereInput | Prisma.WorkerWhereInput[]
  id?: Prisma.StringFilter<"Worker"> | string
  email?: Prisma.StringFilter<"Worker"> | string
  fullName?: Prisma.StringNullableFilter<"Worker"> | string | null
  role?: Prisma.StringNullableFilter<"Worker"> | string | null
  phone?: Prisma.StringNullableFilter<"Worker"> | string | null
  password?: Prisma.StringFilter<"Worker"> | string
  businessId?: Prisma.StringFilter<"Worker"> | string
  isVerified?: Prisma.BoolFilter<"Worker"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Worker"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Worker"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
  freelanceServices?: Prisma.FreelanceServiceListRelationFilter
  kyc?: Prisma.XOR<Prisma.KYCNullableScalarRelationFilter, Prisma.KYCWhereInput> | null
  chats?: Prisma.ChatListRelationFilter
}

export type WorkerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  fullName?: Prisma.SortOrderInput | Prisma.SortOrder
  role?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  password?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  isVerified?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  business?: Prisma.BusinessOrderByWithRelationInput
  freelanceServices?: Prisma.FreelanceServiceOrderByRelationAggregateInput
  kyc?: Prisma.KYCOrderByWithRelationInput
  chats?: Prisma.ChatOrderByRelationAggregateInput
}

export type WorkerWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  AND?: Prisma.WorkerWhereInput | Prisma.WorkerWhereInput[]
  OR?: Prisma.WorkerWhereInput[]
  NOT?: Prisma.WorkerWhereInput | Prisma.WorkerWhereInput[]
  fullName?: Prisma.StringNullableFilter<"Worker"> | string | null
  role?: Prisma.StringNullableFilter<"Worker"> | string | null
  phone?: Prisma.StringNullableFilter<"Worker"> | string | null
  password?: Prisma.StringFilter<"Worker"> | string
  businessId?: Prisma.StringFilter<"Worker"> | string
  isVerified?: Prisma.BoolFilter<"Worker"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Worker"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Worker"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
  freelanceServices?: Prisma.FreelanceServiceListRelationFilter
  kyc?: Prisma.XOR<Prisma.KYCNullableScalarRelationFilter, Prisma.KYCWhereInput> | null
  chats?: Prisma.ChatListRelationFilter
}, "id" | "email">

export type WorkerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  fullName?: Prisma.SortOrderInput | Prisma.SortOrder
  role?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  password?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  isVerified?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WorkerCountOrderByAggregateInput
  _max?: Prisma.WorkerMaxOrderByAggregateInput
  _min?: Prisma.WorkerMinOrderByAggregateInput
}

export type WorkerScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkerScalarWhereWithAggregatesInput | Prisma.WorkerScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkerScalarWhereWithAggregatesInput | Prisma.WorkerScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Worker"> | string
  email?: Prisma.StringWithAggregatesFilter<"Worker"> | string
  fullName?: Prisma.StringNullableWithAggregatesFilter<"Worker"> | string | null
  role?: Prisma.StringNullableWithAggregatesFilter<"Worker"> | string | null
  phone?: Prisma.StringNullableWithAggregatesFilter<"Worker"> | string | null
  password?: Prisma.StringWithAggregatesFilter<"Worker"> | string
  businessId?: Prisma.StringWithAggregatesFilter<"Worker"> | string
  isVerified?: Prisma.BoolWithAggregatesFilter<"Worker"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Worker"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Worker"> | Date | string
}

export type WorkerCreateInput = {
  id?: string
  email: string
  fullName?: string | null
  role?: string | null
  phone?: string | null
  password: string
  isVerified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutWorkersInput
  freelanceServices?: Prisma.FreelanceServiceCreateNestedManyWithoutWorkersInput
  kyc?: Prisma.KYCCreateNestedOneWithoutWorkerInput
  chats?: Prisma.ChatCreateNestedManyWithoutWorkerInput
}

export type WorkerUncheckedCreateInput = {
  id?: string
  email: string
  fullName?: string | null
  role?: string | null
  phone?: string | null
  password: string
  businessId: string
  isVerified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  freelanceServices?: Prisma.FreelanceServiceUncheckedCreateNestedManyWithoutWorkersInput
  kyc?: Prisma.KYCUncheckedCreateNestedOneWithoutWorkerInput
  chats?: Prisma.ChatUncheckedCreateNestedManyWithoutWorkerInput
}

export type WorkerUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutWorkersNestedInput
  freelanceServices?: Prisma.FreelanceServiceUpdateManyWithoutWorkersNestedInput
  kyc?: Prisma.KYCUpdateOneWithoutWorkerNestedInput
  chats?: Prisma.ChatUpdateManyWithoutWorkerNestedInput
}

export type WorkerUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelanceServices?: Prisma.FreelanceServiceUncheckedUpdateManyWithoutWorkersNestedInput
  kyc?: Prisma.KYCUncheckedUpdateOneWithoutWorkerNestedInput
  chats?: Prisma.ChatUncheckedUpdateManyWithoutWorkerNestedInput
}

export type WorkerCreateManyInput = {
  id?: string
  email: string
  fullName?: string | null
  role?: string | null
  phone?: string | null
  password: string
  businessId: string
  isVerified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkerUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkerUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkerListRelationFilter = {
  every?: Prisma.WorkerWhereInput
  some?: Prisma.WorkerWhereInput
  none?: Prisma.WorkerWhereInput
}

export type WorkerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WorkerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  role?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  password?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  isVerified?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  role?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  password?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  isVerified?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  role?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  password?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  isVerified?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkerNullableScalarRelationFilter = {
  is?: Prisma.WorkerWhereInput | null
  isNot?: Prisma.WorkerWhereInput | null
}

export type WorkerCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.WorkerCreateWithoutBusinessInput, Prisma.WorkerUncheckedCreateWithoutBusinessInput> | Prisma.WorkerCreateWithoutBusinessInput[] | Prisma.WorkerUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.WorkerCreateOrConnectWithoutBusinessInput | Prisma.WorkerCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.WorkerCreateManyBusinessInputEnvelope
  connect?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
}

export type WorkerUncheckedCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.WorkerCreateWithoutBusinessInput, Prisma.WorkerUncheckedCreateWithoutBusinessInput> | Prisma.WorkerCreateWithoutBusinessInput[] | Prisma.WorkerUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.WorkerCreateOrConnectWithoutBusinessInput | Prisma.WorkerCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.WorkerCreateManyBusinessInputEnvelope
  connect?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
}

export type WorkerUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerCreateWithoutBusinessInput, Prisma.WorkerUncheckedCreateWithoutBusinessInput> | Prisma.WorkerCreateWithoutBusinessInput[] | Prisma.WorkerUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.WorkerCreateOrConnectWithoutBusinessInput | Prisma.WorkerCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.WorkerUpsertWithWhereUniqueWithoutBusinessInput | Prisma.WorkerUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.WorkerCreateManyBusinessInputEnvelope
  set?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  disconnect?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  delete?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  connect?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  update?: Prisma.WorkerUpdateWithWhereUniqueWithoutBusinessInput | Prisma.WorkerUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.WorkerUpdateManyWithWhereWithoutBusinessInput | Prisma.WorkerUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.WorkerScalarWhereInput | Prisma.WorkerScalarWhereInput[]
}

export type WorkerUncheckedUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerCreateWithoutBusinessInput, Prisma.WorkerUncheckedCreateWithoutBusinessInput> | Prisma.WorkerCreateWithoutBusinessInput[] | Prisma.WorkerUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.WorkerCreateOrConnectWithoutBusinessInput | Prisma.WorkerCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.WorkerUpsertWithWhereUniqueWithoutBusinessInput | Prisma.WorkerUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.WorkerCreateManyBusinessInputEnvelope
  set?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  disconnect?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  delete?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  connect?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  update?: Prisma.WorkerUpdateWithWhereUniqueWithoutBusinessInput | Prisma.WorkerUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.WorkerUpdateManyWithWhereWithoutBusinessInput | Prisma.WorkerUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.WorkerScalarWhereInput | Prisma.WorkerScalarWhereInput[]
}

export type WorkerCreateNestedOneWithoutChatsInput = {
  create?: Prisma.XOR<Prisma.WorkerCreateWithoutChatsInput, Prisma.WorkerUncheckedCreateWithoutChatsInput>
  connectOrCreate?: Prisma.WorkerCreateOrConnectWithoutChatsInput
  connect?: Prisma.WorkerWhereUniqueInput
}

export type WorkerUpdateOneWithoutChatsNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerCreateWithoutChatsInput, Prisma.WorkerUncheckedCreateWithoutChatsInput>
  connectOrCreate?: Prisma.WorkerCreateOrConnectWithoutChatsInput
  upsert?: Prisma.WorkerUpsertWithoutChatsInput
  disconnect?: Prisma.WorkerWhereInput | boolean
  delete?: Prisma.WorkerWhereInput | boolean
  connect?: Prisma.WorkerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkerUpdateToOneWithWhereWithoutChatsInput, Prisma.WorkerUpdateWithoutChatsInput>, Prisma.WorkerUncheckedUpdateWithoutChatsInput>
}

export type WorkerCreateNestedOneWithoutKycInput = {
  create?: Prisma.XOR<Prisma.WorkerCreateWithoutKycInput, Prisma.WorkerUncheckedCreateWithoutKycInput>
  connectOrCreate?: Prisma.WorkerCreateOrConnectWithoutKycInput
  connect?: Prisma.WorkerWhereUniqueInput
}

export type WorkerUpdateOneWithoutKycNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerCreateWithoutKycInput, Prisma.WorkerUncheckedCreateWithoutKycInput>
  connectOrCreate?: Prisma.WorkerCreateOrConnectWithoutKycInput
  upsert?: Prisma.WorkerUpsertWithoutKycInput
  disconnect?: Prisma.WorkerWhereInput | boolean
  delete?: Prisma.WorkerWhereInput | boolean
  connect?: Prisma.WorkerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkerUpdateToOneWithWhereWithoutKycInput, Prisma.WorkerUpdateWithoutKycInput>, Prisma.WorkerUncheckedUpdateWithoutKycInput>
}

export type WorkerCreateNestedManyWithoutFreelanceServicesInput = {
  create?: Prisma.XOR<Prisma.WorkerCreateWithoutFreelanceServicesInput, Prisma.WorkerUncheckedCreateWithoutFreelanceServicesInput> | Prisma.WorkerCreateWithoutFreelanceServicesInput[] | Prisma.WorkerUncheckedCreateWithoutFreelanceServicesInput[]
  connectOrCreate?: Prisma.WorkerCreateOrConnectWithoutFreelanceServicesInput | Prisma.WorkerCreateOrConnectWithoutFreelanceServicesInput[]
  connect?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
}

export type WorkerUncheckedCreateNestedManyWithoutFreelanceServicesInput = {
  create?: Prisma.XOR<Prisma.WorkerCreateWithoutFreelanceServicesInput, Prisma.WorkerUncheckedCreateWithoutFreelanceServicesInput> | Prisma.WorkerCreateWithoutFreelanceServicesInput[] | Prisma.WorkerUncheckedCreateWithoutFreelanceServicesInput[]
  connectOrCreate?: Prisma.WorkerCreateOrConnectWithoutFreelanceServicesInput | Prisma.WorkerCreateOrConnectWithoutFreelanceServicesInput[]
  connect?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
}

export type WorkerUpdateManyWithoutFreelanceServicesNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerCreateWithoutFreelanceServicesInput, Prisma.WorkerUncheckedCreateWithoutFreelanceServicesInput> | Prisma.WorkerCreateWithoutFreelanceServicesInput[] | Prisma.WorkerUncheckedCreateWithoutFreelanceServicesInput[]
  connectOrCreate?: Prisma.WorkerCreateOrConnectWithoutFreelanceServicesInput | Prisma.WorkerCreateOrConnectWithoutFreelanceServicesInput[]
  upsert?: Prisma.WorkerUpsertWithWhereUniqueWithoutFreelanceServicesInput | Prisma.WorkerUpsertWithWhereUniqueWithoutFreelanceServicesInput[]
  set?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  disconnect?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  delete?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  connect?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  update?: Prisma.WorkerUpdateWithWhereUniqueWithoutFreelanceServicesInput | Prisma.WorkerUpdateWithWhereUniqueWithoutFreelanceServicesInput[]
  updateMany?: Prisma.WorkerUpdateManyWithWhereWithoutFreelanceServicesInput | Prisma.WorkerUpdateManyWithWhereWithoutFreelanceServicesInput[]
  deleteMany?: Prisma.WorkerScalarWhereInput | Prisma.WorkerScalarWhereInput[]
}

export type WorkerUncheckedUpdateManyWithoutFreelanceServicesNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerCreateWithoutFreelanceServicesInput, Prisma.WorkerUncheckedCreateWithoutFreelanceServicesInput> | Prisma.WorkerCreateWithoutFreelanceServicesInput[] | Prisma.WorkerUncheckedCreateWithoutFreelanceServicesInput[]
  connectOrCreate?: Prisma.WorkerCreateOrConnectWithoutFreelanceServicesInput | Prisma.WorkerCreateOrConnectWithoutFreelanceServicesInput[]
  upsert?: Prisma.WorkerUpsertWithWhereUniqueWithoutFreelanceServicesInput | Prisma.WorkerUpsertWithWhereUniqueWithoutFreelanceServicesInput[]
  set?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  disconnect?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  delete?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  connect?: Prisma.WorkerWhereUniqueInput | Prisma.WorkerWhereUniqueInput[]
  update?: Prisma.WorkerUpdateWithWhereUniqueWithoutFreelanceServicesInput | Prisma.WorkerUpdateWithWhereUniqueWithoutFreelanceServicesInput[]
  updateMany?: Prisma.WorkerUpdateManyWithWhereWithoutFreelanceServicesInput | Prisma.WorkerUpdateManyWithWhereWithoutFreelanceServicesInput[]
  deleteMany?: Prisma.WorkerScalarWhereInput | Prisma.WorkerScalarWhereInput[]
}

export type WorkerCreateWithoutBusinessInput = {
  id?: string
  email: string
  fullName?: string | null
  role?: string | null
  phone?: string | null
  password: string
  isVerified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  freelanceServices?: Prisma.FreelanceServiceCreateNestedManyWithoutWorkersInput
  kyc?: Prisma.KYCCreateNestedOneWithoutWorkerInput
  chats?: Prisma.ChatCreateNestedManyWithoutWorkerInput
}

export type WorkerUncheckedCreateWithoutBusinessInput = {
  id?: string
  email: string
  fullName?: string | null
  role?: string | null
  phone?: string | null
  password: string
  isVerified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  freelanceServices?: Prisma.FreelanceServiceUncheckedCreateNestedManyWithoutWorkersInput
  kyc?: Prisma.KYCUncheckedCreateNestedOneWithoutWorkerInput
  chats?: Prisma.ChatUncheckedCreateNestedManyWithoutWorkerInput
}

export type WorkerCreateOrConnectWithoutBusinessInput = {
  where: Prisma.WorkerWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkerCreateWithoutBusinessInput, Prisma.WorkerUncheckedCreateWithoutBusinessInput>
}

export type WorkerCreateManyBusinessInputEnvelope = {
  data: Prisma.WorkerCreateManyBusinessInput | Prisma.WorkerCreateManyBusinessInput[]
  skipDuplicates?: boolean
}

export type WorkerUpsertWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.WorkerWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkerUpdateWithoutBusinessInput, Prisma.WorkerUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.WorkerCreateWithoutBusinessInput, Prisma.WorkerUncheckedCreateWithoutBusinessInput>
}

export type WorkerUpdateWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.WorkerWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkerUpdateWithoutBusinessInput, Prisma.WorkerUncheckedUpdateWithoutBusinessInput>
}

export type WorkerUpdateManyWithWhereWithoutBusinessInput = {
  where: Prisma.WorkerScalarWhereInput
  data: Prisma.XOR<Prisma.WorkerUpdateManyMutationInput, Prisma.WorkerUncheckedUpdateManyWithoutBusinessInput>
}

export type WorkerScalarWhereInput = {
  AND?: Prisma.WorkerScalarWhereInput | Prisma.WorkerScalarWhereInput[]
  OR?: Prisma.WorkerScalarWhereInput[]
  NOT?: Prisma.WorkerScalarWhereInput | Prisma.WorkerScalarWhereInput[]
  id?: Prisma.StringFilter<"Worker"> | string
  email?: Prisma.StringFilter<"Worker"> | string
  fullName?: Prisma.StringNullableFilter<"Worker"> | string | null
  role?: Prisma.StringNullableFilter<"Worker"> | string | null
  phone?: Prisma.StringNullableFilter<"Worker"> | string | null
  password?: Prisma.StringFilter<"Worker"> | string
  businessId?: Prisma.StringFilter<"Worker"> | string
  isVerified?: Prisma.BoolFilter<"Worker"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Worker"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Worker"> | Date | string
}

export type WorkerCreateWithoutChatsInput = {
  id?: string
  email: string
  fullName?: string | null
  role?: string | null
  phone?: string | null
  password: string
  isVerified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutWorkersInput
  freelanceServices?: Prisma.FreelanceServiceCreateNestedManyWithoutWorkersInput
  kyc?: Prisma.KYCCreateNestedOneWithoutWorkerInput
}

export type WorkerUncheckedCreateWithoutChatsInput = {
  id?: string
  email: string
  fullName?: string | null
  role?: string | null
  phone?: string | null
  password: string
  businessId: string
  isVerified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  freelanceServices?: Prisma.FreelanceServiceUncheckedCreateNestedManyWithoutWorkersInput
  kyc?: Prisma.KYCUncheckedCreateNestedOneWithoutWorkerInput
}

export type WorkerCreateOrConnectWithoutChatsInput = {
  where: Prisma.WorkerWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkerCreateWithoutChatsInput, Prisma.WorkerUncheckedCreateWithoutChatsInput>
}

export type WorkerUpsertWithoutChatsInput = {
  update: Prisma.XOR<Prisma.WorkerUpdateWithoutChatsInput, Prisma.WorkerUncheckedUpdateWithoutChatsInput>
  create: Prisma.XOR<Prisma.WorkerCreateWithoutChatsInput, Prisma.WorkerUncheckedCreateWithoutChatsInput>
  where?: Prisma.WorkerWhereInput
}

export type WorkerUpdateToOneWithWhereWithoutChatsInput = {
  where?: Prisma.WorkerWhereInput
  data: Prisma.XOR<Prisma.WorkerUpdateWithoutChatsInput, Prisma.WorkerUncheckedUpdateWithoutChatsInput>
}

export type WorkerUpdateWithoutChatsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutWorkersNestedInput
  freelanceServices?: Prisma.FreelanceServiceUpdateManyWithoutWorkersNestedInput
  kyc?: Prisma.KYCUpdateOneWithoutWorkerNestedInput
}

export type WorkerUncheckedUpdateWithoutChatsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelanceServices?: Prisma.FreelanceServiceUncheckedUpdateManyWithoutWorkersNestedInput
  kyc?: Prisma.KYCUncheckedUpdateOneWithoutWorkerNestedInput
}

export type WorkerCreateWithoutKycInput = {
  id?: string
  email: string
  fullName?: string | null
  role?: string | null
  phone?: string | null
  password: string
  isVerified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutWorkersInput
  freelanceServices?: Prisma.FreelanceServiceCreateNestedManyWithoutWorkersInput
  chats?: Prisma.ChatCreateNestedManyWithoutWorkerInput
}

export type WorkerUncheckedCreateWithoutKycInput = {
  id?: string
  email: string
  fullName?: string | null
  role?: string | null
  phone?: string | null
  password: string
  businessId: string
  isVerified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  freelanceServices?: Prisma.FreelanceServiceUncheckedCreateNestedManyWithoutWorkersInput
  chats?: Prisma.ChatUncheckedCreateNestedManyWithoutWorkerInput
}

export type WorkerCreateOrConnectWithoutKycInput = {
  where: Prisma.WorkerWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkerCreateWithoutKycInput, Prisma.WorkerUncheckedCreateWithoutKycInput>
}

export type WorkerUpsertWithoutKycInput = {
  update: Prisma.XOR<Prisma.WorkerUpdateWithoutKycInput, Prisma.WorkerUncheckedUpdateWithoutKycInput>
  create: Prisma.XOR<Prisma.WorkerCreateWithoutKycInput, Prisma.WorkerUncheckedCreateWithoutKycInput>
  where?: Prisma.WorkerWhereInput
}

export type WorkerUpdateToOneWithWhereWithoutKycInput = {
  where?: Prisma.WorkerWhereInput
  data: Prisma.XOR<Prisma.WorkerUpdateWithoutKycInput, Prisma.WorkerUncheckedUpdateWithoutKycInput>
}

export type WorkerUpdateWithoutKycInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutWorkersNestedInput
  freelanceServices?: Prisma.FreelanceServiceUpdateManyWithoutWorkersNestedInput
  chats?: Prisma.ChatUpdateManyWithoutWorkerNestedInput
}

export type WorkerUncheckedUpdateWithoutKycInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelanceServices?: Prisma.FreelanceServiceUncheckedUpdateManyWithoutWorkersNestedInput
  chats?: Prisma.ChatUncheckedUpdateManyWithoutWorkerNestedInput
}

export type WorkerCreateWithoutFreelanceServicesInput = {
  id?: string
  email: string
  fullName?: string | null
  role?: string | null
  phone?: string | null
  password: string
  isVerified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutWorkersInput
  kyc?: Prisma.KYCCreateNestedOneWithoutWorkerInput
  chats?: Prisma.ChatCreateNestedManyWithoutWorkerInput
}

export type WorkerUncheckedCreateWithoutFreelanceServicesInput = {
  id?: string
  email: string
  fullName?: string | null
  role?: string | null
  phone?: string | null
  password: string
  businessId: string
  isVerified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  kyc?: Prisma.KYCUncheckedCreateNestedOneWithoutWorkerInput
  chats?: Prisma.ChatUncheckedCreateNestedManyWithoutWorkerInput
}

export type WorkerCreateOrConnectWithoutFreelanceServicesInput = {
  where: Prisma.WorkerWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkerCreateWithoutFreelanceServicesInput, Prisma.WorkerUncheckedCreateWithoutFreelanceServicesInput>
}

export type WorkerUpsertWithWhereUniqueWithoutFreelanceServicesInput = {
  where: Prisma.WorkerWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkerUpdateWithoutFreelanceServicesInput, Prisma.WorkerUncheckedUpdateWithoutFreelanceServicesInput>
  create: Prisma.XOR<Prisma.WorkerCreateWithoutFreelanceServicesInput, Prisma.WorkerUncheckedCreateWithoutFreelanceServicesInput>
}

export type WorkerUpdateWithWhereUniqueWithoutFreelanceServicesInput = {
  where: Prisma.WorkerWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkerUpdateWithoutFreelanceServicesInput, Prisma.WorkerUncheckedUpdateWithoutFreelanceServicesInput>
}

export type WorkerUpdateManyWithWhereWithoutFreelanceServicesInput = {
  where: Prisma.WorkerScalarWhereInput
  data: Prisma.XOR<Prisma.WorkerUpdateManyMutationInput, Prisma.WorkerUncheckedUpdateManyWithoutFreelanceServicesInput>
}

export type WorkerCreateManyBusinessInput = {
  id?: string
  email: string
  fullName?: string | null
  role?: string | null
  phone?: string | null
  password: string
  isVerified?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkerUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelanceServices?: Prisma.FreelanceServiceUpdateManyWithoutWorkersNestedInput
  kyc?: Prisma.KYCUpdateOneWithoutWorkerNestedInput
  chats?: Prisma.ChatUpdateManyWithoutWorkerNestedInput
}

export type WorkerUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelanceServices?: Prisma.FreelanceServiceUncheckedUpdateManyWithoutWorkersNestedInput
  kyc?: Prisma.KYCUncheckedUpdateOneWithoutWorkerNestedInput
  chats?: Prisma.ChatUncheckedUpdateManyWithoutWorkerNestedInput
}

export type WorkerUncheckedUpdateManyWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkerUpdateWithoutFreelanceServicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutWorkersNestedInput
  kyc?: Prisma.KYCUpdateOneWithoutWorkerNestedInput
  chats?: Prisma.ChatUpdateManyWithoutWorkerNestedInput
}

export type WorkerUncheckedUpdateWithoutFreelanceServicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  kyc?: Prisma.KYCUncheckedUpdateOneWithoutWorkerNestedInput
  chats?: Prisma.ChatUncheckedUpdateManyWithoutWorkerNestedInput
}

export type WorkerUncheckedUpdateManyWithoutFreelanceServicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  isVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type WorkerCountOutputType
 */

export type WorkerCountOutputType = {
  freelanceServices: number
  chats: number
}

export type WorkerCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  freelanceServices?: boolean | WorkerCountOutputTypeCountFreelanceServicesArgs
  chats?: boolean | WorkerCountOutputTypeCountChatsArgs
}

/**
 * WorkerCountOutputType without action
 */
export type WorkerCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerCountOutputType
   */
  select?: Prisma.WorkerCountOutputTypeSelect<ExtArgs> | null
}

/**
 * WorkerCountOutputType without action
 */
export type WorkerCountOutputTypeCountFreelanceServicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FreelanceServiceWhereInput
}

/**
 * WorkerCountOutputType without action
 */
export type WorkerCountOutputTypeCountChatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatWhereInput
}


export type WorkerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  fullName?: boolean
  role?: boolean
  phone?: boolean
  password?: boolean
  businessId?: boolean
  isVerified?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  freelanceServices?: boolean | Prisma.Worker$freelanceServicesArgs<ExtArgs>
  kyc?: boolean | Prisma.Worker$kycArgs<ExtArgs>
  chats?: boolean | Prisma.Worker$chatsArgs<ExtArgs>
  _count?: boolean | Prisma.WorkerCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["worker"]>

export type WorkerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  fullName?: boolean
  role?: boolean
  phone?: boolean
  password?: boolean
  businessId?: boolean
  isVerified?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["worker"]>

export type WorkerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  fullName?: boolean
  role?: boolean
  phone?: boolean
  password?: boolean
  businessId?: boolean
  isVerified?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["worker"]>

export type WorkerSelectScalar = {
  id?: boolean
  email?: boolean
  fullName?: boolean
  role?: boolean
  phone?: boolean
  password?: boolean
  businessId?: boolean
  isVerified?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type WorkerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "email" | "fullName" | "role" | "phone" | "password" | "businessId" | "isVerified" | "createdAt" | "updatedAt", ExtArgs["result"]["worker"]>
export type WorkerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  freelanceServices?: boolean | Prisma.Worker$freelanceServicesArgs<ExtArgs>
  kyc?: boolean | Prisma.Worker$kycArgs<ExtArgs>
  chats?: boolean | Prisma.Worker$chatsArgs<ExtArgs>
  _count?: boolean | Prisma.WorkerCountOutputTypeDefaultArgs<ExtArgs>
}
export type WorkerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}
export type WorkerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}

export type $WorkerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Worker"
  objects: {
    business: Prisma.$BusinessPayload<ExtArgs>
    freelanceServices: Prisma.$FreelanceServicePayload<ExtArgs>[]
    kyc: Prisma.$KYCPayload<ExtArgs> | null
    chats: Prisma.$ChatPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    email: string
    fullName: string | null
    role: string | null
    phone: string | null
    password: string
    businessId: string
    isVerified: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["worker"]>
  composites: {}
}

export type WorkerGetPayload<S extends boolean | null | undefined | WorkerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkerPayload, S>

export type WorkerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkerCountAggregateInputType | true
  }

export interface WorkerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Worker'], meta: { name: 'Worker' } }
  /**
   * Find zero or one Worker that matches the filter.
   * @param {WorkerFindUniqueArgs} args - Arguments to find a Worker
   * @example
   * // Get one Worker
   * const worker = await prisma.worker.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkerFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkerClient<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Worker that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkerFindUniqueOrThrowArgs} args - Arguments to find a Worker
   * @example
   * // Get one Worker
   * const worker = await prisma.worker.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkerClient<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Worker that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerFindFirstArgs} args - Arguments to find a Worker
   * @example
   * // Get one Worker
   * const worker = await prisma.worker.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkerFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkerFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkerClient<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Worker that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerFindFirstOrThrowArgs} args - Arguments to find a Worker
   * @example
   * // Get one Worker
   * const worker = await prisma.worker.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkerClient<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Workers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Workers
   * const workers = await prisma.worker.findMany()
   * 
   * // Get first 10 Workers
   * const workers = await prisma.worker.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workerWithIdOnly = await prisma.worker.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkerFindManyArgs>(args?: Prisma.SelectSubset<T, WorkerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Worker.
   * @param {WorkerCreateArgs} args - Arguments to create a Worker.
   * @example
   * // Create one Worker
   * const Worker = await prisma.worker.create({
   *   data: {
   *     // ... data to create a Worker
   *   }
   * })
   * 
   */
  create<T extends WorkerCreateArgs>(args: Prisma.SelectSubset<T, WorkerCreateArgs<ExtArgs>>): Prisma.Prisma__WorkerClient<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Workers.
   * @param {WorkerCreateManyArgs} args - Arguments to create many Workers.
   * @example
   * // Create many Workers
   * const worker = await prisma.worker.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkerCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Workers and returns the data saved in the database.
   * @param {WorkerCreateManyAndReturnArgs} args - Arguments to create many Workers.
   * @example
   * // Create many Workers
   * const worker = await prisma.worker.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Workers and only return the `id`
   * const workerWithIdOnly = await prisma.worker.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Worker.
   * @param {WorkerDeleteArgs} args - Arguments to delete one Worker.
   * @example
   * // Delete one Worker
   * const Worker = await prisma.worker.delete({
   *   where: {
   *     // ... filter to delete one Worker
   *   }
   * })
   * 
   */
  delete<T extends WorkerDeleteArgs>(args: Prisma.SelectSubset<T, WorkerDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkerClient<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Worker.
   * @param {WorkerUpdateArgs} args - Arguments to update one Worker.
   * @example
   * // Update one Worker
   * const worker = await prisma.worker.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkerUpdateArgs>(args: Prisma.SelectSubset<T, WorkerUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkerClient<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Workers.
   * @param {WorkerDeleteManyArgs} args - Arguments to filter Workers to delete.
   * @example
   * // Delete a few Workers
   * const { count } = await prisma.worker.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkerDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Workers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Workers
   * const worker = await prisma.worker.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkerUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Workers and returns the data updated in the database.
   * @param {WorkerUpdateManyAndReturnArgs} args - Arguments to update many Workers.
   * @example
   * // Update many Workers
   * const worker = await prisma.worker.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Workers and only return the `id`
   * const workerWithIdOnly = await prisma.worker.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Worker.
   * @param {WorkerUpsertArgs} args - Arguments to update or create a Worker.
   * @example
   * // Update or create a Worker
   * const worker = await prisma.worker.upsert({
   *   create: {
   *     // ... data to create a Worker
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Worker we want to update
   *   }
   * })
   */
  upsert<T extends WorkerUpsertArgs>(args: Prisma.SelectSubset<T, WorkerUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkerClient<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Workers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerCountArgs} args - Arguments to filter Workers to count.
   * @example
   * // Count the number of Workers
   * const count = await prisma.worker.count({
   *   where: {
   *     // ... the filter for the Workers we want to count
   *   }
   * })
  **/
  count<T extends WorkerCountArgs>(
    args?: Prisma.Subset<T, WorkerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Worker.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkerAggregateArgs>(args: Prisma.Subset<T, WorkerAggregateArgs>): Prisma.PrismaPromise<GetWorkerAggregateType<T>>

  /**
   * Group by Worker.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkerGroupByArgs['orderBy'] }
      : { orderBy?: WorkerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Worker model
 */
readonly fields: WorkerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Worker.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  business<T extends Prisma.BusinessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BusinessDefaultArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  freelanceServices<T extends Prisma.Worker$freelanceServicesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Worker$freelanceServicesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  kyc<T extends Prisma.Worker$kycArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Worker$kycArgs<ExtArgs>>): Prisma.Prisma__KYCClient<runtime.Types.Result.GetResult<Prisma.$KYCPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  chats<T extends Prisma.Worker$chatsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Worker$chatsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Worker model
 */
export interface WorkerFieldRefs {
  readonly id: Prisma.FieldRef<"Worker", 'String'>
  readonly email: Prisma.FieldRef<"Worker", 'String'>
  readonly fullName: Prisma.FieldRef<"Worker", 'String'>
  readonly role: Prisma.FieldRef<"Worker", 'String'>
  readonly phone: Prisma.FieldRef<"Worker", 'String'>
  readonly password: Prisma.FieldRef<"Worker", 'String'>
  readonly businessId: Prisma.FieldRef<"Worker", 'String'>
  readonly isVerified: Prisma.FieldRef<"Worker", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Worker", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Worker", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Worker findUnique
 */
export type WorkerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerInclude<ExtArgs> | null
  /**
   * Filter, which Worker to fetch.
   */
  where: Prisma.WorkerWhereUniqueInput
}

/**
 * Worker findUniqueOrThrow
 */
export type WorkerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerInclude<ExtArgs> | null
  /**
   * Filter, which Worker to fetch.
   */
  where: Prisma.WorkerWhereUniqueInput
}

/**
 * Worker findFirst
 */
export type WorkerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerInclude<ExtArgs> | null
  /**
   * Filter, which Worker to fetch.
   */
  where?: Prisma.WorkerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Workers to fetch.
   */
  orderBy?: Prisma.WorkerOrderByWithRelationInput | Prisma.WorkerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Workers.
   */
  cursor?: Prisma.WorkerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Workers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Workers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Workers.
   */
  distinct?: Prisma.WorkerScalarFieldEnum | Prisma.WorkerScalarFieldEnum[]
}

/**
 * Worker findFirstOrThrow
 */
export type WorkerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerInclude<ExtArgs> | null
  /**
   * Filter, which Worker to fetch.
   */
  where?: Prisma.WorkerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Workers to fetch.
   */
  orderBy?: Prisma.WorkerOrderByWithRelationInput | Prisma.WorkerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Workers.
   */
  cursor?: Prisma.WorkerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Workers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Workers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Workers.
   */
  distinct?: Prisma.WorkerScalarFieldEnum | Prisma.WorkerScalarFieldEnum[]
}

/**
 * Worker findMany
 */
export type WorkerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerInclude<ExtArgs> | null
  /**
   * Filter, which Workers to fetch.
   */
  where?: Prisma.WorkerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Workers to fetch.
   */
  orderBy?: Prisma.WorkerOrderByWithRelationInput | Prisma.WorkerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Workers.
   */
  cursor?: Prisma.WorkerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Workers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Workers.
   */
  skip?: number
  distinct?: Prisma.WorkerScalarFieldEnum | Prisma.WorkerScalarFieldEnum[]
}

/**
 * Worker create
 */
export type WorkerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerInclude<ExtArgs> | null
  /**
   * The data needed to create a Worker.
   */
  data: Prisma.XOR<Prisma.WorkerCreateInput, Prisma.WorkerUncheckedCreateInput>
}

/**
 * Worker createMany
 */
export type WorkerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Workers.
   */
  data: Prisma.WorkerCreateManyInput | Prisma.WorkerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Worker createManyAndReturn
 */
export type WorkerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * The data used to create many Workers.
   */
  data: Prisma.WorkerCreateManyInput | Prisma.WorkerCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Worker update
 */
export type WorkerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerInclude<ExtArgs> | null
  /**
   * The data needed to update a Worker.
   */
  data: Prisma.XOR<Prisma.WorkerUpdateInput, Prisma.WorkerUncheckedUpdateInput>
  /**
   * Choose, which Worker to update.
   */
  where: Prisma.WorkerWhereUniqueInput
}

/**
 * Worker updateMany
 */
export type WorkerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Workers.
   */
  data: Prisma.XOR<Prisma.WorkerUpdateManyMutationInput, Prisma.WorkerUncheckedUpdateManyInput>
  /**
   * Filter which Workers to update
   */
  where?: Prisma.WorkerWhereInput
  /**
   * Limit how many Workers to update.
   */
  limit?: number
}

/**
 * Worker updateManyAndReturn
 */
export type WorkerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * The data used to update Workers.
   */
  data: Prisma.XOR<Prisma.WorkerUpdateManyMutationInput, Prisma.WorkerUncheckedUpdateManyInput>
  /**
   * Filter which Workers to update
   */
  where?: Prisma.WorkerWhereInput
  /**
   * Limit how many Workers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Worker upsert
 */
export type WorkerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerInclude<ExtArgs> | null
  /**
   * The filter to search for the Worker to update in case it exists.
   */
  where: Prisma.WorkerWhereUniqueInput
  /**
   * In case the Worker found by the `where` argument doesn't exist, create a new Worker with this data.
   */
  create: Prisma.XOR<Prisma.WorkerCreateInput, Prisma.WorkerUncheckedCreateInput>
  /**
   * In case the Worker was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkerUpdateInput, Prisma.WorkerUncheckedUpdateInput>
}

/**
 * Worker delete
 */
export type WorkerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerInclude<ExtArgs> | null
  /**
   * Filter which Worker to delete.
   */
  where: Prisma.WorkerWhereUniqueInput
}

/**
 * Worker deleteMany
 */
export type WorkerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Workers to delete
   */
  where?: Prisma.WorkerWhereInput
  /**
   * Limit how many Workers to delete.
   */
  limit?: number
}

/**
 * Worker.freelanceServices
 */
export type Worker$freelanceServicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceInclude<ExtArgs> | null
  where?: Prisma.FreelanceServiceWhereInput
  orderBy?: Prisma.FreelanceServiceOrderByWithRelationInput | Prisma.FreelanceServiceOrderByWithRelationInput[]
  cursor?: Prisma.FreelanceServiceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FreelanceServiceScalarFieldEnum | Prisma.FreelanceServiceScalarFieldEnum[]
}

/**
 * Worker.kyc
 */
export type Worker$kycArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCInclude<ExtArgs> | null
  where?: Prisma.KYCWhereInput
}

/**
 * Worker.chats
 */
export type Worker$chatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  where?: Prisma.ChatWhereInput
  orderBy?: Prisma.ChatOrderByWithRelationInput | Prisma.ChatOrderByWithRelationInput[]
  cursor?: Prisma.ChatWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChatScalarFieldEnum | Prisma.ChatScalarFieldEnum[]
}

/**
 * Worker without action
 */
export type WorkerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerInclude<ExtArgs> | null
}
