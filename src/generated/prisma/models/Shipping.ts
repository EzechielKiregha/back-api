
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Shipping` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Shipping
 * 
 */
export type ShippingModel = runtime.Types.Result.DefaultSelection<Prisma.$ShippingPayload>

export type AggregateShipping = {
  _count: ShippingCountAggregateOutputType | null
  _min: ShippingMinAggregateOutputType | null
  _max: ShippingMaxAggregateOutputType | null
}

export type ShippingMinAggregateOutputType = {
  id: string | null
  reOwnedProductId: string | null
  status: string | null
  trackingNumber: string | null
  carrier: string | null
  shippedAt: Date | null
  deliveredAt: Date | null
  createdAt: Date | null
}

export type ShippingMaxAggregateOutputType = {
  id: string | null
  reOwnedProductId: string | null
  status: string | null
  trackingNumber: string | null
  carrier: string | null
  shippedAt: Date | null
  deliveredAt: Date | null
  createdAt: Date | null
}

export type ShippingCountAggregateOutputType = {
  id: number
  reOwnedProductId: number
  status: number
  trackingNumber: number
  carrier: number
  shippedAt: number
  deliveredAt: number
  createdAt: number
  _all: number
}


export type ShippingMinAggregateInputType = {
  id?: true
  reOwnedProductId?: true
  status?: true
  trackingNumber?: true
  carrier?: true
  shippedAt?: true
  deliveredAt?: true
  createdAt?: true
}

export type ShippingMaxAggregateInputType = {
  id?: true
  reOwnedProductId?: true
  status?: true
  trackingNumber?: true
  carrier?: true
  shippedAt?: true
  deliveredAt?: true
  createdAt?: true
}

export type ShippingCountAggregateInputType = {
  id?: true
  reOwnedProductId?: true
  status?: true
  trackingNumber?: true
  carrier?: true
  shippedAt?: true
  deliveredAt?: true
  createdAt?: true
  _all?: true
}

export type ShippingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Shipping to aggregate.
   */
  where?: Prisma.ShippingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shippings to fetch.
   */
  orderBy?: Prisma.ShippingOrderByWithRelationInput | Prisma.ShippingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ShippingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shippings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shippings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Shippings
  **/
  _count?: true | ShippingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ShippingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ShippingMaxAggregateInputType
}

export type GetShippingAggregateType<T extends ShippingAggregateArgs> = {
      [P in keyof T & keyof AggregateShipping]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateShipping[P]>
    : Prisma.GetScalarType<T[P], AggregateShipping[P]>
}




export type ShippingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ShippingWhereInput
  orderBy?: Prisma.ShippingOrderByWithAggregationInput | Prisma.ShippingOrderByWithAggregationInput[]
  by: Prisma.ShippingScalarFieldEnum[] | Prisma.ShippingScalarFieldEnum
  having?: Prisma.ShippingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ShippingCountAggregateInputType | true
  _min?: ShippingMinAggregateInputType
  _max?: ShippingMaxAggregateInputType
}

export type ShippingGroupByOutputType = {
  id: string
  reOwnedProductId: string | null
  status: string
  trackingNumber: string | null
  carrier: string | null
  shippedAt: Date | null
  deliveredAt: Date | null
  createdAt: Date
  _count: ShippingCountAggregateOutputType | null
  _min: ShippingMinAggregateOutputType | null
  _max: ShippingMaxAggregateOutputType | null
}

type GetShippingGroupByPayload<T extends ShippingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ShippingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ShippingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ShippingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ShippingGroupByOutputType[P]>
      }
    >
  > 



export type ShippingWhereInput = {
  AND?: Prisma.ShippingWhereInput | Prisma.ShippingWhereInput[]
  OR?: Prisma.ShippingWhereInput[]
  NOT?: Prisma.ShippingWhereInput | Prisma.ShippingWhereInput[]
  id?: Prisma.StringFilter<"Shipping"> | string
  reOwnedProductId?: Prisma.StringNullableFilter<"Shipping"> | string | null
  status?: Prisma.StringFilter<"Shipping"> | string
  trackingNumber?: Prisma.StringNullableFilter<"Shipping"> | string | null
  carrier?: Prisma.StringNullableFilter<"Shipping"> | string | null
  shippedAt?: Prisma.DateTimeNullableFilter<"Shipping"> | Date | string | null
  deliveredAt?: Prisma.DateTimeNullableFilter<"Shipping"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Shipping"> | Date | string
  reOwnedProduct?: Prisma.XOR<Prisma.ReOwnedProductNullableScalarRelationFilter, Prisma.ReOwnedProductWhereInput> | null
}

export type ShippingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  reOwnedProductId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  trackingNumber?: Prisma.SortOrderInput | Prisma.SortOrder
  carrier?: Prisma.SortOrderInput | Prisma.SortOrder
  shippedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  deliveredAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  reOwnedProduct?: Prisma.ReOwnedProductOrderByWithRelationInput
}

export type ShippingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ShippingWhereInput | Prisma.ShippingWhereInput[]
  OR?: Prisma.ShippingWhereInput[]
  NOT?: Prisma.ShippingWhereInput | Prisma.ShippingWhereInput[]
  reOwnedProductId?: Prisma.StringNullableFilter<"Shipping"> | string | null
  status?: Prisma.StringFilter<"Shipping"> | string
  trackingNumber?: Prisma.StringNullableFilter<"Shipping"> | string | null
  carrier?: Prisma.StringNullableFilter<"Shipping"> | string | null
  shippedAt?: Prisma.DateTimeNullableFilter<"Shipping"> | Date | string | null
  deliveredAt?: Prisma.DateTimeNullableFilter<"Shipping"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Shipping"> | Date | string
  reOwnedProduct?: Prisma.XOR<Prisma.ReOwnedProductNullableScalarRelationFilter, Prisma.ReOwnedProductWhereInput> | null
}, "id">

export type ShippingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  reOwnedProductId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  trackingNumber?: Prisma.SortOrderInput | Prisma.SortOrder
  carrier?: Prisma.SortOrderInput | Prisma.SortOrder
  shippedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  deliveredAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ShippingCountOrderByAggregateInput
  _max?: Prisma.ShippingMaxOrderByAggregateInput
  _min?: Prisma.ShippingMinOrderByAggregateInput
}

export type ShippingScalarWhereWithAggregatesInput = {
  AND?: Prisma.ShippingScalarWhereWithAggregatesInput | Prisma.ShippingScalarWhereWithAggregatesInput[]
  OR?: Prisma.ShippingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ShippingScalarWhereWithAggregatesInput | Prisma.ShippingScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Shipping"> | string
  reOwnedProductId?: Prisma.StringNullableWithAggregatesFilter<"Shipping"> | string | null
  status?: Prisma.StringWithAggregatesFilter<"Shipping"> | string
  trackingNumber?: Prisma.StringNullableWithAggregatesFilter<"Shipping"> | string | null
  carrier?: Prisma.StringNullableWithAggregatesFilter<"Shipping"> | string | null
  shippedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Shipping"> | Date | string | null
  deliveredAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Shipping"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Shipping"> | Date | string
}

export type ShippingCreateInput = {
  id?: string
  reOwnedProductId?: string | null
  status?: string
  trackingNumber?: string | null
  carrier?: string | null
  shippedAt?: Date | string | null
  deliveredAt?: Date | string | null
  createdAt?: Date | string
  reOwnedProduct?: Prisma.ReOwnedProductCreateNestedOneWithoutShippingInput
}

export type ShippingUncheckedCreateInput = {
  id?: string
  reOwnedProductId?: string | null
  status?: string
  trackingNumber?: string | null
  carrier?: string | null
  shippedAt?: Date | string | null
  deliveredAt?: Date | string | null
  createdAt?: Date | string
  reOwnedProduct?: Prisma.ReOwnedProductUncheckedCreateNestedOneWithoutShippingInput
}

export type ShippingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reOwnedProductId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  trackingNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  carrier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shippedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reOwnedProduct?: Prisma.ReOwnedProductUpdateOneWithoutShippingNestedInput
}

export type ShippingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reOwnedProductId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  trackingNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  carrier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shippedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reOwnedProduct?: Prisma.ReOwnedProductUncheckedUpdateOneWithoutShippingNestedInput
}

export type ShippingCreateManyInput = {
  id?: string
  reOwnedProductId?: string | null
  status?: string
  trackingNumber?: string | null
  carrier?: string | null
  shippedAt?: Date | string | null
  deliveredAt?: Date | string | null
  createdAt?: Date | string
}

export type ShippingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reOwnedProductId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  trackingNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  carrier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shippedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShippingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reOwnedProductId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  trackingNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  carrier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shippedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShippingNullableScalarRelationFilter = {
  is?: Prisma.ShippingWhereInput | null
  isNot?: Prisma.ShippingWhereInput | null
}

export type ShippingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  reOwnedProductId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  trackingNumber?: Prisma.SortOrder
  carrier?: Prisma.SortOrder
  shippedAt?: Prisma.SortOrder
  deliveredAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ShippingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  reOwnedProductId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  trackingNumber?: Prisma.SortOrder
  carrier?: Prisma.SortOrder
  shippedAt?: Prisma.SortOrder
  deliveredAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ShippingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  reOwnedProductId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  trackingNumber?: Prisma.SortOrder
  carrier?: Prisma.SortOrder
  shippedAt?: Prisma.SortOrder
  deliveredAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ShippingCreateNestedOneWithoutReOwnedProductInput = {
  create?: Prisma.XOR<Prisma.ShippingCreateWithoutReOwnedProductInput, Prisma.ShippingUncheckedCreateWithoutReOwnedProductInput>
  connectOrCreate?: Prisma.ShippingCreateOrConnectWithoutReOwnedProductInput
  connect?: Prisma.ShippingWhereUniqueInput
}

export type ShippingUpdateOneWithoutReOwnedProductNestedInput = {
  create?: Prisma.XOR<Prisma.ShippingCreateWithoutReOwnedProductInput, Prisma.ShippingUncheckedCreateWithoutReOwnedProductInput>
  connectOrCreate?: Prisma.ShippingCreateOrConnectWithoutReOwnedProductInput
  upsert?: Prisma.ShippingUpsertWithoutReOwnedProductInput
  disconnect?: Prisma.ShippingWhereInput | boolean
  delete?: Prisma.ShippingWhereInput | boolean
  connect?: Prisma.ShippingWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ShippingUpdateToOneWithWhereWithoutReOwnedProductInput, Prisma.ShippingUpdateWithoutReOwnedProductInput>, Prisma.ShippingUncheckedUpdateWithoutReOwnedProductInput>
}

export type ShippingCreateWithoutReOwnedProductInput = {
  id?: string
  reOwnedProductId?: string | null
  status?: string
  trackingNumber?: string | null
  carrier?: string | null
  shippedAt?: Date | string | null
  deliveredAt?: Date | string | null
  createdAt?: Date | string
}

export type ShippingUncheckedCreateWithoutReOwnedProductInput = {
  id?: string
  reOwnedProductId?: string | null
  status?: string
  trackingNumber?: string | null
  carrier?: string | null
  shippedAt?: Date | string | null
  deliveredAt?: Date | string | null
  createdAt?: Date | string
}

export type ShippingCreateOrConnectWithoutReOwnedProductInput = {
  where: Prisma.ShippingWhereUniqueInput
  create: Prisma.XOR<Prisma.ShippingCreateWithoutReOwnedProductInput, Prisma.ShippingUncheckedCreateWithoutReOwnedProductInput>
}

export type ShippingUpsertWithoutReOwnedProductInput = {
  update: Prisma.XOR<Prisma.ShippingUpdateWithoutReOwnedProductInput, Prisma.ShippingUncheckedUpdateWithoutReOwnedProductInput>
  create: Prisma.XOR<Prisma.ShippingCreateWithoutReOwnedProductInput, Prisma.ShippingUncheckedCreateWithoutReOwnedProductInput>
  where?: Prisma.ShippingWhereInput
}

export type ShippingUpdateToOneWithWhereWithoutReOwnedProductInput = {
  where?: Prisma.ShippingWhereInput
  data: Prisma.XOR<Prisma.ShippingUpdateWithoutReOwnedProductInput, Prisma.ShippingUncheckedUpdateWithoutReOwnedProductInput>
}

export type ShippingUpdateWithoutReOwnedProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reOwnedProductId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  trackingNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  carrier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shippedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShippingUncheckedUpdateWithoutReOwnedProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reOwnedProductId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  trackingNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  carrier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  shippedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ShippingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  reOwnedProductId?: boolean
  status?: boolean
  trackingNumber?: boolean
  carrier?: boolean
  shippedAt?: boolean
  deliveredAt?: boolean
  createdAt?: boolean
  reOwnedProduct?: boolean | Prisma.Shipping$reOwnedProductArgs<ExtArgs>
}, ExtArgs["result"]["shipping"]>

export type ShippingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  reOwnedProductId?: boolean
  status?: boolean
  trackingNumber?: boolean
  carrier?: boolean
  shippedAt?: boolean
  deliveredAt?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["shipping"]>

export type ShippingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  reOwnedProductId?: boolean
  status?: boolean
  trackingNumber?: boolean
  carrier?: boolean
  shippedAt?: boolean
  deliveredAt?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["shipping"]>

export type ShippingSelectScalar = {
  id?: boolean
  reOwnedProductId?: boolean
  status?: boolean
  trackingNumber?: boolean
  carrier?: boolean
  shippedAt?: boolean
  deliveredAt?: boolean
  createdAt?: boolean
}

export type ShippingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "reOwnedProductId" | "status" | "trackingNumber" | "carrier" | "shippedAt" | "deliveredAt" | "createdAt", ExtArgs["result"]["shipping"]>
export type ShippingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  reOwnedProduct?: boolean | Prisma.Shipping$reOwnedProductArgs<ExtArgs>
}
export type ShippingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ShippingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ShippingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Shipping"
  objects: {
    reOwnedProduct: Prisma.$ReOwnedProductPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    reOwnedProductId: string | null
    status: string
    trackingNumber: string | null
    carrier: string | null
    shippedAt: Date | null
    deliveredAt: Date | null
    createdAt: Date
  }, ExtArgs["result"]["shipping"]>
  composites: {}
}

export type ShippingGetPayload<S extends boolean | null | undefined | ShippingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ShippingPayload, S>

export type ShippingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ShippingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ShippingCountAggregateInputType | true
  }

export interface ShippingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shipping'], meta: { name: 'Shipping' } }
  /**
   * Find zero or one Shipping that matches the filter.
   * @param {ShippingFindUniqueArgs} args - Arguments to find a Shipping
   * @example
   * // Get one Shipping
   * const shipping = await prisma.shipping.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ShippingFindUniqueArgs>(args: Prisma.SelectSubset<T, ShippingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ShippingClient<runtime.Types.Result.GetResult<Prisma.$ShippingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Shipping that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ShippingFindUniqueOrThrowArgs} args - Arguments to find a Shipping
   * @example
   * // Get one Shipping
   * const shipping = await prisma.shipping.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ShippingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ShippingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShippingClient<runtime.Types.Result.GetResult<Prisma.$ShippingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Shipping that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingFindFirstArgs} args - Arguments to find a Shipping
   * @example
   * // Get one Shipping
   * const shipping = await prisma.shipping.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ShippingFindFirstArgs>(args?: Prisma.SelectSubset<T, ShippingFindFirstArgs<ExtArgs>>): Prisma.Prisma__ShippingClient<runtime.Types.Result.GetResult<Prisma.$ShippingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Shipping that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingFindFirstOrThrowArgs} args - Arguments to find a Shipping
   * @example
   * // Get one Shipping
   * const shipping = await prisma.shipping.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ShippingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ShippingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShippingClient<runtime.Types.Result.GetResult<Prisma.$ShippingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Shippings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Shippings
   * const shippings = await prisma.shipping.findMany()
   * 
   * // Get first 10 Shippings
   * const shippings = await prisma.shipping.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const shippingWithIdOnly = await prisma.shipping.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ShippingFindManyArgs>(args?: Prisma.SelectSubset<T, ShippingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShippingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Shipping.
   * @param {ShippingCreateArgs} args - Arguments to create a Shipping.
   * @example
   * // Create one Shipping
   * const Shipping = await prisma.shipping.create({
   *   data: {
   *     // ... data to create a Shipping
   *   }
   * })
   * 
   */
  create<T extends ShippingCreateArgs>(args: Prisma.SelectSubset<T, ShippingCreateArgs<ExtArgs>>): Prisma.Prisma__ShippingClient<runtime.Types.Result.GetResult<Prisma.$ShippingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Shippings.
   * @param {ShippingCreateManyArgs} args - Arguments to create many Shippings.
   * @example
   * // Create many Shippings
   * const shipping = await prisma.shipping.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ShippingCreateManyArgs>(args?: Prisma.SelectSubset<T, ShippingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Shippings and returns the data saved in the database.
   * @param {ShippingCreateManyAndReturnArgs} args - Arguments to create many Shippings.
   * @example
   * // Create many Shippings
   * const shipping = await prisma.shipping.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Shippings and only return the `id`
   * const shippingWithIdOnly = await prisma.shipping.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ShippingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ShippingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShippingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Shipping.
   * @param {ShippingDeleteArgs} args - Arguments to delete one Shipping.
   * @example
   * // Delete one Shipping
   * const Shipping = await prisma.shipping.delete({
   *   where: {
   *     // ... filter to delete one Shipping
   *   }
   * })
   * 
   */
  delete<T extends ShippingDeleteArgs>(args: Prisma.SelectSubset<T, ShippingDeleteArgs<ExtArgs>>): Prisma.Prisma__ShippingClient<runtime.Types.Result.GetResult<Prisma.$ShippingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Shipping.
   * @param {ShippingUpdateArgs} args - Arguments to update one Shipping.
   * @example
   * // Update one Shipping
   * const shipping = await prisma.shipping.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ShippingUpdateArgs>(args: Prisma.SelectSubset<T, ShippingUpdateArgs<ExtArgs>>): Prisma.Prisma__ShippingClient<runtime.Types.Result.GetResult<Prisma.$ShippingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Shippings.
   * @param {ShippingDeleteManyArgs} args - Arguments to filter Shippings to delete.
   * @example
   * // Delete a few Shippings
   * const { count } = await prisma.shipping.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ShippingDeleteManyArgs>(args?: Prisma.SelectSubset<T, ShippingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Shippings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Shippings
   * const shipping = await prisma.shipping.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ShippingUpdateManyArgs>(args: Prisma.SelectSubset<T, ShippingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Shippings and returns the data updated in the database.
   * @param {ShippingUpdateManyAndReturnArgs} args - Arguments to update many Shippings.
   * @example
   * // Update many Shippings
   * const shipping = await prisma.shipping.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Shippings and only return the `id`
   * const shippingWithIdOnly = await prisma.shipping.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ShippingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ShippingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShippingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Shipping.
   * @param {ShippingUpsertArgs} args - Arguments to update or create a Shipping.
   * @example
   * // Update or create a Shipping
   * const shipping = await prisma.shipping.upsert({
   *   create: {
   *     // ... data to create a Shipping
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Shipping we want to update
   *   }
   * })
   */
  upsert<T extends ShippingUpsertArgs>(args: Prisma.SelectSubset<T, ShippingUpsertArgs<ExtArgs>>): Prisma.Prisma__ShippingClient<runtime.Types.Result.GetResult<Prisma.$ShippingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Shippings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingCountArgs} args - Arguments to filter Shippings to count.
   * @example
   * // Count the number of Shippings
   * const count = await prisma.shipping.count({
   *   where: {
   *     // ... the filter for the Shippings we want to count
   *   }
   * })
  **/
  count<T extends ShippingCountArgs>(
    args?: Prisma.Subset<T, ShippingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ShippingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Shipping.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ShippingAggregateArgs>(args: Prisma.Subset<T, ShippingAggregateArgs>): Prisma.PrismaPromise<GetShippingAggregateType<T>>

  /**
   * Group by Shipping.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ShippingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ShippingGroupByArgs['orderBy'] }
      : { orderBy?: ShippingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ShippingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShippingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Shipping model
 */
readonly fields: ShippingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Shipping.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ShippingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  reOwnedProduct<T extends Prisma.Shipping$reOwnedProductArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Shipping$reOwnedProductArgs<ExtArgs>>): Prisma.Prisma__ReOwnedProductClient<runtime.Types.Result.GetResult<Prisma.$ReOwnedProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Shipping model
 */
export interface ShippingFieldRefs {
  readonly id: Prisma.FieldRef<"Shipping", 'String'>
  readonly reOwnedProductId: Prisma.FieldRef<"Shipping", 'String'>
  readonly status: Prisma.FieldRef<"Shipping", 'String'>
  readonly trackingNumber: Prisma.FieldRef<"Shipping", 'String'>
  readonly carrier: Prisma.FieldRef<"Shipping", 'String'>
  readonly shippedAt: Prisma.FieldRef<"Shipping", 'DateTime'>
  readonly deliveredAt: Prisma.FieldRef<"Shipping", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Shipping", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Shipping findUnique
 */
export type ShippingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipping
   */
  select?: Prisma.ShippingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shipping
   */
  omit?: Prisma.ShippingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingInclude<ExtArgs> | null
  /**
   * Filter, which Shipping to fetch.
   */
  where: Prisma.ShippingWhereUniqueInput
}

/**
 * Shipping findUniqueOrThrow
 */
export type ShippingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipping
   */
  select?: Prisma.ShippingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shipping
   */
  omit?: Prisma.ShippingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingInclude<ExtArgs> | null
  /**
   * Filter, which Shipping to fetch.
   */
  where: Prisma.ShippingWhereUniqueInput
}

/**
 * Shipping findFirst
 */
export type ShippingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipping
   */
  select?: Prisma.ShippingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shipping
   */
  omit?: Prisma.ShippingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingInclude<ExtArgs> | null
  /**
   * Filter, which Shipping to fetch.
   */
  where?: Prisma.ShippingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shippings to fetch.
   */
  orderBy?: Prisma.ShippingOrderByWithRelationInput | Prisma.ShippingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Shippings.
   */
  cursor?: Prisma.ShippingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shippings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shippings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Shippings.
   */
  distinct?: Prisma.ShippingScalarFieldEnum | Prisma.ShippingScalarFieldEnum[]
}

/**
 * Shipping findFirstOrThrow
 */
export type ShippingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipping
   */
  select?: Prisma.ShippingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shipping
   */
  omit?: Prisma.ShippingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingInclude<ExtArgs> | null
  /**
   * Filter, which Shipping to fetch.
   */
  where?: Prisma.ShippingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shippings to fetch.
   */
  orderBy?: Prisma.ShippingOrderByWithRelationInput | Prisma.ShippingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Shippings.
   */
  cursor?: Prisma.ShippingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shippings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shippings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Shippings.
   */
  distinct?: Prisma.ShippingScalarFieldEnum | Prisma.ShippingScalarFieldEnum[]
}

/**
 * Shipping findMany
 */
export type ShippingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipping
   */
  select?: Prisma.ShippingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shipping
   */
  omit?: Prisma.ShippingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingInclude<ExtArgs> | null
  /**
   * Filter, which Shippings to fetch.
   */
  where?: Prisma.ShippingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shippings to fetch.
   */
  orderBy?: Prisma.ShippingOrderByWithRelationInput | Prisma.ShippingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Shippings.
   */
  cursor?: Prisma.ShippingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shippings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shippings.
   */
  skip?: number
  distinct?: Prisma.ShippingScalarFieldEnum | Prisma.ShippingScalarFieldEnum[]
}

/**
 * Shipping create
 */
export type ShippingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipping
   */
  select?: Prisma.ShippingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shipping
   */
  omit?: Prisma.ShippingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingInclude<ExtArgs> | null
  /**
   * The data needed to create a Shipping.
   */
  data?: Prisma.XOR<Prisma.ShippingCreateInput, Prisma.ShippingUncheckedCreateInput>
}

/**
 * Shipping createMany
 */
export type ShippingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Shippings.
   */
  data: Prisma.ShippingCreateManyInput | Prisma.ShippingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Shipping createManyAndReturn
 */
export type ShippingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipping
   */
  select?: Prisma.ShippingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Shipping
   */
  omit?: Prisma.ShippingOmit<ExtArgs> | null
  /**
   * The data used to create many Shippings.
   */
  data: Prisma.ShippingCreateManyInput | Prisma.ShippingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Shipping update
 */
export type ShippingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipping
   */
  select?: Prisma.ShippingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shipping
   */
  omit?: Prisma.ShippingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingInclude<ExtArgs> | null
  /**
   * The data needed to update a Shipping.
   */
  data: Prisma.XOR<Prisma.ShippingUpdateInput, Prisma.ShippingUncheckedUpdateInput>
  /**
   * Choose, which Shipping to update.
   */
  where: Prisma.ShippingWhereUniqueInput
}

/**
 * Shipping updateMany
 */
export type ShippingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Shippings.
   */
  data: Prisma.XOR<Prisma.ShippingUpdateManyMutationInput, Prisma.ShippingUncheckedUpdateManyInput>
  /**
   * Filter which Shippings to update
   */
  where?: Prisma.ShippingWhereInput
  /**
   * Limit how many Shippings to update.
   */
  limit?: number
}

/**
 * Shipping updateManyAndReturn
 */
export type ShippingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipping
   */
  select?: Prisma.ShippingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Shipping
   */
  omit?: Prisma.ShippingOmit<ExtArgs> | null
  /**
   * The data used to update Shippings.
   */
  data: Prisma.XOR<Prisma.ShippingUpdateManyMutationInput, Prisma.ShippingUncheckedUpdateManyInput>
  /**
   * Filter which Shippings to update
   */
  where?: Prisma.ShippingWhereInput
  /**
   * Limit how many Shippings to update.
   */
  limit?: number
}

/**
 * Shipping upsert
 */
export type ShippingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipping
   */
  select?: Prisma.ShippingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shipping
   */
  omit?: Prisma.ShippingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingInclude<ExtArgs> | null
  /**
   * The filter to search for the Shipping to update in case it exists.
   */
  where: Prisma.ShippingWhereUniqueInput
  /**
   * In case the Shipping found by the `where` argument doesn't exist, create a new Shipping with this data.
   */
  create: Prisma.XOR<Prisma.ShippingCreateInput, Prisma.ShippingUncheckedCreateInput>
  /**
   * In case the Shipping was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ShippingUpdateInput, Prisma.ShippingUncheckedUpdateInput>
}

/**
 * Shipping delete
 */
export type ShippingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipping
   */
  select?: Prisma.ShippingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shipping
   */
  omit?: Prisma.ShippingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingInclude<ExtArgs> | null
  /**
   * Filter which Shipping to delete.
   */
  where: Prisma.ShippingWhereUniqueInput
}

/**
 * Shipping deleteMany
 */
export type ShippingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Shippings to delete
   */
  where?: Prisma.ShippingWhereInput
  /**
   * Limit how many Shippings to delete.
   */
  limit?: number
}

/**
 * Shipping.reOwnedProduct
 */
export type Shipping$reOwnedProductArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReOwnedProduct
   */
  select?: Prisma.ReOwnedProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReOwnedProduct
   */
  omit?: Prisma.ReOwnedProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReOwnedProductInclude<ExtArgs> | null
  where?: Prisma.ReOwnedProductWhereInput
}

/**
 * Shipping without action
 */
export type ShippingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipping
   */
  select?: Prisma.ShippingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shipping
   */
  omit?: Prisma.ShippingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingInclude<ExtArgs> | null
}
