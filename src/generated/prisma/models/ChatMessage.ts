
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ChatMessage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ChatMessage
 * 
 */
export type ChatMessageModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatMessagePayload>

export type AggregateChatMessage = {
  _count: ChatMessageCountAggregateOutputType | null
  _min: ChatMessageMinAggregateOutputType | null
  _max: ChatMessageMaxAggregateOutputType | null
}

export type ChatMessageMinAggregateOutputType = {
  id: string | null
  chatId: string | null
  message: string | null
  senderId: string | null
  createdAt: Date | null
}

export type ChatMessageMaxAggregateOutputType = {
  id: string | null
  chatId: string | null
  message: string | null
  senderId: string | null
  createdAt: Date | null
}

export type ChatMessageCountAggregateOutputType = {
  id: number
  chatId: number
  message: number
  senderId: number
  createdAt: number
  _all: number
}


export type ChatMessageMinAggregateInputType = {
  id?: true
  chatId?: true
  message?: true
  senderId?: true
  createdAt?: true
}

export type ChatMessageMaxAggregateInputType = {
  id?: true
  chatId?: true
  message?: true
  senderId?: true
  createdAt?: true
}

export type ChatMessageCountAggregateInputType = {
  id?: true
  chatId?: true
  message?: true
  senderId?: true
  createdAt?: true
  _all?: true
}

export type ChatMessageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatMessage to aggregate.
   */
  where?: Prisma.ChatMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatMessages to fetch.
   */
  orderBy?: Prisma.ChatMessageOrderByWithRelationInput | Prisma.ChatMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChatMessages
  **/
  _count?: true | ChatMessageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatMessageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatMessageMaxAggregateInputType
}

export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
      [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChatMessage[P]>
    : Prisma.GetScalarType<T[P], AggregateChatMessage[P]>
}




export type ChatMessageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatMessageWhereInput
  orderBy?: Prisma.ChatMessageOrderByWithAggregationInput | Prisma.ChatMessageOrderByWithAggregationInput[]
  by: Prisma.ChatMessageScalarFieldEnum[] | Prisma.ChatMessageScalarFieldEnum
  having?: Prisma.ChatMessageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatMessageCountAggregateInputType | true
  _min?: ChatMessageMinAggregateInputType
  _max?: ChatMessageMaxAggregateInputType
}

export type ChatMessageGroupByOutputType = {
  id: string
  chatId: string
  message: string
  senderId: string | null
  createdAt: Date
  _count: ChatMessageCountAggregateOutputType | null
  _min: ChatMessageMinAggregateOutputType | null
  _max: ChatMessageMaxAggregateOutputType | null
}

type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
      }
    >
  > 



export type ChatMessageWhereInput = {
  AND?: Prisma.ChatMessageWhereInput | Prisma.ChatMessageWhereInput[]
  OR?: Prisma.ChatMessageWhereInput[]
  NOT?: Prisma.ChatMessageWhereInput | Prisma.ChatMessageWhereInput[]
  id?: Prisma.StringFilter<"ChatMessage"> | string
  chatId?: Prisma.StringFilter<"ChatMessage"> | string
  message?: Prisma.StringFilter<"ChatMessage"> | string
  senderId?: Prisma.StringNullableFilter<"ChatMessage"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatMessage"> | Date | string
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
}

export type ChatMessageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  message?: Prisma.SortOrder
  senderId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  chat?: Prisma.ChatOrderByWithRelationInput
}

export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ChatMessageWhereInput | Prisma.ChatMessageWhereInput[]
  OR?: Prisma.ChatMessageWhereInput[]
  NOT?: Prisma.ChatMessageWhereInput | Prisma.ChatMessageWhereInput[]
  chatId?: Prisma.StringFilter<"ChatMessage"> | string
  message?: Prisma.StringFilter<"ChatMessage"> | string
  senderId?: Prisma.StringNullableFilter<"ChatMessage"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatMessage"> | Date | string
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
}, "id">

export type ChatMessageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  message?: Prisma.SortOrder
  senderId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ChatMessageCountOrderByAggregateInput
  _max?: Prisma.ChatMessageMaxOrderByAggregateInput
  _min?: Prisma.ChatMessageMinOrderByAggregateInput
}

export type ChatMessageScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatMessageScalarWhereWithAggregatesInput | Prisma.ChatMessageScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatMessageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatMessageScalarWhereWithAggregatesInput | Prisma.ChatMessageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ChatMessage"> | string
  chatId?: Prisma.StringWithAggregatesFilter<"ChatMessage"> | string
  message?: Prisma.StringWithAggregatesFilter<"ChatMessage"> | string
  senderId?: Prisma.StringNullableWithAggregatesFilter<"ChatMessage"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
}

export type ChatMessageCreateInput = {
  id?: string
  message: string
  senderId?: string | null
  createdAt?: Date | string
  chat: Prisma.ChatCreateNestedOneWithoutMessagesInput
}

export type ChatMessageUncheckedCreateInput = {
  id?: string
  chatId: string
  message: string
  senderId?: string | null
  createdAt?: Date | string
}

export type ChatMessageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chat?: Prisma.ChatUpdateOneRequiredWithoutMessagesNestedInput
}

export type ChatMessageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatMessageCreateManyInput = {
  id?: string
  chatId: string
  message: string
  senderId?: string | null
  createdAt?: Date | string
}

export type ChatMessageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatMessageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatMessageListRelationFilter = {
  every?: Prisma.ChatMessageWhereInput
  some?: Prisma.ChatMessageWhereInput
  none?: Prisma.ChatMessageWhereInput
}

export type ChatMessageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChatMessageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  message?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ChatMessageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  message?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ChatMessageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  message?: Prisma.SortOrder
  senderId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ChatMessageCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.ChatMessageCreateWithoutChatInput, Prisma.ChatMessageUncheckedCreateWithoutChatInput> | Prisma.ChatMessageCreateWithoutChatInput[] | Prisma.ChatMessageUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.ChatMessageCreateOrConnectWithoutChatInput | Prisma.ChatMessageCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.ChatMessageCreateManyChatInputEnvelope
  connect?: Prisma.ChatMessageWhereUniqueInput | Prisma.ChatMessageWhereUniqueInput[]
}

export type ChatMessageUncheckedCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.ChatMessageCreateWithoutChatInput, Prisma.ChatMessageUncheckedCreateWithoutChatInput> | Prisma.ChatMessageCreateWithoutChatInput[] | Prisma.ChatMessageUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.ChatMessageCreateOrConnectWithoutChatInput | Prisma.ChatMessageCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.ChatMessageCreateManyChatInputEnvelope
  connect?: Prisma.ChatMessageWhereUniqueInput | Prisma.ChatMessageWhereUniqueInput[]
}

export type ChatMessageUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.ChatMessageCreateWithoutChatInput, Prisma.ChatMessageUncheckedCreateWithoutChatInput> | Prisma.ChatMessageCreateWithoutChatInput[] | Prisma.ChatMessageUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.ChatMessageCreateOrConnectWithoutChatInput | Prisma.ChatMessageCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.ChatMessageUpsertWithWhereUniqueWithoutChatInput | Prisma.ChatMessageUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.ChatMessageCreateManyChatInputEnvelope
  set?: Prisma.ChatMessageWhereUniqueInput | Prisma.ChatMessageWhereUniqueInput[]
  disconnect?: Prisma.ChatMessageWhereUniqueInput | Prisma.ChatMessageWhereUniqueInput[]
  delete?: Prisma.ChatMessageWhereUniqueInput | Prisma.ChatMessageWhereUniqueInput[]
  connect?: Prisma.ChatMessageWhereUniqueInput | Prisma.ChatMessageWhereUniqueInput[]
  update?: Prisma.ChatMessageUpdateWithWhereUniqueWithoutChatInput | Prisma.ChatMessageUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.ChatMessageUpdateManyWithWhereWithoutChatInput | Prisma.ChatMessageUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.ChatMessageScalarWhereInput | Prisma.ChatMessageScalarWhereInput[]
}

export type ChatMessageUncheckedUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.ChatMessageCreateWithoutChatInput, Prisma.ChatMessageUncheckedCreateWithoutChatInput> | Prisma.ChatMessageCreateWithoutChatInput[] | Prisma.ChatMessageUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.ChatMessageCreateOrConnectWithoutChatInput | Prisma.ChatMessageCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.ChatMessageUpsertWithWhereUniqueWithoutChatInput | Prisma.ChatMessageUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.ChatMessageCreateManyChatInputEnvelope
  set?: Prisma.ChatMessageWhereUniqueInput | Prisma.ChatMessageWhereUniqueInput[]
  disconnect?: Prisma.ChatMessageWhereUniqueInput | Prisma.ChatMessageWhereUniqueInput[]
  delete?: Prisma.ChatMessageWhereUniqueInput | Prisma.ChatMessageWhereUniqueInput[]
  connect?: Prisma.ChatMessageWhereUniqueInput | Prisma.ChatMessageWhereUniqueInput[]
  update?: Prisma.ChatMessageUpdateWithWhereUniqueWithoutChatInput | Prisma.ChatMessageUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.ChatMessageUpdateManyWithWhereWithoutChatInput | Prisma.ChatMessageUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.ChatMessageScalarWhereInput | Prisma.ChatMessageScalarWhereInput[]
}

export type ChatMessageCreateWithoutChatInput = {
  id?: string
  message: string
  senderId?: string | null
  createdAt?: Date | string
}

export type ChatMessageUncheckedCreateWithoutChatInput = {
  id?: string
  message: string
  senderId?: string | null
  createdAt?: Date | string
}

export type ChatMessageCreateOrConnectWithoutChatInput = {
  where: Prisma.ChatMessageWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatMessageCreateWithoutChatInput, Prisma.ChatMessageUncheckedCreateWithoutChatInput>
}

export type ChatMessageCreateManyChatInputEnvelope = {
  data: Prisma.ChatMessageCreateManyChatInput | Prisma.ChatMessageCreateManyChatInput[]
  skipDuplicates?: boolean
}

export type ChatMessageUpsertWithWhereUniqueWithoutChatInput = {
  where: Prisma.ChatMessageWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatMessageUpdateWithoutChatInput, Prisma.ChatMessageUncheckedUpdateWithoutChatInput>
  create: Prisma.XOR<Prisma.ChatMessageCreateWithoutChatInput, Prisma.ChatMessageUncheckedCreateWithoutChatInput>
}

export type ChatMessageUpdateWithWhereUniqueWithoutChatInput = {
  where: Prisma.ChatMessageWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatMessageUpdateWithoutChatInput, Prisma.ChatMessageUncheckedUpdateWithoutChatInput>
}

export type ChatMessageUpdateManyWithWhereWithoutChatInput = {
  where: Prisma.ChatMessageScalarWhereInput
  data: Prisma.XOR<Prisma.ChatMessageUpdateManyMutationInput, Prisma.ChatMessageUncheckedUpdateManyWithoutChatInput>
}

export type ChatMessageScalarWhereInput = {
  AND?: Prisma.ChatMessageScalarWhereInput | Prisma.ChatMessageScalarWhereInput[]
  OR?: Prisma.ChatMessageScalarWhereInput[]
  NOT?: Prisma.ChatMessageScalarWhereInput | Prisma.ChatMessageScalarWhereInput[]
  id?: Prisma.StringFilter<"ChatMessage"> | string
  chatId?: Prisma.StringFilter<"ChatMessage"> | string
  message?: Prisma.StringFilter<"ChatMessage"> | string
  senderId?: Prisma.StringNullableFilter<"ChatMessage"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatMessage"> | Date | string
}

export type ChatMessageCreateManyChatInput = {
  id?: string
  message: string
  senderId?: string | null
  createdAt?: Date | string
}

export type ChatMessageUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatMessageUncheckedUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatMessageUncheckedUpdateManyWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  senderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ChatMessageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  message?: boolean
  senderId?: boolean
  createdAt?: boolean
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatMessage"]>

export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  message?: boolean
  senderId?: boolean
  createdAt?: boolean
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatMessage"]>

export type ChatMessageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  message?: boolean
  senderId?: boolean
  createdAt?: boolean
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatMessage"]>

export type ChatMessageSelectScalar = {
  id?: boolean
  chatId?: boolean
  message?: boolean
  senderId?: boolean
  createdAt?: boolean
}

export type ChatMessageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "chatId" | "message" | "senderId" | "createdAt", ExtArgs["result"]["chatMessage"]>
export type ChatMessageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}
export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}
export type ChatMessageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}

export type $ChatMessagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChatMessage"
  objects: {
    chat: Prisma.$ChatPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    chatId: string
    message: string
    senderId: string | null
    createdAt: Date
  }, ExtArgs["result"]["chatMessage"]>
  composites: {}
}

export type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload, S>

export type ChatMessageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatMessageCountAggregateInputType | true
  }

export interface ChatMessageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
  /**
   * Find zero or one ChatMessage that matches the filter.
   * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
   * @example
   * // Get one ChatMessage
   * const chatMessage = await prisma.chatMessage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatMessageFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatMessageClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
   * @example
   * // Get one ChatMessage
   * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatMessageClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatMessage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
   * @example
   * // Get one ChatMessage
   * const chatMessage = await prisma.chatMessage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatMessageFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatMessageClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatMessage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
   * @example
   * // Get one ChatMessage
   * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatMessageClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChatMessages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChatMessages
   * const chatMessages = await prisma.chatMessage.findMany()
   * 
   * // Get first 10 ChatMessages
   * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatMessageFindManyArgs>(args?: Prisma.SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChatMessage.
   * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
   * @example
   * // Create one ChatMessage
   * const ChatMessage = await prisma.chatMessage.create({
   *   data: {
   *     // ... data to create a ChatMessage
   *   }
   * })
   * 
   */
  create<T extends ChatMessageCreateArgs>(args: Prisma.SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma.Prisma__ChatMessageClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChatMessages.
   * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
   * @example
   * // Create many ChatMessages
   * const chatMessage = await prisma.chatMessage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChatMessageCreateManyArgs>(args?: Prisma.SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ChatMessages and returns the data saved in the database.
   * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
   * @example
   * // Create many ChatMessages
   * const chatMessage = await prisma.chatMessage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ChatMessages and only return the `id`
   * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ChatMessage.
   * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
   * @example
   * // Delete one ChatMessage
   * const ChatMessage = await prisma.chatMessage.delete({
   *   where: {
   *     // ... filter to delete one ChatMessage
   *   }
   * })
   * 
   */
  delete<T extends ChatMessageDeleteArgs>(args: Prisma.SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatMessageClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChatMessage.
   * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
   * @example
   * // Update one ChatMessage
   * const chatMessage = await prisma.chatMessage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatMessageUpdateArgs>(args: Prisma.SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatMessageClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChatMessages.
   * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
   * @example
   * // Delete a few ChatMessages
   * const { count } = await prisma.chatMessage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatMessageDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChatMessages
   * const chatMessage = await prisma.chatMessage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatMessageUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatMessages and returns the data updated in the database.
   * @param {ChatMessageUpdateManyAndReturnArgs} args - Arguments to update many ChatMessages.
   * @example
   * // Update many ChatMessages
   * const chatMessage = await prisma.chatMessage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ChatMessages and only return the `id`
   * const chatMessageWithIdOnly = await prisma.chatMessage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChatMessageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ChatMessage.
   * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
   * @example
   * // Update or create a ChatMessage
   * const chatMessage = await prisma.chatMessage.upsert({
   *   create: {
   *     // ... data to create a ChatMessage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChatMessage we want to update
   *   }
   * })
   */
  upsert<T extends ChatMessageUpsertArgs>(args: Prisma.SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma.Prisma__ChatMessageClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChatMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
   * @example
   * // Count the number of ChatMessages
   * const count = await prisma.chatMessage.count({
   *   where: {
   *     // ... the filter for the ChatMessages we want to count
   *   }
   * })
  **/
  count<T extends ChatMessageCountArgs>(
    args?: Prisma.Subset<T, ChatMessageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChatMessage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatMessageAggregateArgs>(args: Prisma.Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

  /**
   * Group by ChatMessage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatMessageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
      : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChatMessage model
 */
readonly fields: ChatMessageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChatMessage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  chat<T extends Prisma.ChatDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatDefaultArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChatMessage model
 */
export interface ChatMessageFieldRefs {
  readonly id: Prisma.FieldRef<"ChatMessage", 'String'>
  readonly chatId: Prisma.FieldRef<"ChatMessage", 'String'>
  readonly message: Prisma.FieldRef<"ChatMessage", 'String'>
  readonly senderId: Prisma.FieldRef<"ChatMessage", 'String'>
  readonly createdAt: Prisma.FieldRef<"ChatMessage", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ChatMessage findUnique
 */
export type ChatMessageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessage to fetch.
   */
  where: Prisma.ChatMessageWhereUniqueInput
}

/**
 * ChatMessage findUniqueOrThrow
 */
export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessage to fetch.
   */
  where: Prisma.ChatMessageWhereUniqueInput
}

/**
 * ChatMessage findFirst
 */
export type ChatMessageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessage to fetch.
   */
  where?: Prisma.ChatMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatMessages to fetch.
   */
  orderBy?: Prisma.ChatMessageOrderByWithRelationInput | Prisma.ChatMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatMessages.
   */
  cursor?: Prisma.ChatMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatMessages.
   */
  distinct?: Prisma.ChatMessageScalarFieldEnum | Prisma.ChatMessageScalarFieldEnum[]
}

/**
 * ChatMessage findFirstOrThrow
 */
export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessage to fetch.
   */
  where?: Prisma.ChatMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatMessages to fetch.
   */
  orderBy?: Prisma.ChatMessageOrderByWithRelationInput | Prisma.ChatMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatMessages.
   */
  cursor?: Prisma.ChatMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatMessages.
   */
  distinct?: Prisma.ChatMessageScalarFieldEnum | Prisma.ChatMessageScalarFieldEnum[]
}

/**
 * ChatMessage findMany
 */
export type ChatMessageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessages to fetch.
   */
  where?: Prisma.ChatMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatMessages to fetch.
   */
  orderBy?: Prisma.ChatMessageOrderByWithRelationInput | Prisma.ChatMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChatMessages.
   */
  cursor?: Prisma.ChatMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatMessages.
   */
  skip?: number
  distinct?: Prisma.ChatMessageScalarFieldEnum | Prisma.ChatMessageScalarFieldEnum[]
}

/**
 * ChatMessage create
 */
export type ChatMessageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
  /**
   * The data needed to create a ChatMessage.
   */
  data: Prisma.XOR<Prisma.ChatMessageCreateInput, Prisma.ChatMessageUncheckedCreateInput>
}

/**
 * ChatMessage createMany
 */
export type ChatMessageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChatMessages.
   */
  data: Prisma.ChatMessageCreateManyInput | Prisma.ChatMessageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ChatMessage createManyAndReturn
 */
export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * The data used to create many ChatMessages.
   */
  data: Prisma.ChatMessageCreateManyInput | Prisma.ChatMessageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ChatMessage update
 */
export type ChatMessageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
  /**
   * The data needed to update a ChatMessage.
   */
  data: Prisma.XOR<Prisma.ChatMessageUpdateInput, Prisma.ChatMessageUncheckedUpdateInput>
  /**
   * Choose, which ChatMessage to update.
   */
  where: Prisma.ChatMessageWhereUniqueInput
}

/**
 * ChatMessage updateMany
 */
export type ChatMessageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChatMessages.
   */
  data: Prisma.XOR<Prisma.ChatMessageUpdateManyMutationInput, Prisma.ChatMessageUncheckedUpdateManyInput>
  /**
   * Filter which ChatMessages to update
   */
  where?: Prisma.ChatMessageWhereInput
  /**
   * Limit how many ChatMessages to update.
   */
  limit?: number
}

/**
 * ChatMessage updateManyAndReturn
 */
export type ChatMessageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * The data used to update ChatMessages.
   */
  data: Prisma.XOR<Prisma.ChatMessageUpdateManyMutationInput, Prisma.ChatMessageUncheckedUpdateManyInput>
  /**
   * Filter which ChatMessages to update
   */
  where?: Prisma.ChatMessageWhereInput
  /**
   * Limit how many ChatMessages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ChatMessage upsert
 */
export type ChatMessageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
  /**
   * The filter to search for the ChatMessage to update in case it exists.
   */
  where: Prisma.ChatMessageWhereUniqueInput
  /**
   * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
   */
  create: Prisma.XOR<Prisma.ChatMessageCreateInput, Prisma.ChatMessageUncheckedCreateInput>
  /**
   * In case the ChatMessage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatMessageUpdateInput, Prisma.ChatMessageUncheckedUpdateInput>
}

/**
 * ChatMessage delete
 */
export type ChatMessageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
  /**
   * Filter which ChatMessage to delete.
   */
  where: Prisma.ChatMessageWhereUniqueInput
}

/**
 * ChatMessage deleteMany
 */
export type ChatMessageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatMessages to delete
   */
  where?: Prisma.ChatMessageWhereInput
  /**
   * Limit how many ChatMessages to delete.
   */
  limit?: number
}

/**
 * ChatMessage without action
 */
export type ChatMessageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
}
