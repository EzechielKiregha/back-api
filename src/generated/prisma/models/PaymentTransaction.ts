
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PaymentTransaction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PaymentTransaction
 * 
 */
export type PaymentTransactionModel = runtime.Types.Result.DefaultSelection<Prisma.$PaymentTransactionPayload>

export type AggregatePaymentTransaction = {
  _count: PaymentTransactionCountAggregateOutputType | null
  _avg: PaymentTransactionAvgAggregateOutputType | null
  _sum: PaymentTransactionSumAggregateOutputType | null
  _min: PaymentTransactionMinAggregateOutputType | null
  _max: PaymentTransactionMaxAggregateOutputType | null
}

export type PaymentTransactionAvgAggregateOutputType = {
  amount: number | null
}

export type PaymentTransactionSumAggregateOutputType = {
  amount: number | null
}

export type PaymentTransactionMinAggregateOutputType = {
  id: string | null
  orderId: string | null
  status: $Enums.PaymentStatus | null
  method: $Enums.PaymentMethod | null
  amount: number | null
  transactionDate: Date | null
  qrCode: string | null
  createdAt: Date | null
  freelanceOrderId: string | null
}

export type PaymentTransactionMaxAggregateOutputType = {
  id: string | null
  orderId: string | null
  status: $Enums.PaymentStatus | null
  method: $Enums.PaymentMethod | null
  amount: number | null
  transactionDate: Date | null
  qrCode: string | null
  createdAt: Date | null
  freelanceOrderId: string | null
}

export type PaymentTransactionCountAggregateOutputType = {
  id: number
  orderId: number
  status: number
  method: number
  amount: number
  transactionDate: number
  qrCode: number
  createdAt: number
  freelanceOrderId: number
  _all: number
}


export type PaymentTransactionAvgAggregateInputType = {
  amount?: true
}

export type PaymentTransactionSumAggregateInputType = {
  amount?: true
}

export type PaymentTransactionMinAggregateInputType = {
  id?: true
  orderId?: true
  status?: true
  method?: true
  amount?: true
  transactionDate?: true
  qrCode?: true
  createdAt?: true
  freelanceOrderId?: true
}

export type PaymentTransactionMaxAggregateInputType = {
  id?: true
  orderId?: true
  status?: true
  method?: true
  amount?: true
  transactionDate?: true
  qrCode?: true
  createdAt?: true
  freelanceOrderId?: true
}

export type PaymentTransactionCountAggregateInputType = {
  id?: true
  orderId?: true
  status?: true
  method?: true
  amount?: true
  transactionDate?: true
  qrCode?: true
  createdAt?: true
  freelanceOrderId?: true
  _all?: true
}

export type PaymentTransactionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentTransaction to aggregate.
   */
  where?: Prisma.PaymentTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentTransactions to fetch.
   */
  orderBy?: Prisma.PaymentTransactionOrderByWithRelationInput | Prisma.PaymentTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PaymentTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PaymentTransactions
  **/
  _count?: true | PaymentTransactionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PaymentTransactionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PaymentTransactionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PaymentTransactionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PaymentTransactionMaxAggregateInputType
}

export type GetPaymentTransactionAggregateType<T extends PaymentTransactionAggregateArgs> = {
      [P in keyof T & keyof AggregatePaymentTransaction]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePaymentTransaction[P]>
    : Prisma.GetScalarType<T[P], AggregatePaymentTransaction[P]>
}




export type PaymentTransactionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PaymentTransactionWhereInput
  orderBy?: Prisma.PaymentTransactionOrderByWithAggregationInput | Prisma.PaymentTransactionOrderByWithAggregationInput[]
  by: Prisma.PaymentTransactionScalarFieldEnum[] | Prisma.PaymentTransactionScalarFieldEnum
  having?: Prisma.PaymentTransactionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PaymentTransactionCountAggregateInputType | true
  _avg?: PaymentTransactionAvgAggregateInputType
  _sum?: PaymentTransactionSumAggregateInputType
  _min?: PaymentTransactionMinAggregateInputType
  _max?: PaymentTransactionMaxAggregateInputType
}

export type PaymentTransactionGroupByOutputType = {
  id: string
  orderId: string | null
  status: $Enums.PaymentStatus
  method: $Enums.PaymentMethod
  amount: number
  transactionDate: Date
  qrCode: string | null
  createdAt: Date
  freelanceOrderId: string | null
  _count: PaymentTransactionCountAggregateOutputType | null
  _avg: PaymentTransactionAvgAggregateOutputType | null
  _sum: PaymentTransactionSumAggregateOutputType | null
  _min: PaymentTransactionMinAggregateOutputType | null
  _max: PaymentTransactionMaxAggregateOutputType | null
}

type GetPaymentTransactionGroupByPayload<T extends PaymentTransactionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PaymentTransactionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PaymentTransactionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PaymentTransactionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PaymentTransactionGroupByOutputType[P]>
      }
    >
  > 



export type PaymentTransactionWhereInput = {
  AND?: Prisma.PaymentTransactionWhereInput | Prisma.PaymentTransactionWhereInput[]
  OR?: Prisma.PaymentTransactionWhereInput[]
  NOT?: Prisma.PaymentTransactionWhereInput | Prisma.PaymentTransactionWhereInput[]
  id?: Prisma.StringFilter<"PaymentTransaction"> | string
  orderId?: Prisma.StringNullableFilter<"PaymentTransaction"> | string | null
  status?: Prisma.EnumPaymentStatusFilter<"PaymentTransaction"> | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodFilter<"PaymentTransaction"> | $Enums.PaymentMethod
  amount?: Prisma.FloatFilter<"PaymentTransaction"> | number
  transactionDate?: Prisma.DateTimeFilter<"PaymentTransaction"> | Date | string
  qrCode?: Prisma.StringNullableFilter<"PaymentTransaction"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PaymentTransaction"> | Date | string
  freelanceOrderId?: Prisma.StringNullableFilter<"PaymentTransaction"> | string | null
  order?: Prisma.XOR<Prisma.OrderNullableScalarRelationFilter, Prisma.OrderWhereInput> | null
  freelanceOrder?: Prisma.XOR<Prisma.FreelanceOrderNullableScalarRelationFilter, Prisma.FreelanceOrderWhereInput> | null
  postTransactions?: Prisma.PostTransactionListRelationFilter
}

export type PaymentTransactionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  method?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionDate?: Prisma.SortOrder
  qrCode?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  freelanceOrderId?: Prisma.SortOrderInput | Prisma.SortOrder
  order?: Prisma.OrderOrderByWithRelationInput
  freelanceOrder?: Prisma.FreelanceOrderOrderByWithRelationInput
  postTransactions?: Prisma.PostTransactionOrderByRelationAggregateInput
}

export type PaymentTransactionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  orderId?: string
  freelanceOrderId?: string
  AND?: Prisma.PaymentTransactionWhereInput | Prisma.PaymentTransactionWhereInput[]
  OR?: Prisma.PaymentTransactionWhereInput[]
  NOT?: Prisma.PaymentTransactionWhereInput | Prisma.PaymentTransactionWhereInput[]
  status?: Prisma.EnumPaymentStatusFilter<"PaymentTransaction"> | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodFilter<"PaymentTransaction"> | $Enums.PaymentMethod
  amount?: Prisma.FloatFilter<"PaymentTransaction"> | number
  transactionDate?: Prisma.DateTimeFilter<"PaymentTransaction"> | Date | string
  qrCode?: Prisma.StringNullableFilter<"PaymentTransaction"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PaymentTransaction"> | Date | string
  order?: Prisma.XOR<Prisma.OrderNullableScalarRelationFilter, Prisma.OrderWhereInput> | null
  freelanceOrder?: Prisma.XOR<Prisma.FreelanceOrderNullableScalarRelationFilter, Prisma.FreelanceOrderWhereInput> | null
  postTransactions?: Prisma.PostTransactionListRelationFilter
}, "id" | "orderId" | "freelanceOrderId">

export type PaymentTransactionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  method?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionDate?: Prisma.SortOrder
  qrCode?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  freelanceOrderId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.PaymentTransactionCountOrderByAggregateInput
  _avg?: Prisma.PaymentTransactionAvgOrderByAggregateInput
  _max?: Prisma.PaymentTransactionMaxOrderByAggregateInput
  _min?: Prisma.PaymentTransactionMinOrderByAggregateInput
  _sum?: Prisma.PaymentTransactionSumOrderByAggregateInput
}

export type PaymentTransactionScalarWhereWithAggregatesInput = {
  AND?: Prisma.PaymentTransactionScalarWhereWithAggregatesInput | Prisma.PaymentTransactionScalarWhereWithAggregatesInput[]
  OR?: Prisma.PaymentTransactionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PaymentTransactionScalarWhereWithAggregatesInput | Prisma.PaymentTransactionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PaymentTransaction"> | string
  orderId?: Prisma.StringNullableWithAggregatesFilter<"PaymentTransaction"> | string | null
  status?: Prisma.EnumPaymentStatusWithAggregatesFilter<"PaymentTransaction"> | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodWithAggregatesFilter<"PaymentTransaction"> | $Enums.PaymentMethod
  amount?: Prisma.FloatWithAggregatesFilter<"PaymentTransaction"> | number
  transactionDate?: Prisma.DateTimeWithAggregatesFilter<"PaymentTransaction"> | Date | string
  qrCode?: Prisma.StringNullableWithAggregatesFilter<"PaymentTransaction"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PaymentTransaction"> | Date | string
  freelanceOrderId?: Prisma.StringNullableWithAggregatesFilter<"PaymentTransaction"> | string | null
}

export type PaymentTransactionCreateInput = {
  id?: string
  status?: $Enums.PaymentStatus
  method?: $Enums.PaymentMethod
  amount: number
  transactionDate?: Date | string
  qrCode?: string | null
  createdAt?: Date | string
  order?: Prisma.OrderCreateNestedOneWithoutPaymentInput
  freelanceOrder?: Prisma.FreelanceOrderCreateNestedOneWithoutPaymentInput
  postTransactions?: Prisma.PostTransactionCreateNestedManyWithoutPaymentTransactionInput
}

export type PaymentTransactionUncheckedCreateInput = {
  id?: string
  orderId?: string | null
  status?: $Enums.PaymentStatus
  method?: $Enums.PaymentMethod
  amount: number
  transactionDate?: Date | string
  qrCode?: string | null
  createdAt?: Date | string
  freelanceOrderId?: string | null
  postTransactions?: Prisma.PostTransactionUncheckedCreateNestedManyWithoutPaymentTransactionInput
}

export type PaymentTransactionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  transactionDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  order?: Prisma.OrderUpdateOneWithoutPaymentNestedInput
  freelanceOrder?: Prisma.FreelanceOrderUpdateOneWithoutPaymentNestedInput
  postTransactions?: Prisma.PostTransactionUpdateManyWithoutPaymentTransactionNestedInput
}

export type PaymentTransactionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  transactionDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelanceOrderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  postTransactions?: Prisma.PostTransactionUncheckedUpdateManyWithoutPaymentTransactionNestedInput
}

export type PaymentTransactionCreateManyInput = {
  id?: string
  orderId?: string | null
  status?: $Enums.PaymentStatus
  method?: $Enums.PaymentMethod
  amount: number
  transactionDate?: Date | string
  qrCode?: string | null
  createdAt?: Date | string
  freelanceOrderId?: string | null
}

export type PaymentTransactionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  transactionDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentTransactionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  transactionDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelanceOrderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PaymentTransactionNullableScalarRelationFilter = {
  is?: Prisma.PaymentTransactionWhereInput | null
  isNot?: Prisma.PaymentTransactionWhereInput | null
}

export type PaymentTransactionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  method?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionDate?: Prisma.SortOrder
  qrCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  freelanceOrderId?: Prisma.SortOrder
}

export type PaymentTransactionAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type PaymentTransactionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  method?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionDate?: Prisma.SortOrder
  qrCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  freelanceOrderId?: Prisma.SortOrder
}

export type PaymentTransactionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  method?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  transactionDate?: Prisma.SortOrder
  qrCode?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  freelanceOrderId?: Prisma.SortOrder
}

export type PaymentTransactionSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type PaymentTransactionCreateNestedOneWithoutOrderInput = {
  create?: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutOrderInput, Prisma.PaymentTransactionUncheckedCreateWithoutOrderInput>
  connectOrCreate?: Prisma.PaymentTransactionCreateOrConnectWithoutOrderInput
  connect?: Prisma.PaymentTransactionWhereUniqueInput
}

export type PaymentTransactionUncheckedCreateNestedOneWithoutOrderInput = {
  create?: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutOrderInput, Prisma.PaymentTransactionUncheckedCreateWithoutOrderInput>
  connectOrCreate?: Prisma.PaymentTransactionCreateOrConnectWithoutOrderInput
  connect?: Prisma.PaymentTransactionWhereUniqueInput
}

export type PaymentTransactionUpdateOneWithoutOrderNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutOrderInput, Prisma.PaymentTransactionUncheckedCreateWithoutOrderInput>
  connectOrCreate?: Prisma.PaymentTransactionCreateOrConnectWithoutOrderInput
  upsert?: Prisma.PaymentTransactionUpsertWithoutOrderInput
  disconnect?: Prisma.PaymentTransactionWhereInput | boolean
  delete?: Prisma.PaymentTransactionWhereInput | boolean
  connect?: Prisma.PaymentTransactionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PaymentTransactionUpdateToOneWithWhereWithoutOrderInput, Prisma.PaymentTransactionUpdateWithoutOrderInput>, Prisma.PaymentTransactionUncheckedUpdateWithoutOrderInput>
}

export type PaymentTransactionUncheckedUpdateOneWithoutOrderNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutOrderInput, Prisma.PaymentTransactionUncheckedCreateWithoutOrderInput>
  connectOrCreate?: Prisma.PaymentTransactionCreateOrConnectWithoutOrderInput
  upsert?: Prisma.PaymentTransactionUpsertWithoutOrderInput
  disconnect?: Prisma.PaymentTransactionWhereInput | boolean
  delete?: Prisma.PaymentTransactionWhereInput | boolean
  connect?: Prisma.PaymentTransactionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PaymentTransactionUpdateToOneWithWhereWithoutOrderInput, Prisma.PaymentTransactionUpdateWithoutOrderInput>, Prisma.PaymentTransactionUncheckedUpdateWithoutOrderInput>
}

export type EnumPaymentStatusFieldUpdateOperationsInput = {
  set?: $Enums.PaymentStatus
}

export type EnumPaymentMethodFieldUpdateOperationsInput = {
  set?: $Enums.PaymentMethod
}

export type PaymentTransactionCreateNestedOneWithoutFreelanceOrderInput = {
  create?: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutFreelanceOrderInput, Prisma.PaymentTransactionUncheckedCreateWithoutFreelanceOrderInput>
  connectOrCreate?: Prisma.PaymentTransactionCreateOrConnectWithoutFreelanceOrderInput
  connect?: Prisma.PaymentTransactionWhereUniqueInput
}

export type PaymentTransactionUncheckedCreateNestedOneWithoutFreelanceOrderInput = {
  create?: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutFreelanceOrderInput, Prisma.PaymentTransactionUncheckedCreateWithoutFreelanceOrderInput>
  connectOrCreate?: Prisma.PaymentTransactionCreateOrConnectWithoutFreelanceOrderInput
  connect?: Prisma.PaymentTransactionWhereUniqueInput
}

export type PaymentTransactionUpdateOneWithoutFreelanceOrderNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutFreelanceOrderInput, Prisma.PaymentTransactionUncheckedCreateWithoutFreelanceOrderInput>
  connectOrCreate?: Prisma.PaymentTransactionCreateOrConnectWithoutFreelanceOrderInput
  upsert?: Prisma.PaymentTransactionUpsertWithoutFreelanceOrderInput
  disconnect?: Prisma.PaymentTransactionWhereInput | boolean
  delete?: Prisma.PaymentTransactionWhereInput | boolean
  connect?: Prisma.PaymentTransactionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PaymentTransactionUpdateToOneWithWhereWithoutFreelanceOrderInput, Prisma.PaymentTransactionUpdateWithoutFreelanceOrderInput>, Prisma.PaymentTransactionUncheckedUpdateWithoutFreelanceOrderInput>
}

export type PaymentTransactionUncheckedUpdateOneWithoutFreelanceOrderNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutFreelanceOrderInput, Prisma.PaymentTransactionUncheckedCreateWithoutFreelanceOrderInput>
  connectOrCreate?: Prisma.PaymentTransactionCreateOrConnectWithoutFreelanceOrderInput
  upsert?: Prisma.PaymentTransactionUpsertWithoutFreelanceOrderInput
  disconnect?: Prisma.PaymentTransactionWhereInput | boolean
  delete?: Prisma.PaymentTransactionWhereInput | boolean
  connect?: Prisma.PaymentTransactionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PaymentTransactionUpdateToOneWithWhereWithoutFreelanceOrderInput, Prisma.PaymentTransactionUpdateWithoutFreelanceOrderInput>, Prisma.PaymentTransactionUncheckedUpdateWithoutFreelanceOrderInput>
}

export type PaymentTransactionCreateNestedOneWithoutPostTransactionsInput = {
  create?: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutPostTransactionsInput, Prisma.PaymentTransactionUncheckedCreateWithoutPostTransactionsInput>
  connectOrCreate?: Prisma.PaymentTransactionCreateOrConnectWithoutPostTransactionsInput
  connect?: Prisma.PaymentTransactionWhereUniqueInput
}

export type PaymentTransactionUpdateOneWithoutPostTransactionsNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutPostTransactionsInput, Prisma.PaymentTransactionUncheckedCreateWithoutPostTransactionsInput>
  connectOrCreate?: Prisma.PaymentTransactionCreateOrConnectWithoutPostTransactionsInput
  upsert?: Prisma.PaymentTransactionUpsertWithoutPostTransactionsInput
  disconnect?: Prisma.PaymentTransactionWhereInput | boolean
  delete?: Prisma.PaymentTransactionWhereInput | boolean
  connect?: Prisma.PaymentTransactionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PaymentTransactionUpdateToOneWithWhereWithoutPostTransactionsInput, Prisma.PaymentTransactionUpdateWithoutPostTransactionsInput>, Prisma.PaymentTransactionUncheckedUpdateWithoutPostTransactionsInput>
}

export type PaymentTransactionCreateWithoutOrderInput = {
  id?: string
  status?: $Enums.PaymentStatus
  method?: $Enums.PaymentMethod
  amount: number
  transactionDate?: Date | string
  qrCode?: string | null
  createdAt?: Date | string
  freelanceOrder?: Prisma.FreelanceOrderCreateNestedOneWithoutPaymentInput
  postTransactions?: Prisma.PostTransactionCreateNestedManyWithoutPaymentTransactionInput
}

export type PaymentTransactionUncheckedCreateWithoutOrderInput = {
  id?: string
  status?: $Enums.PaymentStatus
  method?: $Enums.PaymentMethod
  amount: number
  transactionDate?: Date | string
  qrCode?: string | null
  createdAt?: Date | string
  freelanceOrderId?: string | null
  postTransactions?: Prisma.PostTransactionUncheckedCreateNestedManyWithoutPaymentTransactionInput
}

export type PaymentTransactionCreateOrConnectWithoutOrderInput = {
  where: Prisma.PaymentTransactionWhereUniqueInput
  create: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutOrderInput, Prisma.PaymentTransactionUncheckedCreateWithoutOrderInput>
}

export type PaymentTransactionUpsertWithoutOrderInput = {
  update: Prisma.XOR<Prisma.PaymentTransactionUpdateWithoutOrderInput, Prisma.PaymentTransactionUncheckedUpdateWithoutOrderInput>
  create: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutOrderInput, Prisma.PaymentTransactionUncheckedCreateWithoutOrderInput>
  where?: Prisma.PaymentTransactionWhereInput
}

export type PaymentTransactionUpdateToOneWithWhereWithoutOrderInput = {
  where?: Prisma.PaymentTransactionWhereInput
  data: Prisma.XOR<Prisma.PaymentTransactionUpdateWithoutOrderInput, Prisma.PaymentTransactionUncheckedUpdateWithoutOrderInput>
}

export type PaymentTransactionUpdateWithoutOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  transactionDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelanceOrder?: Prisma.FreelanceOrderUpdateOneWithoutPaymentNestedInput
  postTransactions?: Prisma.PostTransactionUpdateManyWithoutPaymentTransactionNestedInput
}

export type PaymentTransactionUncheckedUpdateWithoutOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  transactionDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelanceOrderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  postTransactions?: Prisma.PostTransactionUncheckedUpdateManyWithoutPaymentTransactionNestedInput
}

export type PaymentTransactionCreateWithoutFreelanceOrderInput = {
  id?: string
  status?: $Enums.PaymentStatus
  method?: $Enums.PaymentMethod
  amount: number
  transactionDate?: Date | string
  qrCode?: string | null
  createdAt?: Date | string
  order?: Prisma.OrderCreateNestedOneWithoutPaymentInput
  postTransactions?: Prisma.PostTransactionCreateNestedManyWithoutPaymentTransactionInput
}

export type PaymentTransactionUncheckedCreateWithoutFreelanceOrderInput = {
  id?: string
  orderId?: string | null
  status?: $Enums.PaymentStatus
  method?: $Enums.PaymentMethod
  amount: number
  transactionDate?: Date | string
  qrCode?: string | null
  createdAt?: Date | string
  postTransactions?: Prisma.PostTransactionUncheckedCreateNestedManyWithoutPaymentTransactionInput
}

export type PaymentTransactionCreateOrConnectWithoutFreelanceOrderInput = {
  where: Prisma.PaymentTransactionWhereUniqueInput
  create: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutFreelanceOrderInput, Prisma.PaymentTransactionUncheckedCreateWithoutFreelanceOrderInput>
}

export type PaymentTransactionUpsertWithoutFreelanceOrderInput = {
  update: Prisma.XOR<Prisma.PaymentTransactionUpdateWithoutFreelanceOrderInput, Prisma.PaymentTransactionUncheckedUpdateWithoutFreelanceOrderInput>
  create: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutFreelanceOrderInput, Prisma.PaymentTransactionUncheckedCreateWithoutFreelanceOrderInput>
  where?: Prisma.PaymentTransactionWhereInput
}

export type PaymentTransactionUpdateToOneWithWhereWithoutFreelanceOrderInput = {
  where?: Prisma.PaymentTransactionWhereInput
  data: Prisma.XOR<Prisma.PaymentTransactionUpdateWithoutFreelanceOrderInput, Prisma.PaymentTransactionUncheckedUpdateWithoutFreelanceOrderInput>
}

export type PaymentTransactionUpdateWithoutFreelanceOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  transactionDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  order?: Prisma.OrderUpdateOneWithoutPaymentNestedInput
  postTransactions?: Prisma.PostTransactionUpdateManyWithoutPaymentTransactionNestedInput
}

export type PaymentTransactionUncheckedUpdateWithoutFreelanceOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  transactionDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  postTransactions?: Prisma.PostTransactionUncheckedUpdateManyWithoutPaymentTransactionNestedInput
}

export type PaymentTransactionCreateWithoutPostTransactionsInput = {
  id?: string
  status?: $Enums.PaymentStatus
  method?: $Enums.PaymentMethod
  amount: number
  transactionDate?: Date | string
  qrCode?: string | null
  createdAt?: Date | string
  order?: Prisma.OrderCreateNestedOneWithoutPaymentInput
  freelanceOrder?: Prisma.FreelanceOrderCreateNestedOneWithoutPaymentInput
}

export type PaymentTransactionUncheckedCreateWithoutPostTransactionsInput = {
  id?: string
  orderId?: string | null
  status?: $Enums.PaymentStatus
  method?: $Enums.PaymentMethod
  amount: number
  transactionDate?: Date | string
  qrCode?: string | null
  createdAt?: Date | string
  freelanceOrderId?: string | null
}

export type PaymentTransactionCreateOrConnectWithoutPostTransactionsInput = {
  where: Prisma.PaymentTransactionWhereUniqueInput
  create: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutPostTransactionsInput, Prisma.PaymentTransactionUncheckedCreateWithoutPostTransactionsInput>
}

export type PaymentTransactionUpsertWithoutPostTransactionsInput = {
  update: Prisma.XOR<Prisma.PaymentTransactionUpdateWithoutPostTransactionsInput, Prisma.PaymentTransactionUncheckedUpdateWithoutPostTransactionsInput>
  create: Prisma.XOR<Prisma.PaymentTransactionCreateWithoutPostTransactionsInput, Prisma.PaymentTransactionUncheckedCreateWithoutPostTransactionsInput>
  where?: Prisma.PaymentTransactionWhereInput
}

export type PaymentTransactionUpdateToOneWithWhereWithoutPostTransactionsInput = {
  where?: Prisma.PaymentTransactionWhereInput
  data: Prisma.XOR<Prisma.PaymentTransactionUpdateWithoutPostTransactionsInput, Prisma.PaymentTransactionUncheckedUpdateWithoutPostTransactionsInput>
}

export type PaymentTransactionUpdateWithoutPostTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  transactionDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  order?: Prisma.OrderUpdateOneWithoutPaymentNestedInput
  freelanceOrder?: Prisma.FreelanceOrderUpdateOneWithoutPaymentNestedInput
}

export type PaymentTransactionUncheckedUpdateWithoutPostTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  method?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  transactionDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  qrCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelanceOrderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type PaymentTransactionCountOutputType
 */

export type PaymentTransactionCountOutputType = {
  postTransactions: number
}

export type PaymentTransactionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  postTransactions?: boolean | PaymentTransactionCountOutputTypeCountPostTransactionsArgs
}

/**
 * PaymentTransactionCountOutputType without action
 */
export type PaymentTransactionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransactionCountOutputType
   */
  select?: Prisma.PaymentTransactionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PaymentTransactionCountOutputType without action
 */
export type PaymentTransactionCountOutputTypeCountPostTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PostTransactionWhereInput
}


export type PaymentTransactionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  status?: boolean
  method?: boolean
  amount?: boolean
  transactionDate?: boolean
  qrCode?: boolean
  createdAt?: boolean
  freelanceOrderId?: boolean
  order?: boolean | Prisma.PaymentTransaction$orderArgs<ExtArgs>
  freelanceOrder?: boolean | Prisma.PaymentTransaction$freelanceOrderArgs<ExtArgs>
  postTransactions?: boolean | Prisma.PaymentTransaction$postTransactionsArgs<ExtArgs>
  _count?: boolean | Prisma.PaymentTransactionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["paymentTransaction"]>

export type PaymentTransactionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  status?: boolean
  method?: boolean
  amount?: boolean
  transactionDate?: boolean
  qrCode?: boolean
  createdAt?: boolean
  freelanceOrderId?: boolean
  order?: boolean | Prisma.PaymentTransaction$orderArgs<ExtArgs>
  freelanceOrder?: boolean | Prisma.PaymentTransaction$freelanceOrderArgs<ExtArgs>
}, ExtArgs["result"]["paymentTransaction"]>

export type PaymentTransactionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  status?: boolean
  method?: boolean
  amount?: boolean
  transactionDate?: boolean
  qrCode?: boolean
  createdAt?: boolean
  freelanceOrderId?: boolean
  order?: boolean | Prisma.PaymentTransaction$orderArgs<ExtArgs>
  freelanceOrder?: boolean | Prisma.PaymentTransaction$freelanceOrderArgs<ExtArgs>
}, ExtArgs["result"]["paymentTransaction"]>

export type PaymentTransactionSelectScalar = {
  id?: boolean
  orderId?: boolean
  status?: boolean
  method?: boolean
  amount?: boolean
  transactionDate?: boolean
  qrCode?: boolean
  createdAt?: boolean
  freelanceOrderId?: boolean
}

export type PaymentTransactionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "orderId" | "status" | "method" | "amount" | "transactionDate" | "qrCode" | "createdAt" | "freelanceOrderId", ExtArgs["result"]["paymentTransaction"]>
export type PaymentTransactionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order?: boolean | Prisma.PaymentTransaction$orderArgs<ExtArgs>
  freelanceOrder?: boolean | Prisma.PaymentTransaction$freelanceOrderArgs<ExtArgs>
  postTransactions?: boolean | Prisma.PaymentTransaction$postTransactionsArgs<ExtArgs>
  _count?: boolean | Prisma.PaymentTransactionCountOutputTypeDefaultArgs<ExtArgs>
}
export type PaymentTransactionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order?: boolean | Prisma.PaymentTransaction$orderArgs<ExtArgs>
  freelanceOrder?: boolean | Prisma.PaymentTransaction$freelanceOrderArgs<ExtArgs>
}
export type PaymentTransactionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order?: boolean | Prisma.PaymentTransaction$orderArgs<ExtArgs>
  freelanceOrder?: boolean | Prisma.PaymentTransaction$freelanceOrderArgs<ExtArgs>
}

export type $PaymentTransactionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PaymentTransaction"
  objects: {
    order: Prisma.$OrderPayload<ExtArgs> | null
    freelanceOrder: Prisma.$FreelanceOrderPayload<ExtArgs> | null
    postTransactions: Prisma.$PostTransactionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    orderId: string | null
    status: $Enums.PaymentStatus
    method: $Enums.PaymentMethod
    amount: number
    transactionDate: Date
    qrCode: string | null
    createdAt: Date
    freelanceOrderId: string | null
  }, ExtArgs["result"]["paymentTransaction"]>
  composites: {}
}

export type PaymentTransactionGetPayload<S extends boolean | null | undefined | PaymentTransactionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload, S>

export type PaymentTransactionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PaymentTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PaymentTransactionCountAggregateInputType | true
  }

export interface PaymentTransactionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentTransaction'], meta: { name: 'PaymentTransaction' } }
  /**
   * Find zero or one PaymentTransaction that matches the filter.
   * @param {PaymentTransactionFindUniqueArgs} args - Arguments to find a PaymentTransaction
   * @example
   * // Get one PaymentTransaction
   * const paymentTransaction = await prisma.paymentTransaction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PaymentTransactionFindUniqueArgs>(args: Prisma.SelectSubset<T, PaymentTransactionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PaymentTransactionClient<runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PaymentTransaction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PaymentTransactionFindUniqueOrThrowArgs} args - Arguments to find a PaymentTransaction
   * @example
   * // Get one PaymentTransaction
   * const paymentTransaction = await prisma.paymentTransaction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PaymentTransactionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PaymentTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentTransactionClient<runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentTransaction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentTransactionFindFirstArgs} args - Arguments to find a PaymentTransaction
   * @example
   * // Get one PaymentTransaction
   * const paymentTransaction = await prisma.paymentTransaction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PaymentTransactionFindFirstArgs>(args?: Prisma.SelectSubset<T, PaymentTransactionFindFirstArgs<ExtArgs>>): Prisma.Prisma__PaymentTransactionClient<runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentTransaction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentTransactionFindFirstOrThrowArgs} args - Arguments to find a PaymentTransaction
   * @example
   * // Get one PaymentTransaction
   * const paymentTransaction = await prisma.paymentTransaction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PaymentTransactionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PaymentTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentTransactionClient<runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PaymentTransactions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PaymentTransactions
   * const paymentTransactions = await prisma.paymentTransaction.findMany()
   * 
   * // Get first 10 PaymentTransactions
   * const paymentTransactions = await prisma.paymentTransaction.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const paymentTransactionWithIdOnly = await prisma.paymentTransaction.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PaymentTransactionFindManyArgs>(args?: Prisma.SelectSubset<T, PaymentTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PaymentTransaction.
   * @param {PaymentTransactionCreateArgs} args - Arguments to create a PaymentTransaction.
   * @example
   * // Create one PaymentTransaction
   * const PaymentTransaction = await prisma.paymentTransaction.create({
   *   data: {
   *     // ... data to create a PaymentTransaction
   *   }
   * })
   * 
   */
  create<T extends PaymentTransactionCreateArgs>(args: Prisma.SelectSubset<T, PaymentTransactionCreateArgs<ExtArgs>>): Prisma.Prisma__PaymentTransactionClient<runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PaymentTransactions.
   * @param {PaymentTransactionCreateManyArgs} args - Arguments to create many PaymentTransactions.
   * @example
   * // Create many PaymentTransactions
   * const paymentTransaction = await prisma.paymentTransaction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PaymentTransactionCreateManyArgs>(args?: Prisma.SelectSubset<T, PaymentTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PaymentTransactions and returns the data saved in the database.
   * @param {PaymentTransactionCreateManyAndReturnArgs} args - Arguments to create many PaymentTransactions.
   * @example
   * // Create many PaymentTransactions
   * const paymentTransaction = await prisma.paymentTransaction.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PaymentTransactions and only return the `id`
   * const paymentTransactionWithIdOnly = await prisma.paymentTransaction.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PaymentTransactionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PaymentTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PaymentTransaction.
   * @param {PaymentTransactionDeleteArgs} args - Arguments to delete one PaymentTransaction.
   * @example
   * // Delete one PaymentTransaction
   * const PaymentTransaction = await prisma.paymentTransaction.delete({
   *   where: {
   *     // ... filter to delete one PaymentTransaction
   *   }
   * })
   * 
   */
  delete<T extends PaymentTransactionDeleteArgs>(args: Prisma.SelectSubset<T, PaymentTransactionDeleteArgs<ExtArgs>>): Prisma.Prisma__PaymentTransactionClient<runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PaymentTransaction.
   * @param {PaymentTransactionUpdateArgs} args - Arguments to update one PaymentTransaction.
   * @example
   * // Update one PaymentTransaction
   * const paymentTransaction = await prisma.paymentTransaction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PaymentTransactionUpdateArgs>(args: Prisma.SelectSubset<T, PaymentTransactionUpdateArgs<ExtArgs>>): Prisma.Prisma__PaymentTransactionClient<runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PaymentTransactions.
   * @param {PaymentTransactionDeleteManyArgs} args - Arguments to filter PaymentTransactions to delete.
   * @example
   * // Delete a few PaymentTransactions
   * const { count } = await prisma.paymentTransaction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PaymentTransactionDeleteManyArgs>(args?: Prisma.SelectSubset<T, PaymentTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentTransactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentTransactionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PaymentTransactions
   * const paymentTransaction = await prisma.paymentTransaction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PaymentTransactionUpdateManyArgs>(args: Prisma.SelectSubset<T, PaymentTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentTransactions and returns the data updated in the database.
   * @param {PaymentTransactionUpdateManyAndReturnArgs} args - Arguments to update many PaymentTransactions.
   * @example
   * // Update many PaymentTransactions
   * const paymentTransaction = await prisma.paymentTransaction.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PaymentTransactions and only return the `id`
   * const paymentTransactionWithIdOnly = await prisma.paymentTransaction.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PaymentTransactionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PaymentTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PaymentTransaction.
   * @param {PaymentTransactionUpsertArgs} args - Arguments to update or create a PaymentTransaction.
   * @example
   * // Update or create a PaymentTransaction
   * const paymentTransaction = await prisma.paymentTransaction.upsert({
   *   create: {
   *     // ... data to create a PaymentTransaction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PaymentTransaction we want to update
   *   }
   * })
   */
  upsert<T extends PaymentTransactionUpsertArgs>(args: Prisma.SelectSubset<T, PaymentTransactionUpsertArgs<ExtArgs>>): Prisma.Prisma__PaymentTransactionClient<runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PaymentTransactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentTransactionCountArgs} args - Arguments to filter PaymentTransactions to count.
   * @example
   * // Count the number of PaymentTransactions
   * const count = await prisma.paymentTransaction.count({
   *   where: {
   *     // ... the filter for the PaymentTransactions we want to count
   *   }
   * })
  **/
  count<T extends PaymentTransactionCountArgs>(
    args?: Prisma.Subset<T, PaymentTransactionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PaymentTransactionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PaymentTransaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PaymentTransactionAggregateArgs>(args: Prisma.Subset<T, PaymentTransactionAggregateArgs>): Prisma.PrismaPromise<GetPaymentTransactionAggregateType<T>>

  /**
   * Group by PaymentTransaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentTransactionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PaymentTransactionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PaymentTransactionGroupByArgs['orderBy'] }
      : { orderBy?: PaymentTransactionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PaymentTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PaymentTransaction model
 */
readonly fields: PaymentTransactionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PaymentTransaction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PaymentTransactionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  order<T extends Prisma.PaymentTransaction$orderArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PaymentTransaction$orderArgs<ExtArgs>>): Prisma.Prisma__OrderClient<runtime.Types.Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  freelanceOrder<T extends Prisma.PaymentTransaction$freelanceOrderArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PaymentTransaction$freelanceOrderArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  postTransactions<T extends Prisma.PaymentTransaction$postTransactionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PaymentTransaction$postTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PaymentTransaction model
 */
export interface PaymentTransactionFieldRefs {
  readonly id: Prisma.FieldRef<"PaymentTransaction", 'String'>
  readonly orderId: Prisma.FieldRef<"PaymentTransaction", 'String'>
  readonly status: Prisma.FieldRef<"PaymentTransaction", 'PaymentStatus'>
  readonly method: Prisma.FieldRef<"PaymentTransaction", 'PaymentMethod'>
  readonly amount: Prisma.FieldRef<"PaymentTransaction", 'Float'>
  readonly transactionDate: Prisma.FieldRef<"PaymentTransaction", 'DateTime'>
  readonly qrCode: Prisma.FieldRef<"PaymentTransaction", 'String'>
  readonly createdAt: Prisma.FieldRef<"PaymentTransaction", 'DateTime'>
  readonly freelanceOrderId: Prisma.FieldRef<"PaymentTransaction", 'String'>
}
    

// Custom InputTypes
/**
 * PaymentTransaction findUnique
 */
export type PaymentTransactionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PaymentTransaction to fetch.
   */
  where: Prisma.PaymentTransactionWhereUniqueInput
}

/**
 * PaymentTransaction findUniqueOrThrow
 */
export type PaymentTransactionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PaymentTransaction to fetch.
   */
  where: Prisma.PaymentTransactionWhereUniqueInput
}

/**
 * PaymentTransaction findFirst
 */
export type PaymentTransactionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PaymentTransaction to fetch.
   */
  where?: Prisma.PaymentTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentTransactions to fetch.
   */
  orderBy?: Prisma.PaymentTransactionOrderByWithRelationInput | Prisma.PaymentTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentTransactions.
   */
  cursor?: Prisma.PaymentTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentTransactions.
   */
  distinct?: Prisma.PaymentTransactionScalarFieldEnum | Prisma.PaymentTransactionScalarFieldEnum[]
}

/**
 * PaymentTransaction findFirstOrThrow
 */
export type PaymentTransactionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PaymentTransaction to fetch.
   */
  where?: Prisma.PaymentTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentTransactions to fetch.
   */
  orderBy?: Prisma.PaymentTransactionOrderByWithRelationInput | Prisma.PaymentTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentTransactions.
   */
  cursor?: Prisma.PaymentTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentTransactions.
   */
  distinct?: Prisma.PaymentTransactionScalarFieldEnum | Prisma.PaymentTransactionScalarFieldEnum[]
}

/**
 * PaymentTransaction findMany
 */
export type PaymentTransactionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PaymentTransactions to fetch.
   */
  where?: Prisma.PaymentTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentTransactions to fetch.
   */
  orderBy?: Prisma.PaymentTransactionOrderByWithRelationInput | Prisma.PaymentTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PaymentTransactions.
   */
  cursor?: Prisma.PaymentTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentTransactions.
   */
  skip?: number
  distinct?: Prisma.PaymentTransactionScalarFieldEnum | Prisma.PaymentTransactionScalarFieldEnum[]
}

/**
 * PaymentTransaction create
 */
export type PaymentTransactionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionInclude<ExtArgs> | null
  /**
   * The data needed to create a PaymentTransaction.
   */
  data: Prisma.XOR<Prisma.PaymentTransactionCreateInput, Prisma.PaymentTransactionUncheckedCreateInput>
}

/**
 * PaymentTransaction createMany
 */
export type PaymentTransactionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PaymentTransactions.
   */
  data: Prisma.PaymentTransactionCreateManyInput | Prisma.PaymentTransactionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PaymentTransaction createManyAndReturn
 */
export type PaymentTransactionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * The data used to create many PaymentTransactions.
   */
  data: Prisma.PaymentTransactionCreateManyInput | Prisma.PaymentTransactionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PaymentTransaction update
 */
export type PaymentTransactionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionInclude<ExtArgs> | null
  /**
   * The data needed to update a PaymentTransaction.
   */
  data: Prisma.XOR<Prisma.PaymentTransactionUpdateInput, Prisma.PaymentTransactionUncheckedUpdateInput>
  /**
   * Choose, which PaymentTransaction to update.
   */
  where: Prisma.PaymentTransactionWhereUniqueInput
}

/**
 * PaymentTransaction updateMany
 */
export type PaymentTransactionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PaymentTransactions.
   */
  data: Prisma.XOR<Prisma.PaymentTransactionUpdateManyMutationInput, Prisma.PaymentTransactionUncheckedUpdateManyInput>
  /**
   * Filter which PaymentTransactions to update
   */
  where?: Prisma.PaymentTransactionWhereInput
  /**
   * Limit how many PaymentTransactions to update.
   */
  limit?: number
}

/**
 * PaymentTransaction updateManyAndReturn
 */
export type PaymentTransactionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * The data used to update PaymentTransactions.
   */
  data: Prisma.XOR<Prisma.PaymentTransactionUpdateManyMutationInput, Prisma.PaymentTransactionUncheckedUpdateManyInput>
  /**
   * Filter which PaymentTransactions to update
   */
  where?: Prisma.PaymentTransactionWhereInput
  /**
   * Limit how many PaymentTransactions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PaymentTransaction upsert
 */
export type PaymentTransactionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionInclude<ExtArgs> | null
  /**
   * The filter to search for the PaymentTransaction to update in case it exists.
   */
  where: Prisma.PaymentTransactionWhereUniqueInput
  /**
   * In case the PaymentTransaction found by the `where` argument doesn't exist, create a new PaymentTransaction with this data.
   */
  create: Prisma.XOR<Prisma.PaymentTransactionCreateInput, Prisma.PaymentTransactionUncheckedCreateInput>
  /**
   * In case the PaymentTransaction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PaymentTransactionUpdateInput, Prisma.PaymentTransactionUncheckedUpdateInput>
}

/**
 * PaymentTransaction delete
 */
export type PaymentTransactionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionInclude<ExtArgs> | null
  /**
   * Filter which PaymentTransaction to delete.
   */
  where: Prisma.PaymentTransactionWhereUniqueInput
}

/**
 * PaymentTransaction deleteMany
 */
export type PaymentTransactionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentTransactions to delete
   */
  where?: Prisma.PaymentTransactionWhereInput
  /**
   * Limit how many PaymentTransactions to delete.
   */
  limit?: number
}

/**
 * PaymentTransaction.order
 */
export type PaymentTransaction$orderArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Order
   */
  select?: Prisma.OrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Order
   */
  omit?: Prisma.OrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderInclude<ExtArgs> | null
  where?: Prisma.OrderWhereInput
}

/**
 * PaymentTransaction.freelanceOrder
 */
export type PaymentTransaction$freelanceOrderArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderInclude<ExtArgs> | null
  where?: Prisma.FreelanceOrderWhereInput
}

/**
 * PaymentTransaction.postTransactions
 */
export type PaymentTransaction$postTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionInclude<ExtArgs> | null
  where?: Prisma.PostTransactionWhereInput
  orderBy?: Prisma.PostTransactionOrderByWithRelationInput | Prisma.PostTransactionOrderByWithRelationInput[]
  cursor?: Prisma.PostTransactionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PostTransactionScalarFieldEnum | Prisma.PostTransactionScalarFieldEnum[]
}

/**
 * PaymentTransaction without action
 */
export type PaymentTransactionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionInclude<ExtArgs> | null
}
