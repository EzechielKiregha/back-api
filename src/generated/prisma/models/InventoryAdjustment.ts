
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `InventoryAdjustment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model InventoryAdjustment
 * 
 */
export type InventoryAdjustmentModel = runtime.Types.Result.DefaultSelection<Prisma.$InventoryAdjustmentPayload>

export type AggregateInventoryAdjustment = {
  _count: InventoryAdjustmentCountAggregateOutputType | null
  _avg: InventoryAdjustmentAvgAggregateOutputType | null
  _sum: InventoryAdjustmentSumAggregateOutputType | null
  _min: InventoryAdjustmentMinAggregateOutputType | null
  _max: InventoryAdjustmentMaxAggregateOutputType | null
}

export type InventoryAdjustmentAvgAggregateOutputType = {
  quantity: number | null
}

export type InventoryAdjustmentSumAggregateOutputType = {
  quantity: number | null
}

export type InventoryAdjustmentMinAggregateOutputType = {
  id: string | null
  productId: string | null
  storeId: string | null
  adjustmentType: $Enums.AdjustmentType | null
  quantity: number | null
  reason: string | null
  createdAt: Date | null
}

export type InventoryAdjustmentMaxAggregateOutputType = {
  id: string | null
  productId: string | null
  storeId: string | null
  adjustmentType: $Enums.AdjustmentType | null
  quantity: number | null
  reason: string | null
  createdAt: Date | null
}

export type InventoryAdjustmentCountAggregateOutputType = {
  id: number
  productId: number
  storeId: number
  adjustmentType: number
  quantity: number
  reason: number
  createdAt: number
  _all: number
}


export type InventoryAdjustmentAvgAggregateInputType = {
  quantity?: true
}

export type InventoryAdjustmentSumAggregateInputType = {
  quantity?: true
}

export type InventoryAdjustmentMinAggregateInputType = {
  id?: true
  productId?: true
  storeId?: true
  adjustmentType?: true
  quantity?: true
  reason?: true
  createdAt?: true
}

export type InventoryAdjustmentMaxAggregateInputType = {
  id?: true
  productId?: true
  storeId?: true
  adjustmentType?: true
  quantity?: true
  reason?: true
  createdAt?: true
}

export type InventoryAdjustmentCountAggregateInputType = {
  id?: true
  productId?: true
  storeId?: true
  adjustmentType?: true
  quantity?: true
  reason?: true
  createdAt?: true
  _all?: true
}

export type InventoryAdjustmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InventoryAdjustment to aggregate.
   */
  where?: Prisma.InventoryAdjustmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InventoryAdjustments to fetch.
   */
  orderBy?: Prisma.InventoryAdjustmentOrderByWithRelationInput | Prisma.InventoryAdjustmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InventoryAdjustmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InventoryAdjustments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InventoryAdjustments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned InventoryAdjustments
  **/
  _count?: true | InventoryAdjustmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: InventoryAdjustmentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: InventoryAdjustmentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InventoryAdjustmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InventoryAdjustmentMaxAggregateInputType
}

export type GetInventoryAdjustmentAggregateType<T extends InventoryAdjustmentAggregateArgs> = {
      [P in keyof T & keyof AggregateInventoryAdjustment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInventoryAdjustment[P]>
    : Prisma.GetScalarType<T[P], AggregateInventoryAdjustment[P]>
}




export type InventoryAdjustmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InventoryAdjustmentWhereInput
  orderBy?: Prisma.InventoryAdjustmentOrderByWithAggregationInput | Prisma.InventoryAdjustmentOrderByWithAggregationInput[]
  by: Prisma.InventoryAdjustmentScalarFieldEnum[] | Prisma.InventoryAdjustmentScalarFieldEnum
  having?: Prisma.InventoryAdjustmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InventoryAdjustmentCountAggregateInputType | true
  _avg?: InventoryAdjustmentAvgAggregateInputType
  _sum?: InventoryAdjustmentSumAggregateInputType
  _min?: InventoryAdjustmentMinAggregateInputType
  _max?: InventoryAdjustmentMaxAggregateInputType
}

export type InventoryAdjustmentGroupByOutputType = {
  id: string
  productId: string
  storeId: string
  adjustmentType: $Enums.AdjustmentType
  quantity: number
  reason: string | null
  createdAt: Date
  _count: InventoryAdjustmentCountAggregateOutputType | null
  _avg: InventoryAdjustmentAvgAggregateOutputType | null
  _sum: InventoryAdjustmentSumAggregateOutputType | null
  _min: InventoryAdjustmentMinAggregateOutputType | null
  _max: InventoryAdjustmentMaxAggregateOutputType | null
}

type GetInventoryAdjustmentGroupByPayload<T extends InventoryAdjustmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InventoryAdjustmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InventoryAdjustmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InventoryAdjustmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InventoryAdjustmentGroupByOutputType[P]>
      }
    >
  > 



export type InventoryAdjustmentWhereInput = {
  AND?: Prisma.InventoryAdjustmentWhereInput | Prisma.InventoryAdjustmentWhereInput[]
  OR?: Prisma.InventoryAdjustmentWhereInput[]
  NOT?: Prisma.InventoryAdjustmentWhereInput | Prisma.InventoryAdjustmentWhereInput[]
  id?: Prisma.StringFilter<"InventoryAdjustment"> | string
  productId?: Prisma.StringFilter<"InventoryAdjustment"> | string
  storeId?: Prisma.StringFilter<"InventoryAdjustment"> | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFilter<"InventoryAdjustment"> | $Enums.AdjustmentType
  quantity?: Prisma.IntFilter<"InventoryAdjustment"> | number
  reason?: Prisma.StringNullableFilter<"InventoryAdjustment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"InventoryAdjustment"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  store?: Prisma.XOR<Prisma.StoreScalarRelationFilter, Prisma.StoreWhereInput>
}

export type InventoryAdjustmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  adjustmentType?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reason?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
  store?: Prisma.StoreOrderByWithRelationInput
}

export type InventoryAdjustmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.InventoryAdjustmentWhereInput | Prisma.InventoryAdjustmentWhereInput[]
  OR?: Prisma.InventoryAdjustmentWhereInput[]
  NOT?: Prisma.InventoryAdjustmentWhereInput | Prisma.InventoryAdjustmentWhereInput[]
  productId?: Prisma.StringFilter<"InventoryAdjustment"> | string
  storeId?: Prisma.StringFilter<"InventoryAdjustment"> | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFilter<"InventoryAdjustment"> | $Enums.AdjustmentType
  quantity?: Prisma.IntFilter<"InventoryAdjustment"> | number
  reason?: Prisma.StringNullableFilter<"InventoryAdjustment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"InventoryAdjustment"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  store?: Prisma.XOR<Prisma.StoreScalarRelationFilter, Prisma.StoreWhereInput>
}, "id">

export type InventoryAdjustmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  adjustmentType?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reason?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.InventoryAdjustmentCountOrderByAggregateInput
  _avg?: Prisma.InventoryAdjustmentAvgOrderByAggregateInput
  _max?: Prisma.InventoryAdjustmentMaxOrderByAggregateInput
  _min?: Prisma.InventoryAdjustmentMinOrderByAggregateInput
  _sum?: Prisma.InventoryAdjustmentSumOrderByAggregateInput
}

export type InventoryAdjustmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.InventoryAdjustmentScalarWhereWithAggregatesInput | Prisma.InventoryAdjustmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.InventoryAdjustmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InventoryAdjustmentScalarWhereWithAggregatesInput | Prisma.InventoryAdjustmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"InventoryAdjustment"> | string
  productId?: Prisma.StringWithAggregatesFilter<"InventoryAdjustment"> | string
  storeId?: Prisma.StringWithAggregatesFilter<"InventoryAdjustment"> | string
  adjustmentType?: Prisma.EnumAdjustmentTypeWithAggregatesFilter<"InventoryAdjustment"> | $Enums.AdjustmentType
  quantity?: Prisma.IntWithAggregatesFilter<"InventoryAdjustment"> | number
  reason?: Prisma.StringNullableWithAggregatesFilter<"InventoryAdjustment"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"InventoryAdjustment"> | Date | string
}

export type InventoryAdjustmentCreateInput = {
  id?: string
  adjustmentType: $Enums.AdjustmentType
  quantity: number
  reason?: string | null
  createdAt?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutInventoryAdjustmentInput
  store: Prisma.StoreCreateNestedOneWithoutInventoryAdjustmentsInput
}

export type InventoryAdjustmentUncheckedCreateInput = {
  id?: string
  productId: string
  storeId: string
  adjustmentType: $Enums.AdjustmentType
  quantity: number
  reason?: string | null
  createdAt?: Date | string
}

export type InventoryAdjustmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFieldUpdateOperationsInput | $Enums.AdjustmentType
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutInventoryAdjustmentNestedInput
  store?: Prisma.StoreUpdateOneRequiredWithoutInventoryAdjustmentsNestedInput
}

export type InventoryAdjustmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  storeId?: Prisma.StringFieldUpdateOperationsInput | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFieldUpdateOperationsInput | $Enums.AdjustmentType
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryAdjustmentCreateManyInput = {
  id?: string
  productId: string
  storeId: string
  adjustmentType: $Enums.AdjustmentType
  quantity: number
  reason?: string | null
  createdAt?: Date | string
}

export type InventoryAdjustmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFieldUpdateOperationsInput | $Enums.AdjustmentType
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryAdjustmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  storeId?: Prisma.StringFieldUpdateOperationsInput | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFieldUpdateOperationsInput | $Enums.AdjustmentType
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryAdjustmentListRelationFilter = {
  every?: Prisma.InventoryAdjustmentWhereInput
  some?: Prisma.InventoryAdjustmentWhereInput
  none?: Prisma.InventoryAdjustmentWhereInput
}

export type InventoryAdjustmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type InventoryAdjustmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  adjustmentType?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type InventoryAdjustmentAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type InventoryAdjustmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  adjustmentType?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type InventoryAdjustmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  adjustmentType?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type InventoryAdjustmentSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type InventoryAdjustmentCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.InventoryAdjustmentCreateWithoutProductInput, Prisma.InventoryAdjustmentUncheckedCreateWithoutProductInput> | Prisma.InventoryAdjustmentCreateWithoutProductInput[] | Prisma.InventoryAdjustmentUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.InventoryAdjustmentCreateOrConnectWithoutProductInput | Prisma.InventoryAdjustmentCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.InventoryAdjustmentCreateManyProductInputEnvelope
  connect?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
}

export type InventoryAdjustmentUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.InventoryAdjustmentCreateWithoutProductInput, Prisma.InventoryAdjustmentUncheckedCreateWithoutProductInput> | Prisma.InventoryAdjustmentCreateWithoutProductInput[] | Prisma.InventoryAdjustmentUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.InventoryAdjustmentCreateOrConnectWithoutProductInput | Prisma.InventoryAdjustmentCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.InventoryAdjustmentCreateManyProductInputEnvelope
  connect?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
}

export type InventoryAdjustmentUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.InventoryAdjustmentCreateWithoutProductInput, Prisma.InventoryAdjustmentUncheckedCreateWithoutProductInput> | Prisma.InventoryAdjustmentCreateWithoutProductInput[] | Prisma.InventoryAdjustmentUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.InventoryAdjustmentCreateOrConnectWithoutProductInput | Prisma.InventoryAdjustmentCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.InventoryAdjustmentUpsertWithWhereUniqueWithoutProductInput | Prisma.InventoryAdjustmentUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.InventoryAdjustmentCreateManyProductInputEnvelope
  set?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  disconnect?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  delete?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  connect?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  update?: Prisma.InventoryAdjustmentUpdateWithWhereUniqueWithoutProductInput | Prisma.InventoryAdjustmentUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.InventoryAdjustmentUpdateManyWithWhereWithoutProductInput | Prisma.InventoryAdjustmentUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.InventoryAdjustmentScalarWhereInput | Prisma.InventoryAdjustmentScalarWhereInput[]
}

export type InventoryAdjustmentUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.InventoryAdjustmentCreateWithoutProductInput, Prisma.InventoryAdjustmentUncheckedCreateWithoutProductInput> | Prisma.InventoryAdjustmentCreateWithoutProductInput[] | Prisma.InventoryAdjustmentUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.InventoryAdjustmentCreateOrConnectWithoutProductInput | Prisma.InventoryAdjustmentCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.InventoryAdjustmentUpsertWithWhereUniqueWithoutProductInput | Prisma.InventoryAdjustmentUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.InventoryAdjustmentCreateManyProductInputEnvelope
  set?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  disconnect?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  delete?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  connect?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  update?: Prisma.InventoryAdjustmentUpdateWithWhereUniqueWithoutProductInput | Prisma.InventoryAdjustmentUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.InventoryAdjustmentUpdateManyWithWhereWithoutProductInput | Prisma.InventoryAdjustmentUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.InventoryAdjustmentScalarWhereInput | Prisma.InventoryAdjustmentScalarWhereInput[]
}

export type InventoryAdjustmentCreateNestedManyWithoutStoreInput = {
  create?: Prisma.XOR<Prisma.InventoryAdjustmentCreateWithoutStoreInput, Prisma.InventoryAdjustmentUncheckedCreateWithoutStoreInput> | Prisma.InventoryAdjustmentCreateWithoutStoreInput[] | Prisma.InventoryAdjustmentUncheckedCreateWithoutStoreInput[]
  connectOrCreate?: Prisma.InventoryAdjustmentCreateOrConnectWithoutStoreInput | Prisma.InventoryAdjustmentCreateOrConnectWithoutStoreInput[]
  createMany?: Prisma.InventoryAdjustmentCreateManyStoreInputEnvelope
  connect?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
}

export type InventoryAdjustmentUncheckedCreateNestedManyWithoutStoreInput = {
  create?: Prisma.XOR<Prisma.InventoryAdjustmentCreateWithoutStoreInput, Prisma.InventoryAdjustmentUncheckedCreateWithoutStoreInput> | Prisma.InventoryAdjustmentCreateWithoutStoreInput[] | Prisma.InventoryAdjustmentUncheckedCreateWithoutStoreInput[]
  connectOrCreate?: Prisma.InventoryAdjustmentCreateOrConnectWithoutStoreInput | Prisma.InventoryAdjustmentCreateOrConnectWithoutStoreInput[]
  createMany?: Prisma.InventoryAdjustmentCreateManyStoreInputEnvelope
  connect?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
}

export type InventoryAdjustmentUpdateManyWithoutStoreNestedInput = {
  create?: Prisma.XOR<Prisma.InventoryAdjustmentCreateWithoutStoreInput, Prisma.InventoryAdjustmentUncheckedCreateWithoutStoreInput> | Prisma.InventoryAdjustmentCreateWithoutStoreInput[] | Prisma.InventoryAdjustmentUncheckedCreateWithoutStoreInput[]
  connectOrCreate?: Prisma.InventoryAdjustmentCreateOrConnectWithoutStoreInput | Prisma.InventoryAdjustmentCreateOrConnectWithoutStoreInput[]
  upsert?: Prisma.InventoryAdjustmentUpsertWithWhereUniqueWithoutStoreInput | Prisma.InventoryAdjustmentUpsertWithWhereUniqueWithoutStoreInput[]
  createMany?: Prisma.InventoryAdjustmentCreateManyStoreInputEnvelope
  set?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  disconnect?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  delete?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  connect?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  update?: Prisma.InventoryAdjustmentUpdateWithWhereUniqueWithoutStoreInput | Prisma.InventoryAdjustmentUpdateWithWhereUniqueWithoutStoreInput[]
  updateMany?: Prisma.InventoryAdjustmentUpdateManyWithWhereWithoutStoreInput | Prisma.InventoryAdjustmentUpdateManyWithWhereWithoutStoreInput[]
  deleteMany?: Prisma.InventoryAdjustmentScalarWhereInput | Prisma.InventoryAdjustmentScalarWhereInput[]
}

export type InventoryAdjustmentUncheckedUpdateManyWithoutStoreNestedInput = {
  create?: Prisma.XOR<Prisma.InventoryAdjustmentCreateWithoutStoreInput, Prisma.InventoryAdjustmentUncheckedCreateWithoutStoreInput> | Prisma.InventoryAdjustmentCreateWithoutStoreInput[] | Prisma.InventoryAdjustmentUncheckedCreateWithoutStoreInput[]
  connectOrCreate?: Prisma.InventoryAdjustmentCreateOrConnectWithoutStoreInput | Prisma.InventoryAdjustmentCreateOrConnectWithoutStoreInput[]
  upsert?: Prisma.InventoryAdjustmentUpsertWithWhereUniqueWithoutStoreInput | Prisma.InventoryAdjustmentUpsertWithWhereUniqueWithoutStoreInput[]
  createMany?: Prisma.InventoryAdjustmentCreateManyStoreInputEnvelope
  set?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  disconnect?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  delete?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  connect?: Prisma.InventoryAdjustmentWhereUniqueInput | Prisma.InventoryAdjustmentWhereUniqueInput[]
  update?: Prisma.InventoryAdjustmentUpdateWithWhereUniqueWithoutStoreInput | Prisma.InventoryAdjustmentUpdateWithWhereUniqueWithoutStoreInput[]
  updateMany?: Prisma.InventoryAdjustmentUpdateManyWithWhereWithoutStoreInput | Prisma.InventoryAdjustmentUpdateManyWithWhereWithoutStoreInput[]
  deleteMany?: Prisma.InventoryAdjustmentScalarWhereInput | Prisma.InventoryAdjustmentScalarWhereInput[]
}

export type EnumAdjustmentTypeFieldUpdateOperationsInput = {
  set?: $Enums.AdjustmentType
}

export type InventoryAdjustmentCreateWithoutProductInput = {
  id?: string
  adjustmentType: $Enums.AdjustmentType
  quantity: number
  reason?: string | null
  createdAt?: Date | string
  store: Prisma.StoreCreateNestedOneWithoutInventoryAdjustmentsInput
}

export type InventoryAdjustmentUncheckedCreateWithoutProductInput = {
  id?: string
  storeId: string
  adjustmentType: $Enums.AdjustmentType
  quantity: number
  reason?: string | null
  createdAt?: Date | string
}

export type InventoryAdjustmentCreateOrConnectWithoutProductInput = {
  where: Prisma.InventoryAdjustmentWhereUniqueInput
  create: Prisma.XOR<Prisma.InventoryAdjustmentCreateWithoutProductInput, Prisma.InventoryAdjustmentUncheckedCreateWithoutProductInput>
}

export type InventoryAdjustmentCreateManyProductInputEnvelope = {
  data: Prisma.InventoryAdjustmentCreateManyProductInput | Prisma.InventoryAdjustmentCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type InventoryAdjustmentUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.InventoryAdjustmentWhereUniqueInput
  update: Prisma.XOR<Prisma.InventoryAdjustmentUpdateWithoutProductInput, Prisma.InventoryAdjustmentUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.InventoryAdjustmentCreateWithoutProductInput, Prisma.InventoryAdjustmentUncheckedCreateWithoutProductInput>
}

export type InventoryAdjustmentUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.InventoryAdjustmentWhereUniqueInput
  data: Prisma.XOR<Prisma.InventoryAdjustmentUpdateWithoutProductInput, Prisma.InventoryAdjustmentUncheckedUpdateWithoutProductInput>
}

export type InventoryAdjustmentUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.InventoryAdjustmentScalarWhereInput
  data: Prisma.XOR<Prisma.InventoryAdjustmentUpdateManyMutationInput, Prisma.InventoryAdjustmentUncheckedUpdateManyWithoutProductInput>
}

export type InventoryAdjustmentScalarWhereInput = {
  AND?: Prisma.InventoryAdjustmentScalarWhereInput | Prisma.InventoryAdjustmentScalarWhereInput[]
  OR?: Prisma.InventoryAdjustmentScalarWhereInput[]
  NOT?: Prisma.InventoryAdjustmentScalarWhereInput | Prisma.InventoryAdjustmentScalarWhereInput[]
  id?: Prisma.StringFilter<"InventoryAdjustment"> | string
  productId?: Prisma.StringFilter<"InventoryAdjustment"> | string
  storeId?: Prisma.StringFilter<"InventoryAdjustment"> | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFilter<"InventoryAdjustment"> | $Enums.AdjustmentType
  quantity?: Prisma.IntFilter<"InventoryAdjustment"> | number
  reason?: Prisma.StringNullableFilter<"InventoryAdjustment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"InventoryAdjustment"> | Date | string
}

export type InventoryAdjustmentCreateWithoutStoreInput = {
  id?: string
  adjustmentType: $Enums.AdjustmentType
  quantity: number
  reason?: string | null
  createdAt?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutInventoryAdjustmentInput
}

export type InventoryAdjustmentUncheckedCreateWithoutStoreInput = {
  id?: string
  productId: string
  adjustmentType: $Enums.AdjustmentType
  quantity: number
  reason?: string | null
  createdAt?: Date | string
}

export type InventoryAdjustmentCreateOrConnectWithoutStoreInput = {
  where: Prisma.InventoryAdjustmentWhereUniqueInput
  create: Prisma.XOR<Prisma.InventoryAdjustmentCreateWithoutStoreInput, Prisma.InventoryAdjustmentUncheckedCreateWithoutStoreInput>
}

export type InventoryAdjustmentCreateManyStoreInputEnvelope = {
  data: Prisma.InventoryAdjustmentCreateManyStoreInput | Prisma.InventoryAdjustmentCreateManyStoreInput[]
  skipDuplicates?: boolean
}

export type InventoryAdjustmentUpsertWithWhereUniqueWithoutStoreInput = {
  where: Prisma.InventoryAdjustmentWhereUniqueInput
  update: Prisma.XOR<Prisma.InventoryAdjustmentUpdateWithoutStoreInput, Prisma.InventoryAdjustmentUncheckedUpdateWithoutStoreInput>
  create: Prisma.XOR<Prisma.InventoryAdjustmentCreateWithoutStoreInput, Prisma.InventoryAdjustmentUncheckedCreateWithoutStoreInput>
}

export type InventoryAdjustmentUpdateWithWhereUniqueWithoutStoreInput = {
  where: Prisma.InventoryAdjustmentWhereUniqueInput
  data: Prisma.XOR<Prisma.InventoryAdjustmentUpdateWithoutStoreInput, Prisma.InventoryAdjustmentUncheckedUpdateWithoutStoreInput>
}

export type InventoryAdjustmentUpdateManyWithWhereWithoutStoreInput = {
  where: Prisma.InventoryAdjustmentScalarWhereInput
  data: Prisma.XOR<Prisma.InventoryAdjustmentUpdateManyMutationInput, Prisma.InventoryAdjustmentUncheckedUpdateManyWithoutStoreInput>
}

export type InventoryAdjustmentCreateManyProductInput = {
  id?: string
  storeId: string
  adjustmentType: $Enums.AdjustmentType
  quantity: number
  reason?: string | null
  createdAt?: Date | string
}

export type InventoryAdjustmentUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFieldUpdateOperationsInput | $Enums.AdjustmentType
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  store?: Prisma.StoreUpdateOneRequiredWithoutInventoryAdjustmentsNestedInput
}

export type InventoryAdjustmentUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  storeId?: Prisma.StringFieldUpdateOperationsInput | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFieldUpdateOperationsInput | $Enums.AdjustmentType
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryAdjustmentUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  storeId?: Prisma.StringFieldUpdateOperationsInput | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFieldUpdateOperationsInput | $Enums.AdjustmentType
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryAdjustmentCreateManyStoreInput = {
  id?: string
  productId: string
  adjustmentType: $Enums.AdjustmentType
  quantity: number
  reason?: string | null
  createdAt?: Date | string
}

export type InventoryAdjustmentUpdateWithoutStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFieldUpdateOperationsInput | $Enums.AdjustmentType
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutInventoryAdjustmentNestedInput
}

export type InventoryAdjustmentUncheckedUpdateWithoutStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFieldUpdateOperationsInput | $Enums.AdjustmentType
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryAdjustmentUncheckedUpdateManyWithoutStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  adjustmentType?: Prisma.EnumAdjustmentTypeFieldUpdateOperationsInput | $Enums.AdjustmentType
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type InventoryAdjustmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  storeId?: boolean
  adjustmentType?: boolean
  quantity?: boolean
  reason?: boolean
  createdAt?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inventoryAdjustment"]>

export type InventoryAdjustmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  storeId?: boolean
  adjustmentType?: boolean
  quantity?: boolean
  reason?: boolean
  createdAt?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inventoryAdjustment"]>

export type InventoryAdjustmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  storeId?: boolean
  adjustmentType?: boolean
  quantity?: boolean
  reason?: boolean
  createdAt?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inventoryAdjustment"]>

export type InventoryAdjustmentSelectScalar = {
  id?: boolean
  productId?: boolean
  storeId?: boolean
  adjustmentType?: boolean
  quantity?: boolean
  reason?: boolean
  createdAt?: boolean
}

export type InventoryAdjustmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "storeId" | "adjustmentType" | "quantity" | "reason" | "createdAt", ExtArgs["result"]["inventoryAdjustment"]>
export type InventoryAdjustmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}
export type InventoryAdjustmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}
export type InventoryAdjustmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}

export type $InventoryAdjustmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "InventoryAdjustment"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs>
    store: Prisma.$StorePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    productId: string
    storeId: string
    adjustmentType: $Enums.AdjustmentType
    quantity: number
    reason: string | null
    createdAt: Date
  }, ExtArgs["result"]["inventoryAdjustment"]>
  composites: {}
}

export type InventoryAdjustmentGetPayload<S extends boolean | null | undefined | InventoryAdjustmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload, S>

export type InventoryAdjustmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InventoryAdjustmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InventoryAdjustmentCountAggregateInputType | true
  }

export interface InventoryAdjustmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryAdjustment'], meta: { name: 'InventoryAdjustment' } }
  /**
   * Find zero or one InventoryAdjustment that matches the filter.
   * @param {InventoryAdjustmentFindUniqueArgs} args - Arguments to find a InventoryAdjustment
   * @example
   * // Get one InventoryAdjustment
   * const inventoryAdjustment = await prisma.inventoryAdjustment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InventoryAdjustmentFindUniqueArgs>(args: Prisma.SelectSubset<T, InventoryAdjustmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InventoryAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InventoryAdjustment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InventoryAdjustmentFindUniqueOrThrowArgs} args - Arguments to find a InventoryAdjustment
   * @example
   * // Get one InventoryAdjustment
   * const inventoryAdjustment = await prisma.inventoryAdjustment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InventoryAdjustmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InventoryAdjustmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InventoryAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InventoryAdjustment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAdjustmentFindFirstArgs} args - Arguments to find a InventoryAdjustment
   * @example
   * // Get one InventoryAdjustment
   * const inventoryAdjustment = await prisma.inventoryAdjustment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InventoryAdjustmentFindFirstArgs>(args?: Prisma.SelectSubset<T, InventoryAdjustmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__InventoryAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InventoryAdjustment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAdjustmentFindFirstOrThrowArgs} args - Arguments to find a InventoryAdjustment
   * @example
   * // Get one InventoryAdjustment
   * const inventoryAdjustment = await prisma.inventoryAdjustment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InventoryAdjustmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InventoryAdjustmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InventoryAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InventoryAdjustments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAdjustmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InventoryAdjustments
   * const inventoryAdjustments = await prisma.inventoryAdjustment.findMany()
   * 
   * // Get first 10 InventoryAdjustments
   * const inventoryAdjustments = await prisma.inventoryAdjustment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const inventoryAdjustmentWithIdOnly = await prisma.inventoryAdjustment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InventoryAdjustmentFindManyArgs>(args?: Prisma.SelectSubset<T, InventoryAdjustmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InventoryAdjustment.
   * @param {InventoryAdjustmentCreateArgs} args - Arguments to create a InventoryAdjustment.
   * @example
   * // Create one InventoryAdjustment
   * const InventoryAdjustment = await prisma.inventoryAdjustment.create({
   *   data: {
   *     // ... data to create a InventoryAdjustment
   *   }
   * })
   * 
   */
  create<T extends InventoryAdjustmentCreateArgs>(args: Prisma.SelectSubset<T, InventoryAdjustmentCreateArgs<ExtArgs>>): Prisma.Prisma__InventoryAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InventoryAdjustments.
   * @param {InventoryAdjustmentCreateManyArgs} args - Arguments to create many InventoryAdjustments.
   * @example
   * // Create many InventoryAdjustments
   * const inventoryAdjustment = await prisma.inventoryAdjustment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InventoryAdjustmentCreateManyArgs>(args?: Prisma.SelectSubset<T, InventoryAdjustmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many InventoryAdjustments and returns the data saved in the database.
   * @param {InventoryAdjustmentCreateManyAndReturnArgs} args - Arguments to create many InventoryAdjustments.
   * @example
   * // Create many InventoryAdjustments
   * const inventoryAdjustment = await prisma.inventoryAdjustment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many InventoryAdjustments and only return the `id`
   * const inventoryAdjustmentWithIdOnly = await prisma.inventoryAdjustment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InventoryAdjustmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InventoryAdjustmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a InventoryAdjustment.
   * @param {InventoryAdjustmentDeleteArgs} args - Arguments to delete one InventoryAdjustment.
   * @example
   * // Delete one InventoryAdjustment
   * const InventoryAdjustment = await prisma.inventoryAdjustment.delete({
   *   where: {
   *     // ... filter to delete one InventoryAdjustment
   *   }
   * })
   * 
   */
  delete<T extends InventoryAdjustmentDeleteArgs>(args: Prisma.SelectSubset<T, InventoryAdjustmentDeleteArgs<ExtArgs>>): Prisma.Prisma__InventoryAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InventoryAdjustment.
   * @param {InventoryAdjustmentUpdateArgs} args - Arguments to update one InventoryAdjustment.
   * @example
   * // Update one InventoryAdjustment
   * const inventoryAdjustment = await prisma.inventoryAdjustment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InventoryAdjustmentUpdateArgs>(args: Prisma.SelectSubset<T, InventoryAdjustmentUpdateArgs<ExtArgs>>): Prisma.Prisma__InventoryAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InventoryAdjustments.
   * @param {InventoryAdjustmentDeleteManyArgs} args - Arguments to filter InventoryAdjustments to delete.
   * @example
   * // Delete a few InventoryAdjustments
   * const { count } = await prisma.inventoryAdjustment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InventoryAdjustmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, InventoryAdjustmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InventoryAdjustments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAdjustmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InventoryAdjustments
   * const inventoryAdjustment = await prisma.inventoryAdjustment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InventoryAdjustmentUpdateManyArgs>(args: Prisma.SelectSubset<T, InventoryAdjustmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InventoryAdjustments and returns the data updated in the database.
   * @param {InventoryAdjustmentUpdateManyAndReturnArgs} args - Arguments to update many InventoryAdjustments.
   * @example
   * // Update many InventoryAdjustments
   * const inventoryAdjustment = await prisma.inventoryAdjustment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more InventoryAdjustments and only return the `id`
   * const inventoryAdjustmentWithIdOnly = await prisma.inventoryAdjustment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InventoryAdjustmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InventoryAdjustmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one InventoryAdjustment.
   * @param {InventoryAdjustmentUpsertArgs} args - Arguments to update or create a InventoryAdjustment.
   * @example
   * // Update or create a InventoryAdjustment
   * const inventoryAdjustment = await prisma.inventoryAdjustment.upsert({
   *   create: {
   *     // ... data to create a InventoryAdjustment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InventoryAdjustment we want to update
   *   }
   * })
   */
  upsert<T extends InventoryAdjustmentUpsertArgs>(args: Prisma.SelectSubset<T, InventoryAdjustmentUpsertArgs<ExtArgs>>): Prisma.Prisma__InventoryAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of InventoryAdjustments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAdjustmentCountArgs} args - Arguments to filter InventoryAdjustments to count.
   * @example
   * // Count the number of InventoryAdjustments
   * const count = await prisma.inventoryAdjustment.count({
   *   where: {
   *     // ... the filter for the InventoryAdjustments we want to count
   *   }
   * })
  **/
  count<T extends InventoryAdjustmentCountArgs>(
    args?: Prisma.Subset<T, InventoryAdjustmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InventoryAdjustmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InventoryAdjustment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAdjustmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InventoryAdjustmentAggregateArgs>(args: Prisma.Subset<T, InventoryAdjustmentAggregateArgs>): Prisma.PrismaPromise<GetInventoryAdjustmentAggregateType<T>>

  /**
   * Group by InventoryAdjustment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAdjustmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InventoryAdjustmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InventoryAdjustmentGroupByArgs['orderBy'] }
      : { orderBy?: InventoryAdjustmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InventoryAdjustmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryAdjustmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the InventoryAdjustment model
 */
readonly fields: InventoryAdjustmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InventoryAdjustment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InventoryAdjustmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  store<T extends Prisma.StoreDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StoreDefaultArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the InventoryAdjustment model
 */
export interface InventoryAdjustmentFieldRefs {
  readonly id: Prisma.FieldRef<"InventoryAdjustment", 'String'>
  readonly productId: Prisma.FieldRef<"InventoryAdjustment", 'String'>
  readonly storeId: Prisma.FieldRef<"InventoryAdjustment", 'String'>
  readonly adjustmentType: Prisma.FieldRef<"InventoryAdjustment", 'AdjustmentType'>
  readonly quantity: Prisma.FieldRef<"InventoryAdjustment", 'Int'>
  readonly reason: Prisma.FieldRef<"InventoryAdjustment", 'String'>
  readonly createdAt: Prisma.FieldRef<"InventoryAdjustment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * InventoryAdjustment findUnique
 */
export type InventoryAdjustmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentInclude<ExtArgs> | null
  /**
   * Filter, which InventoryAdjustment to fetch.
   */
  where: Prisma.InventoryAdjustmentWhereUniqueInput
}

/**
 * InventoryAdjustment findUniqueOrThrow
 */
export type InventoryAdjustmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentInclude<ExtArgs> | null
  /**
   * Filter, which InventoryAdjustment to fetch.
   */
  where: Prisma.InventoryAdjustmentWhereUniqueInput
}

/**
 * InventoryAdjustment findFirst
 */
export type InventoryAdjustmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentInclude<ExtArgs> | null
  /**
   * Filter, which InventoryAdjustment to fetch.
   */
  where?: Prisma.InventoryAdjustmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InventoryAdjustments to fetch.
   */
  orderBy?: Prisma.InventoryAdjustmentOrderByWithRelationInput | Prisma.InventoryAdjustmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InventoryAdjustments.
   */
  cursor?: Prisma.InventoryAdjustmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InventoryAdjustments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InventoryAdjustments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InventoryAdjustments.
   */
  distinct?: Prisma.InventoryAdjustmentScalarFieldEnum | Prisma.InventoryAdjustmentScalarFieldEnum[]
}

/**
 * InventoryAdjustment findFirstOrThrow
 */
export type InventoryAdjustmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentInclude<ExtArgs> | null
  /**
   * Filter, which InventoryAdjustment to fetch.
   */
  where?: Prisma.InventoryAdjustmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InventoryAdjustments to fetch.
   */
  orderBy?: Prisma.InventoryAdjustmentOrderByWithRelationInput | Prisma.InventoryAdjustmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InventoryAdjustments.
   */
  cursor?: Prisma.InventoryAdjustmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InventoryAdjustments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InventoryAdjustments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InventoryAdjustments.
   */
  distinct?: Prisma.InventoryAdjustmentScalarFieldEnum | Prisma.InventoryAdjustmentScalarFieldEnum[]
}

/**
 * InventoryAdjustment findMany
 */
export type InventoryAdjustmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentInclude<ExtArgs> | null
  /**
   * Filter, which InventoryAdjustments to fetch.
   */
  where?: Prisma.InventoryAdjustmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InventoryAdjustments to fetch.
   */
  orderBy?: Prisma.InventoryAdjustmentOrderByWithRelationInput | Prisma.InventoryAdjustmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing InventoryAdjustments.
   */
  cursor?: Prisma.InventoryAdjustmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InventoryAdjustments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InventoryAdjustments.
   */
  skip?: number
  distinct?: Prisma.InventoryAdjustmentScalarFieldEnum | Prisma.InventoryAdjustmentScalarFieldEnum[]
}

/**
 * InventoryAdjustment create
 */
export type InventoryAdjustmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentInclude<ExtArgs> | null
  /**
   * The data needed to create a InventoryAdjustment.
   */
  data: Prisma.XOR<Prisma.InventoryAdjustmentCreateInput, Prisma.InventoryAdjustmentUncheckedCreateInput>
}

/**
 * InventoryAdjustment createMany
 */
export type InventoryAdjustmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many InventoryAdjustments.
   */
  data: Prisma.InventoryAdjustmentCreateManyInput | Prisma.InventoryAdjustmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * InventoryAdjustment createManyAndReturn
 */
export type InventoryAdjustmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * The data used to create many InventoryAdjustments.
   */
  data: Prisma.InventoryAdjustmentCreateManyInput | Prisma.InventoryAdjustmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * InventoryAdjustment update
 */
export type InventoryAdjustmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentInclude<ExtArgs> | null
  /**
   * The data needed to update a InventoryAdjustment.
   */
  data: Prisma.XOR<Prisma.InventoryAdjustmentUpdateInput, Prisma.InventoryAdjustmentUncheckedUpdateInput>
  /**
   * Choose, which InventoryAdjustment to update.
   */
  where: Prisma.InventoryAdjustmentWhereUniqueInput
}

/**
 * InventoryAdjustment updateMany
 */
export type InventoryAdjustmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update InventoryAdjustments.
   */
  data: Prisma.XOR<Prisma.InventoryAdjustmentUpdateManyMutationInput, Prisma.InventoryAdjustmentUncheckedUpdateManyInput>
  /**
   * Filter which InventoryAdjustments to update
   */
  where?: Prisma.InventoryAdjustmentWhereInput
  /**
   * Limit how many InventoryAdjustments to update.
   */
  limit?: number
}

/**
 * InventoryAdjustment updateManyAndReturn
 */
export type InventoryAdjustmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * The data used to update InventoryAdjustments.
   */
  data: Prisma.XOR<Prisma.InventoryAdjustmentUpdateManyMutationInput, Prisma.InventoryAdjustmentUncheckedUpdateManyInput>
  /**
   * Filter which InventoryAdjustments to update
   */
  where?: Prisma.InventoryAdjustmentWhereInput
  /**
   * Limit how many InventoryAdjustments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * InventoryAdjustment upsert
 */
export type InventoryAdjustmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentInclude<ExtArgs> | null
  /**
   * The filter to search for the InventoryAdjustment to update in case it exists.
   */
  where: Prisma.InventoryAdjustmentWhereUniqueInput
  /**
   * In case the InventoryAdjustment found by the `where` argument doesn't exist, create a new InventoryAdjustment with this data.
   */
  create: Prisma.XOR<Prisma.InventoryAdjustmentCreateInput, Prisma.InventoryAdjustmentUncheckedCreateInput>
  /**
   * In case the InventoryAdjustment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InventoryAdjustmentUpdateInput, Prisma.InventoryAdjustmentUncheckedUpdateInput>
}

/**
 * InventoryAdjustment delete
 */
export type InventoryAdjustmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentInclude<ExtArgs> | null
  /**
   * Filter which InventoryAdjustment to delete.
   */
  where: Prisma.InventoryAdjustmentWhereUniqueInput
}

/**
 * InventoryAdjustment deleteMany
 */
export type InventoryAdjustmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InventoryAdjustments to delete
   */
  where?: Prisma.InventoryAdjustmentWhereInput
  /**
   * Limit how many InventoryAdjustments to delete.
   */
  limit?: number
}

/**
 * InventoryAdjustment without action
 */
export type InventoryAdjustmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentInclude<ExtArgs> | null
}
