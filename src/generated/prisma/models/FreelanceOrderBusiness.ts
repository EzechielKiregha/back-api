
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FreelanceOrderBusiness` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FreelanceOrderBusiness
 * 
 */
export type FreelanceOrderBusinessModel = runtime.Types.Result.DefaultSelection<Prisma.$FreelanceOrderBusinessPayload>

export type AggregateFreelanceOrderBusiness = {
  _count: FreelanceOrderBusinessCountAggregateOutputType | null
  _min: FreelanceOrderBusinessMinAggregateOutputType | null
  _max: FreelanceOrderBusinessMaxAggregateOutputType | null
}

export type FreelanceOrderBusinessMinAggregateOutputType = {
  id: string | null
  freelanceOrderId: string | null
  businessId: string | null
  role: string | null
  assignedAt: Date | null
}

export type FreelanceOrderBusinessMaxAggregateOutputType = {
  id: string | null
  freelanceOrderId: string | null
  businessId: string | null
  role: string | null
  assignedAt: Date | null
}

export type FreelanceOrderBusinessCountAggregateOutputType = {
  id: number
  freelanceOrderId: number
  businessId: number
  role: number
  assignedAt: number
  _all: number
}


export type FreelanceOrderBusinessMinAggregateInputType = {
  id?: true
  freelanceOrderId?: true
  businessId?: true
  role?: true
  assignedAt?: true
}

export type FreelanceOrderBusinessMaxAggregateInputType = {
  id?: true
  freelanceOrderId?: true
  businessId?: true
  role?: true
  assignedAt?: true
}

export type FreelanceOrderBusinessCountAggregateInputType = {
  id?: true
  freelanceOrderId?: true
  businessId?: true
  role?: true
  assignedAt?: true
  _all?: true
}

export type FreelanceOrderBusinessAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FreelanceOrderBusiness to aggregate.
   */
  where?: Prisma.FreelanceOrderBusinessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FreelanceOrderBusinesses to fetch.
   */
  orderBy?: Prisma.FreelanceOrderBusinessOrderByWithRelationInput | Prisma.FreelanceOrderBusinessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FreelanceOrderBusinessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FreelanceOrderBusinesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FreelanceOrderBusinesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FreelanceOrderBusinesses
  **/
  _count?: true | FreelanceOrderBusinessCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FreelanceOrderBusinessMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FreelanceOrderBusinessMaxAggregateInputType
}

export type GetFreelanceOrderBusinessAggregateType<T extends FreelanceOrderBusinessAggregateArgs> = {
      [P in keyof T & keyof AggregateFreelanceOrderBusiness]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFreelanceOrderBusiness[P]>
    : Prisma.GetScalarType<T[P], AggregateFreelanceOrderBusiness[P]>
}




export type FreelanceOrderBusinessGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FreelanceOrderBusinessWhereInput
  orderBy?: Prisma.FreelanceOrderBusinessOrderByWithAggregationInput | Prisma.FreelanceOrderBusinessOrderByWithAggregationInput[]
  by: Prisma.FreelanceOrderBusinessScalarFieldEnum[] | Prisma.FreelanceOrderBusinessScalarFieldEnum
  having?: Prisma.FreelanceOrderBusinessScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FreelanceOrderBusinessCountAggregateInputType | true
  _min?: FreelanceOrderBusinessMinAggregateInputType
  _max?: FreelanceOrderBusinessMaxAggregateInputType
}

export type FreelanceOrderBusinessGroupByOutputType = {
  id: string
  freelanceOrderId: string
  businessId: string
  role: string | null
  assignedAt: Date
  _count: FreelanceOrderBusinessCountAggregateOutputType | null
  _min: FreelanceOrderBusinessMinAggregateOutputType | null
  _max: FreelanceOrderBusinessMaxAggregateOutputType | null
}

type GetFreelanceOrderBusinessGroupByPayload<T extends FreelanceOrderBusinessGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FreelanceOrderBusinessGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FreelanceOrderBusinessGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FreelanceOrderBusinessGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FreelanceOrderBusinessGroupByOutputType[P]>
      }
    >
  > 



export type FreelanceOrderBusinessWhereInput = {
  AND?: Prisma.FreelanceOrderBusinessWhereInput | Prisma.FreelanceOrderBusinessWhereInput[]
  OR?: Prisma.FreelanceOrderBusinessWhereInput[]
  NOT?: Prisma.FreelanceOrderBusinessWhereInput | Prisma.FreelanceOrderBusinessWhereInput[]
  id?: Prisma.StringFilter<"FreelanceOrderBusiness"> | string
  freelanceOrderId?: Prisma.StringFilter<"FreelanceOrderBusiness"> | string
  businessId?: Prisma.StringFilter<"FreelanceOrderBusiness"> | string
  role?: Prisma.StringNullableFilter<"FreelanceOrderBusiness"> | string | null
  assignedAt?: Prisma.DateTimeFilter<"FreelanceOrderBusiness"> | Date | string
  freelanceOrder?: Prisma.XOR<Prisma.FreelanceOrderScalarRelationFilter, Prisma.FreelanceOrderWhereInput>
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
}

export type FreelanceOrderBusinessOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  freelanceOrderId?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  role?: Prisma.SortOrderInput | Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
  freelanceOrder?: Prisma.FreelanceOrderOrderByWithRelationInput
  business?: Prisma.BusinessOrderByWithRelationInput
}

export type FreelanceOrderBusinessWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FreelanceOrderBusinessWhereInput | Prisma.FreelanceOrderBusinessWhereInput[]
  OR?: Prisma.FreelanceOrderBusinessWhereInput[]
  NOT?: Prisma.FreelanceOrderBusinessWhereInput | Prisma.FreelanceOrderBusinessWhereInput[]
  freelanceOrderId?: Prisma.StringFilter<"FreelanceOrderBusiness"> | string
  businessId?: Prisma.StringFilter<"FreelanceOrderBusiness"> | string
  role?: Prisma.StringNullableFilter<"FreelanceOrderBusiness"> | string | null
  assignedAt?: Prisma.DateTimeFilter<"FreelanceOrderBusiness"> | Date | string
  freelanceOrder?: Prisma.XOR<Prisma.FreelanceOrderScalarRelationFilter, Prisma.FreelanceOrderWhereInput>
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
}, "id">

export type FreelanceOrderBusinessOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  freelanceOrderId?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  role?: Prisma.SortOrderInput | Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
  _count?: Prisma.FreelanceOrderBusinessCountOrderByAggregateInput
  _max?: Prisma.FreelanceOrderBusinessMaxOrderByAggregateInput
  _min?: Prisma.FreelanceOrderBusinessMinOrderByAggregateInput
}

export type FreelanceOrderBusinessScalarWhereWithAggregatesInput = {
  AND?: Prisma.FreelanceOrderBusinessScalarWhereWithAggregatesInput | Prisma.FreelanceOrderBusinessScalarWhereWithAggregatesInput[]
  OR?: Prisma.FreelanceOrderBusinessScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FreelanceOrderBusinessScalarWhereWithAggregatesInput | Prisma.FreelanceOrderBusinessScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FreelanceOrderBusiness"> | string
  freelanceOrderId?: Prisma.StringWithAggregatesFilter<"FreelanceOrderBusiness"> | string
  businessId?: Prisma.StringWithAggregatesFilter<"FreelanceOrderBusiness"> | string
  role?: Prisma.StringNullableWithAggregatesFilter<"FreelanceOrderBusiness"> | string | null
  assignedAt?: Prisma.DateTimeWithAggregatesFilter<"FreelanceOrderBusiness"> | Date | string
}

export type FreelanceOrderBusinessCreateInput = {
  id?: string
  role?: string | null
  assignedAt?: Date | string
  freelanceOrder: Prisma.FreelanceOrderCreateNestedOneWithoutFreelanceOrderBusinessInput
  business: Prisma.BusinessCreateNestedOneWithoutFreelanceOrderBusinessInput
}

export type FreelanceOrderBusinessUncheckedCreateInput = {
  id?: string
  freelanceOrderId: string
  businessId: string
  role?: string | null
  assignedAt?: Date | string
}

export type FreelanceOrderBusinessUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelanceOrder?: Prisma.FreelanceOrderUpdateOneRequiredWithoutFreelanceOrderBusinessNestedInput
  business?: Prisma.BusinessUpdateOneRequiredWithoutFreelanceOrderBusinessNestedInput
}

export type FreelanceOrderBusinessUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  freelanceOrderId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceOrderBusinessCreateManyInput = {
  id?: string
  freelanceOrderId: string
  businessId: string
  role?: string | null
  assignedAt?: Date | string
}

export type FreelanceOrderBusinessUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceOrderBusinessUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  freelanceOrderId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceOrderBusinessListRelationFilter = {
  every?: Prisma.FreelanceOrderBusinessWhereInput
  some?: Prisma.FreelanceOrderBusinessWhereInput
  none?: Prisma.FreelanceOrderBusinessWhereInput
}

export type FreelanceOrderBusinessOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FreelanceOrderBusinessCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  freelanceOrderId?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
}

export type FreelanceOrderBusinessMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  freelanceOrderId?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
}

export type FreelanceOrderBusinessMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  freelanceOrderId?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
}

export type FreelanceOrderBusinessCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateWithoutBusinessInput, Prisma.FreelanceOrderBusinessUncheckedCreateWithoutBusinessInput> | Prisma.FreelanceOrderBusinessCreateWithoutBusinessInput[] | Prisma.FreelanceOrderBusinessUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.FreelanceOrderBusinessCreateOrConnectWithoutBusinessInput | Prisma.FreelanceOrderBusinessCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.FreelanceOrderBusinessCreateManyBusinessInputEnvelope
  connect?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
}

export type FreelanceOrderBusinessUncheckedCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateWithoutBusinessInput, Prisma.FreelanceOrderBusinessUncheckedCreateWithoutBusinessInput> | Prisma.FreelanceOrderBusinessCreateWithoutBusinessInput[] | Prisma.FreelanceOrderBusinessUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.FreelanceOrderBusinessCreateOrConnectWithoutBusinessInput | Prisma.FreelanceOrderBusinessCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.FreelanceOrderBusinessCreateManyBusinessInputEnvelope
  connect?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
}

export type FreelanceOrderBusinessUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateWithoutBusinessInput, Prisma.FreelanceOrderBusinessUncheckedCreateWithoutBusinessInput> | Prisma.FreelanceOrderBusinessCreateWithoutBusinessInput[] | Prisma.FreelanceOrderBusinessUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.FreelanceOrderBusinessCreateOrConnectWithoutBusinessInput | Prisma.FreelanceOrderBusinessCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.FreelanceOrderBusinessUpsertWithWhereUniqueWithoutBusinessInput | Prisma.FreelanceOrderBusinessUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.FreelanceOrderBusinessCreateManyBusinessInputEnvelope
  set?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  disconnect?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  delete?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  connect?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  update?: Prisma.FreelanceOrderBusinessUpdateWithWhereUniqueWithoutBusinessInput | Prisma.FreelanceOrderBusinessUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.FreelanceOrderBusinessUpdateManyWithWhereWithoutBusinessInput | Prisma.FreelanceOrderBusinessUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.FreelanceOrderBusinessScalarWhereInput | Prisma.FreelanceOrderBusinessScalarWhereInput[]
}

export type FreelanceOrderBusinessUncheckedUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateWithoutBusinessInput, Prisma.FreelanceOrderBusinessUncheckedCreateWithoutBusinessInput> | Prisma.FreelanceOrderBusinessCreateWithoutBusinessInput[] | Prisma.FreelanceOrderBusinessUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.FreelanceOrderBusinessCreateOrConnectWithoutBusinessInput | Prisma.FreelanceOrderBusinessCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.FreelanceOrderBusinessUpsertWithWhereUniqueWithoutBusinessInput | Prisma.FreelanceOrderBusinessUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.FreelanceOrderBusinessCreateManyBusinessInputEnvelope
  set?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  disconnect?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  delete?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  connect?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  update?: Prisma.FreelanceOrderBusinessUpdateWithWhereUniqueWithoutBusinessInput | Prisma.FreelanceOrderBusinessUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.FreelanceOrderBusinessUpdateManyWithWhereWithoutBusinessInput | Prisma.FreelanceOrderBusinessUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.FreelanceOrderBusinessScalarWhereInput | Prisma.FreelanceOrderBusinessScalarWhereInput[]
}

export type FreelanceOrderBusinessCreateNestedManyWithoutFreelanceOrderInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateWithoutFreelanceOrderInput, Prisma.FreelanceOrderBusinessUncheckedCreateWithoutFreelanceOrderInput> | Prisma.FreelanceOrderBusinessCreateWithoutFreelanceOrderInput[] | Prisma.FreelanceOrderBusinessUncheckedCreateWithoutFreelanceOrderInput[]
  connectOrCreate?: Prisma.FreelanceOrderBusinessCreateOrConnectWithoutFreelanceOrderInput | Prisma.FreelanceOrderBusinessCreateOrConnectWithoutFreelanceOrderInput[]
  createMany?: Prisma.FreelanceOrderBusinessCreateManyFreelanceOrderInputEnvelope
  connect?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
}

export type FreelanceOrderBusinessUncheckedCreateNestedManyWithoutFreelanceOrderInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateWithoutFreelanceOrderInput, Prisma.FreelanceOrderBusinessUncheckedCreateWithoutFreelanceOrderInput> | Prisma.FreelanceOrderBusinessCreateWithoutFreelanceOrderInput[] | Prisma.FreelanceOrderBusinessUncheckedCreateWithoutFreelanceOrderInput[]
  connectOrCreate?: Prisma.FreelanceOrderBusinessCreateOrConnectWithoutFreelanceOrderInput | Prisma.FreelanceOrderBusinessCreateOrConnectWithoutFreelanceOrderInput[]
  createMany?: Prisma.FreelanceOrderBusinessCreateManyFreelanceOrderInputEnvelope
  connect?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
}

export type FreelanceOrderBusinessUpdateManyWithoutFreelanceOrderNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateWithoutFreelanceOrderInput, Prisma.FreelanceOrderBusinessUncheckedCreateWithoutFreelanceOrderInput> | Prisma.FreelanceOrderBusinessCreateWithoutFreelanceOrderInput[] | Prisma.FreelanceOrderBusinessUncheckedCreateWithoutFreelanceOrderInput[]
  connectOrCreate?: Prisma.FreelanceOrderBusinessCreateOrConnectWithoutFreelanceOrderInput | Prisma.FreelanceOrderBusinessCreateOrConnectWithoutFreelanceOrderInput[]
  upsert?: Prisma.FreelanceOrderBusinessUpsertWithWhereUniqueWithoutFreelanceOrderInput | Prisma.FreelanceOrderBusinessUpsertWithWhereUniqueWithoutFreelanceOrderInput[]
  createMany?: Prisma.FreelanceOrderBusinessCreateManyFreelanceOrderInputEnvelope
  set?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  disconnect?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  delete?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  connect?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  update?: Prisma.FreelanceOrderBusinessUpdateWithWhereUniqueWithoutFreelanceOrderInput | Prisma.FreelanceOrderBusinessUpdateWithWhereUniqueWithoutFreelanceOrderInput[]
  updateMany?: Prisma.FreelanceOrderBusinessUpdateManyWithWhereWithoutFreelanceOrderInput | Prisma.FreelanceOrderBusinessUpdateManyWithWhereWithoutFreelanceOrderInput[]
  deleteMany?: Prisma.FreelanceOrderBusinessScalarWhereInput | Prisma.FreelanceOrderBusinessScalarWhereInput[]
}

export type FreelanceOrderBusinessUncheckedUpdateManyWithoutFreelanceOrderNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateWithoutFreelanceOrderInput, Prisma.FreelanceOrderBusinessUncheckedCreateWithoutFreelanceOrderInput> | Prisma.FreelanceOrderBusinessCreateWithoutFreelanceOrderInput[] | Prisma.FreelanceOrderBusinessUncheckedCreateWithoutFreelanceOrderInput[]
  connectOrCreate?: Prisma.FreelanceOrderBusinessCreateOrConnectWithoutFreelanceOrderInput | Prisma.FreelanceOrderBusinessCreateOrConnectWithoutFreelanceOrderInput[]
  upsert?: Prisma.FreelanceOrderBusinessUpsertWithWhereUniqueWithoutFreelanceOrderInput | Prisma.FreelanceOrderBusinessUpsertWithWhereUniqueWithoutFreelanceOrderInput[]
  createMany?: Prisma.FreelanceOrderBusinessCreateManyFreelanceOrderInputEnvelope
  set?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  disconnect?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  delete?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  connect?: Prisma.FreelanceOrderBusinessWhereUniqueInput | Prisma.FreelanceOrderBusinessWhereUniqueInput[]
  update?: Prisma.FreelanceOrderBusinessUpdateWithWhereUniqueWithoutFreelanceOrderInput | Prisma.FreelanceOrderBusinessUpdateWithWhereUniqueWithoutFreelanceOrderInput[]
  updateMany?: Prisma.FreelanceOrderBusinessUpdateManyWithWhereWithoutFreelanceOrderInput | Prisma.FreelanceOrderBusinessUpdateManyWithWhereWithoutFreelanceOrderInput[]
  deleteMany?: Prisma.FreelanceOrderBusinessScalarWhereInput | Prisma.FreelanceOrderBusinessScalarWhereInput[]
}

export type FreelanceOrderBusinessCreateWithoutBusinessInput = {
  id?: string
  role?: string | null
  assignedAt?: Date | string
  freelanceOrder: Prisma.FreelanceOrderCreateNestedOneWithoutFreelanceOrderBusinessInput
}

export type FreelanceOrderBusinessUncheckedCreateWithoutBusinessInput = {
  id?: string
  freelanceOrderId: string
  role?: string | null
  assignedAt?: Date | string
}

export type FreelanceOrderBusinessCreateOrConnectWithoutBusinessInput = {
  where: Prisma.FreelanceOrderBusinessWhereUniqueInput
  create: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateWithoutBusinessInput, Prisma.FreelanceOrderBusinessUncheckedCreateWithoutBusinessInput>
}

export type FreelanceOrderBusinessCreateManyBusinessInputEnvelope = {
  data: Prisma.FreelanceOrderBusinessCreateManyBusinessInput | Prisma.FreelanceOrderBusinessCreateManyBusinessInput[]
  skipDuplicates?: boolean
}

export type FreelanceOrderBusinessUpsertWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.FreelanceOrderBusinessWhereUniqueInput
  update: Prisma.XOR<Prisma.FreelanceOrderBusinessUpdateWithoutBusinessInput, Prisma.FreelanceOrderBusinessUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateWithoutBusinessInput, Prisma.FreelanceOrderBusinessUncheckedCreateWithoutBusinessInput>
}

export type FreelanceOrderBusinessUpdateWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.FreelanceOrderBusinessWhereUniqueInput
  data: Prisma.XOR<Prisma.FreelanceOrderBusinessUpdateWithoutBusinessInput, Prisma.FreelanceOrderBusinessUncheckedUpdateWithoutBusinessInput>
}

export type FreelanceOrderBusinessUpdateManyWithWhereWithoutBusinessInput = {
  where: Prisma.FreelanceOrderBusinessScalarWhereInput
  data: Prisma.XOR<Prisma.FreelanceOrderBusinessUpdateManyMutationInput, Prisma.FreelanceOrderBusinessUncheckedUpdateManyWithoutBusinessInput>
}

export type FreelanceOrderBusinessScalarWhereInput = {
  AND?: Prisma.FreelanceOrderBusinessScalarWhereInput | Prisma.FreelanceOrderBusinessScalarWhereInput[]
  OR?: Prisma.FreelanceOrderBusinessScalarWhereInput[]
  NOT?: Prisma.FreelanceOrderBusinessScalarWhereInput | Prisma.FreelanceOrderBusinessScalarWhereInput[]
  id?: Prisma.StringFilter<"FreelanceOrderBusiness"> | string
  freelanceOrderId?: Prisma.StringFilter<"FreelanceOrderBusiness"> | string
  businessId?: Prisma.StringFilter<"FreelanceOrderBusiness"> | string
  role?: Prisma.StringNullableFilter<"FreelanceOrderBusiness"> | string | null
  assignedAt?: Prisma.DateTimeFilter<"FreelanceOrderBusiness"> | Date | string
}

export type FreelanceOrderBusinessCreateWithoutFreelanceOrderInput = {
  id?: string
  role?: string | null
  assignedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutFreelanceOrderBusinessInput
}

export type FreelanceOrderBusinessUncheckedCreateWithoutFreelanceOrderInput = {
  id?: string
  businessId: string
  role?: string | null
  assignedAt?: Date | string
}

export type FreelanceOrderBusinessCreateOrConnectWithoutFreelanceOrderInput = {
  where: Prisma.FreelanceOrderBusinessWhereUniqueInput
  create: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateWithoutFreelanceOrderInput, Prisma.FreelanceOrderBusinessUncheckedCreateWithoutFreelanceOrderInput>
}

export type FreelanceOrderBusinessCreateManyFreelanceOrderInputEnvelope = {
  data: Prisma.FreelanceOrderBusinessCreateManyFreelanceOrderInput | Prisma.FreelanceOrderBusinessCreateManyFreelanceOrderInput[]
  skipDuplicates?: boolean
}

export type FreelanceOrderBusinessUpsertWithWhereUniqueWithoutFreelanceOrderInput = {
  where: Prisma.FreelanceOrderBusinessWhereUniqueInput
  update: Prisma.XOR<Prisma.FreelanceOrderBusinessUpdateWithoutFreelanceOrderInput, Prisma.FreelanceOrderBusinessUncheckedUpdateWithoutFreelanceOrderInput>
  create: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateWithoutFreelanceOrderInput, Prisma.FreelanceOrderBusinessUncheckedCreateWithoutFreelanceOrderInput>
}

export type FreelanceOrderBusinessUpdateWithWhereUniqueWithoutFreelanceOrderInput = {
  where: Prisma.FreelanceOrderBusinessWhereUniqueInput
  data: Prisma.XOR<Prisma.FreelanceOrderBusinessUpdateWithoutFreelanceOrderInput, Prisma.FreelanceOrderBusinessUncheckedUpdateWithoutFreelanceOrderInput>
}

export type FreelanceOrderBusinessUpdateManyWithWhereWithoutFreelanceOrderInput = {
  where: Prisma.FreelanceOrderBusinessScalarWhereInput
  data: Prisma.XOR<Prisma.FreelanceOrderBusinessUpdateManyMutationInput, Prisma.FreelanceOrderBusinessUncheckedUpdateManyWithoutFreelanceOrderInput>
}

export type FreelanceOrderBusinessCreateManyBusinessInput = {
  id?: string
  freelanceOrderId: string
  role?: string | null
  assignedAt?: Date | string
}

export type FreelanceOrderBusinessUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelanceOrder?: Prisma.FreelanceOrderUpdateOneRequiredWithoutFreelanceOrderBusinessNestedInput
}

export type FreelanceOrderBusinessUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  freelanceOrderId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceOrderBusinessUncheckedUpdateManyWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  freelanceOrderId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceOrderBusinessCreateManyFreelanceOrderInput = {
  id?: string
  businessId: string
  role?: string | null
  assignedAt?: Date | string
}

export type FreelanceOrderBusinessUpdateWithoutFreelanceOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutFreelanceOrderBusinessNestedInput
}

export type FreelanceOrderBusinessUncheckedUpdateWithoutFreelanceOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceOrderBusinessUncheckedUpdateManyWithoutFreelanceOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FreelanceOrderBusinessSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  freelanceOrderId?: boolean
  businessId?: boolean
  role?: boolean
  assignedAt?: boolean
  freelanceOrder?: boolean | Prisma.FreelanceOrderDefaultArgs<ExtArgs>
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["freelanceOrderBusiness"]>

export type FreelanceOrderBusinessSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  freelanceOrderId?: boolean
  businessId?: boolean
  role?: boolean
  assignedAt?: boolean
  freelanceOrder?: boolean | Prisma.FreelanceOrderDefaultArgs<ExtArgs>
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["freelanceOrderBusiness"]>

export type FreelanceOrderBusinessSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  freelanceOrderId?: boolean
  businessId?: boolean
  role?: boolean
  assignedAt?: boolean
  freelanceOrder?: boolean | Prisma.FreelanceOrderDefaultArgs<ExtArgs>
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["freelanceOrderBusiness"]>

export type FreelanceOrderBusinessSelectScalar = {
  id?: boolean
  freelanceOrderId?: boolean
  businessId?: boolean
  role?: boolean
  assignedAt?: boolean
}

export type FreelanceOrderBusinessOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "freelanceOrderId" | "businessId" | "role" | "assignedAt", ExtArgs["result"]["freelanceOrderBusiness"]>
export type FreelanceOrderBusinessInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  freelanceOrder?: boolean | Prisma.FreelanceOrderDefaultArgs<ExtArgs>
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}
export type FreelanceOrderBusinessIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  freelanceOrder?: boolean | Prisma.FreelanceOrderDefaultArgs<ExtArgs>
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}
export type FreelanceOrderBusinessIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  freelanceOrder?: boolean | Prisma.FreelanceOrderDefaultArgs<ExtArgs>
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}

export type $FreelanceOrderBusinessPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FreelanceOrderBusiness"
  objects: {
    freelanceOrder: Prisma.$FreelanceOrderPayload<ExtArgs>
    business: Prisma.$BusinessPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    freelanceOrderId: string
    businessId: string
    role: string | null
    assignedAt: Date
  }, ExtArgs["result"]["freelanceOrderBusiness"]>
  composites: {}
}

export type FreelanceOrderBusinessGetPayload<S extends boolean | null | undefined | FreelanceOrderBusinessDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FreelanceOrderBusinessPayload, S>

export type FreelanceOrderBusinessCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FreelanceOrderBusinessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FreelanceOrderBusinessCountAggregateInputType | true
  }

export interface FreelanceOrderBusinessDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FreelanceOrderBusiness'], meta: { name: 'FreelanceOrderBusiness' } }
  /**
   * Find zero or one FreelanceOrderBusiness that matches the filter.
   * @param {FreelanceOrderBusinessFindUniqueArgs} args - Arguments to find a FreelanceOrderBusiness
   * @example
   * // Get one FreelanceOrderBusiness
   * const freelanceOrderBusiness = await prisma.freelanceOrderBusiness.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FreelanceOrderBusinessFindUniqueArgs>(args: Prisma.SelectSubset<T, FreelanceOrderBusinessFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderBusinessClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderBusinessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FreelanceOrderBusiness that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FreelanceOrderBusinessFindUniqueOrThrowArgs} args - Arguments to find a FreelanceOrderBusiness
   * @example
   * // Get one FreelanceOrderBusiness
   * const freelanceOrderBusiness = await prisma.freelanceOrderBusiness.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FreelanceOrderBusinessFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FreelanceOrderBusinessFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderBusinessClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderBusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FreelanceOrderBusiness that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderBusinessFindFirstArgs} args - Arguments to find a FreelanceOrderBusiness
   * @example
   * // Get one FreelanceOrderBusiness
   * const freelanceOrderBusiness = await prisma.freelanceOrderBusiness.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FreelanceOrderBusinessFindFirstArgs>(args?: Prisma.SelectSubset<T, FreelanceOrderBusinessFindFirstArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderBusinessClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderBusinessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FreelanceOrderBusiness that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderBusinessFindFirstOrThrowArgs} args - Arguments to find a FreelanceOrderBusiness
   * @example
   * // Get one FreelanceOrderBusiness
   * const freelanceOrderBusiness = await prisma.freelanceOrderBusiness.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FreelanceOrderBusinessFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FreelanceOrderBusinessFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderBusinessClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderBusinessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FreelanceOrderBusinesses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderBusinessFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FreelanceOrderBusinesses
   * const freelanceOrderBusinesses = await prisma.freelanceOrderBusiness.findMany()
   * 
   * // Get first 10 FreelanceOrderBusinesses
   * const freelanceOrderBusinesses = await prisma.freelanceOrderBusiness.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const freelanceOrderBusinessWithIdOnly = await prisma.freelanceOrderBusiness.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FreelanceOrderBusinessFindManyArgs>(args?: Prisma.SelectSubset<T, FreelanceOrderBusinessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderBusinessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FreelanceOrderBusiness.
   * @param {FreelanceOrderBusinessCreateArgs} args - Arguments to create a FreelanceOrderBusiness.
   * @example
   * // Create one FreelanceOrderBusiness
   * const FreelanceOrderBusiness = await prisma.freelanceOrderBusiness.create({
   *   data: {
   *     // ... data to create a FreelanceOrderBusiness
   *   }
   * })
   * 
   */
  create<T extends FreelanceOrderBusinessCreateArgs>(args: Prisma.SelectSubset<T, FreelanceOrderBusinessCreateArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderBusinessClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderBusinessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FreelanceOrderBusinesses.
   * @param {FreelanceOrderBusinessCreateManyArgs} args - Arguments to create many FreelanceOrderBusinesses.
   * @example
   * // Create many FreelanceOrderBusinesses
   * const freelanceOrderBusiness = await prisma.freelanceOrderBusiness.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FreelanceOrderBusinessCreateManyArgs>(args?: Prisma.SelectSubset<T, FreelanceOrderBusinessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FreelanceOrderBusinesses and returns the data saved in the database.
   * @param {FreelanceOrderBusinessCreateManyAndReturnArgs} args - Arguments to create many FreelanceOrderBusinesses.
   * @example
   * // Create many FreelanceOrderBusinesses
   * const freelanceOrderBusiness = await prisma.freelanceOrderBusiness.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FreelanceOrderBusinesses and only return the `id`
   * const freelanceOrderBusinessWithIdOnly = await prisma.freelanceOrderBusiness.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FreelanceOrderBusinessCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FreelanceOrderBusinessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderBusinessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FreelanceOrderBusiness.
   * @param {FreelanceOrderBusinessDeleteArgs} args - Arguments to delete one FreelanceOrderBusiness.
   * @example
   * // Delete one FreelanceOrderBusiness
   * const FreelanceOrderBusiness = await prisma.freelanceOrderBusiness.delete({
   *   where: {
   *     // ... filter to delete one FreelanceOrderBusiness
   *   }
   * })
   * 
   */
  delete<T extends FreelanceOrderBusinessDeleteArgs>(args: Prisma.SelectSubset<T, FreelanceOrderBusinessDeleteArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderBusinessClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderBusinessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FreelanceOrderBusiness.
   * @param {FreelanceOrderBusinessUpdateArgs} args - Arguments to update one FreelanceOrderBusiness.
   * @example
   * // Update one FreelanceOrderBusiness
   * const freelanceOrderBusiness = await prisma.freelanceOrderBusiness.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FreelanceOrderBusinessUpdateArgs>(args: Prisma.SelectSubset<T, FreelanceOrderBusinessUpdateArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderBusinessClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderBusinessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FreelanceOrderBusinesses.
   * @param {FreelanceOrderBusinessDeleteManyArgs} args - Arguments to filter FreelanceOrderBusinesses to delete.
   * @example
   * // Delete a few FreelanceOrderBusinesses
   * const { count } = await prisma.freelanceOrderBusiness.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FreelanceOrderBusinessDeleteManyArgs>(args?: Prisma.SelectSubset<T, FreelanceOrderBusinessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FreelanceOrderBusinesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderBusinessUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FreelanceOrderBusinesses
   * const freelanceOrderBusiness = await prisma.freelanceOrderBusiness.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FreelanceOrderBusinessUpdateManyArgs>(args: Prisma.SelectSubset<T, FreelanceOrderBusinessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FreelanceOrderBusinesses and returns the data updated in the database.
   * @param {FreelanceOrderBusinessUpdateManyAndReturnArgs} args - Arguments to update many FreelanceOrderBusinesses.
   * @example
   * // Update many FreelanceOrderBusinesses
   * const freelanceOrderBusiness = await prisma.freelanceOrderBusiness.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FreelanceOrderBusinesses and only return the `id`
   * const freelanceOrderBusinessWithIdOnly = await prisma.freelanceOrderBusiness.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FreelanceOrderBusinessUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FreelanceOrderBusinessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderBusinessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FreelanceOrderBusiness.
   * @param {FreelanceOrderBusinessUpsertArgs} args - Arguments to update or create a FreelanceOrderBusiness.
   * @example
   * // Update or create a FreelanceOrderBusiness
   * const freelanceOrderBusiness = await prisma.freelanceOrderBusiness.upsert({
   *   create: {
   *     // ... data to create a FreelanceOrderBusiness
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FreelanceOrderBusiness we want to update
   *   }
   * })
   */
  upsert<T extends FreelanceOrderBusinessUpsertArgs>(args: Prisma.SelectSubset<T, FreelanceOrderBusinessUpsertArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderBusinessClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderBusinessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FreelanceOrderBusinesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderBusinessCountArgs} args - Arguments to filter FreelanceOrderBusinesses to count.
   * @example
   * // Count the number of FreelanceOrderBusinesses
   * const count = await prisma.freelanceOrderBusiness.count({
   *   where: {
   *     // ... the filter for the FreelanceOrderBusinesses we want to count
   *   }
   * })
  **/
  count<T extends FreelanceOrderBusinessCountArgs>(
    args?: Prisma.Subset<T, FreelanceOrderBusinessCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FreelanceOrderBusinessCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FreelanceOrderBusiness.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderBusinessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FreelanceOrderBusinessAggregateArgs>(args: Prisma.Subset<T, FreelanceOrderBusinessAggregateArgs>): Prisma.PrismaPromise<GetFreelanceOrderBusinessAggregateType<T>>

  /**
   * Group by FreelanceOrderBusiness.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderBusinessGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FreelanceOrderBusinessGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FreelanceOrderBusinessGroupByArgs['orderBy'] }
      : { orderBy?: FreelanceOrderBusinessGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FreelanceOrderBusinessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFreelanceOrderBusinessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FreelanceOrderBusiness model
 */
readonly fields: FreelanceOrderBusinessFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FreelanceOrderBusiness.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FreelanceOrderBusinessClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  freelanceOrder<T extends Prisma.FreelanceOrderDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FreelanceOrderDefaultArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  business<T extends Prisma.BusinessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BusinessDefaultArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FreelanceOrderBusiness model
 */
export interface FreelanceOrderBusinessFieldRefs {
  readonly id: Prisma.FieldRef<"FreelanceOrderBusiness", 'String'>
  readonly freelanceOrderId: Prisma.FieldRef<"FreelanceOrderBusiness", 'String'>
  readonly businessId: Prisma.FieldRef<"FreelanceOrderBusiness", 'String'>
  readonly role: Prisma.FieldRef<"FreelanceOrderBusiness", 'String'>
  readonly assignedAt: Prisma.FieldRef<"FreelanceOrderBusiness", 'DateTime'>
}
    

// Custom InputTypes
/**
 * FreelanceOrderBusiness findUnique
 */
export type FreelanceOrderBusinessFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderBusiness
   */
  select?: Prisma.FreelanceOrderBusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrderBusiness
   */
  omit?: Prisma.FreelanceOrderBusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderBusinessInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceOrderBusiness to fetch.
   */
  where: Prisma.FreelanceOrderBusinessWhereUniqueInput
}

/**
 * FreelanceOrderBusiness findUniqueOrThrow
 */
export type FreelanceOrderBusinessFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderBusiness
   */
  select?: Prisma.FreelanceOrderBusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrderBusiness
   */
  omit?: Prisma.FreelanceOrderBusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderBusinessInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceOrderBusiness to fetch.
   */
  where: Prisma.FreelanceOrderBusinessWhereUniqueInput
}

/**
 * FreelanceOrderBusiness findFirst
 */
export type FreelanceOrderBusinessFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderBusiness
   */
  select?: Prisma.FreelanceOrderBusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrderBusiness
   */
  omit?: Prisma.FreelanceOrderBusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderBusinessInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceOrderBusiness to fetch.
   */
  where?: Prisma.FreelanceOrderBusinessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FreelanceOrderBusinesses to fetch.
   */
  orderBy?: Prisma.FreelanceOrderBusinessOrderByWithRelationInput | Prisma.FreelanceOrderBusinessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FreelanceOrderBusinesses.
   */
  cursor?: Prisma.FreelanceOrderBusinessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FreelanceOrderBusinesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FreelanceOrderBusinesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FreelanceOrderBusinesses.
   */
  distinct?: Prisma.FreelanceOrderBusinessScalarFieldEnum | Prisma.FreelanceOrderBusinessScalarFieldEnum[]
}

/**
 * FreelanceOrderBusiness findFirstOrThrow
 */
export type FreelanceOrderBusinessFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderBusiness
   */
  select?: Prisma.FreelanceOrderBusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrderBusiness
   */
  omit?: Prisma.FreelanceOrderBusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderBusinessInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceOrderBusiness to fetch.
   */
  where?: Prisma.FreelanceOrderBusinessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FreelanceOrderBusinesses to fetch.
   */
  orderBy?: Prisma.FreelanceOrderBusinessOrderByWithRelationInput | Prisma.FreelanceOrderBusinessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FreelanceOrderBusinesses.
   */
  cursor?: Prisma.FreelanceOrderBusinessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FreelanceOrderBusinesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FreelanceOrderBusinesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FreelanceOrderBusinesses.
   */
  distinct?: Prisma.FreelanceOrderBusinessScalarFieldEnum | Prisma.FreelanceOrderBusinessScalarFieldEnum[]
}

/**
 * FreelanceOrderBusiness findMany
 */
export type FreelanceOrderBusinessFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderBusiness
   */
  select?: Prisma.FreelanceOrderBusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrderBusiness
   */
  omit?: Prisma.FreelanceOrderBusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderBusinessInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceOrderBusinesses to fetch.
   */
  where?: Prisma.FreelanceOrderBusinessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FreelanceOrderBusinesses to fetch.
   */
  orderBy?: Prisma.FreelanceOrderBusinessOrderByWithRelationInput | Prisma.FreelanceOrderBusinessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FreelanceOrderBusinesses.
   */
  cursor?: Prisma.FreelanceOrderBusinessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FreelanceOrderBusinesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FreelanceOrderBusinesses.
   */
  skip?: number
  distinct?: Prisma.FreelanceOrderBusinessScalarFieldEnum | Prisma.FreelanceOrderBusinessScalarFieldEnum[]
}

/**
 * FreelanceOrderBusiness create
 */
export type FreelanceOrderBusinessCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderBusiness
   */
  select?: Prisma.FreelanceOrderBusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrderBusiness
   */
  omit?: Prisma.FreelanceOrderBusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderBusinessInclude<ExtArgs> | null
  /**
   * The data needed to create a FreelanceOrderBusiness.
   */
  data: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateInput, Prisma.FreelanceOrderBusinessUncheckedCreateInput>
}

/**
 * FreelanceOrderBusiness createMany
 */
export type FreelanceOrderBusinessCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FreelanceOrderBusinesses.
   */
  data: Prisma.FreelanceOrderBusinessCreateManyInput | Prisma.FreelanceOrderBusinessCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FreelanceOrderBusiness createManyAndReturn
 */
export type FreelanceOrderBusinessCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderBusiness
   */
  select?: Prisma.FreelanceOrderBusinessSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrderBusiness
   */
  omit?: Prisma.FreelanceOrderBusinessOmit<ExtArgs> | null
  /**
   * The data used to create many FreelanceOrderBusinesses.
   */
  data: Prisma.FreelanceOrderBusinessCreateManyInput | Prisma.FreelanceOrderBusinessCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderBusinessIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FreelanceOrderBusiness update
 */
export type FreelanceOrderBusinessUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderBusiness
   */
  select?: Prisma.FreelanceOrderBusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrderBusiness
   */
  omit?: Prisma.FreelanceOrderBusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderBusinessInclude<ExtArgs> | null
  /**
   * The data needed to update a FreelanceOrderBusiness.
   */
  data: Prisma.XOR<Prisma.FreelanceOrderBusinessUpdateInput, Prisma.FreelanceOrderBusinessUncheckedUpdateInput>
  /**
   * Choose, which FreelanceOrderBusiness to update.
   */
  where: Prisma.FreelanceOrderBusinessWhereUniqueInput
}

/**
 * FreelanceOrderBusiness updateMany
 */
export type FreelanceOrderBusinessUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FreelanceOrderBusinesses.
   */
  data: Prisma.XOR<Prisma.FreelanceOrderBusinessUpdateManyMutationInput, Prisma.FreelanceOrderBusinessUncheckedUpdateManyInput>
  /**
   * Filter which FreelanceOrderBusinesses to update
   */
  where?: Prisma.FreelanceOrderBusinessWhereInput
  /**
   * Limit how many FreelanceOrderBusinesses to update.
   */
  limit?: number
}

/**
 * FreelanceOrderBusiness updateManyAndReturn
 */
export type FreelanceOrderBusinessUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderBusiness
   */
  select?: Prisma.FreelanceOrderBusinessSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrderBusiness
   */
  omit?: Prisma.FreelanceOrderBusinessOmit<ExtArgs> | null
  /**
   * The data used to update FreelanceOrderBusinesses.
   */
  data: Prisma.XOR<Prisma.FreelanceOrderBusinessUpdateManyMutationInput, Prisma.FreelanceOrderBusinessUncheckedUpdateManyInput>
  /**
   * Filter which FreelanceOrderBusinesses to update
   */
  where?: Prisma.FreelanceOrderBusinessWhereInput
  /**
   * Limit how many FreelanceOrderBusinesses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderBusinessIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FreelanceOrderBusiness upsert
 */
export type FreelanceOrderBusinessUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderBusiness
   */
  select?: Prisma.FreelanceOrderBusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrderBusiness
   */
  omit?: Prisma.FreelanceOrderBusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderBusinessInclude<ExtArgs> | null
  /**
   * The filter to search for the FreelanceOrderBusiness to update in case it exists.
   */
  where: Prisma.FreelanceOrderBusinessWhereUniqueInput
  /**
   * In case the FreelanceOrderBusiness found by the `where` argument doesn't exist, create a new FreelanceOrderBusiness with this data.
   */
  create: Prisma.XOR<Prisma.FreelanceOrderBusinessCreateInput, Prisma.FreelanceOrderBusinessUncheckedCreateInput>
  /**
   * In case the FreelanceOrderBusiness was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FreelanceOrderBusinessUpdateInput, Prisma.FreelanceOrderBusinessUncheckedUpdateInput>
}

/**
 * FreelanceOrderBusiness delete
 */
export type FreelanceOrderBusinessDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderBusiness
   */
  select?: Prisma.FreelanceOrderBusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrderBusiness
   */
  omit?: Prisma.FreelanceOrderBusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderBusinessInclude<ExtArgs> | null
  /**
   * Filter which FreelanceOrderBusiness to delete.
   */
  where: Prisma.FreelanceOrderBusinessWhereUniqueInput
}

/**
 * FreelanceOrderBusiness deleteMany
 */
export type FreelanceOrderBusinessDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FreelanceOrderBusinesses to delete
   */
  where?: Prisma.FreelanceOrderBusinessWhereInput
  /**
   * Limit how many FreelanceOrderBusinesses to delete.
   */
  limit?: number
}

/**
 * FreelanceOrderBusiness without action
 */
export type FreelanceOrderBusinessDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderBusiness
   */
  select?: Prisma.FreelanceOrderBusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrderBusiness
   */
  omit?: Prisma.FreelanceOrderBusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderBusinessInclude<ExtArgs> | null
}
