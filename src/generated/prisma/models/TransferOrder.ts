
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TransferOrder` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TransferOrder
 * 
 */
export type TransferOrderModel = runtime.Types.Result.DefaultSelection<Prisma.$TransferOrderPayload>

export type AggregateTransferOrder = {
  _count: TransferOrderCountAggregateOutputType | null
  _min: TransferOrderMinAggregateOutputType | null
  _max: TransferOrderMaxAggregateOutputType | null
}

export type TransferOrderMinAggregateOutputType = {
  id: string | null
  fromStoreId: string | null
  toStoreId: string | null
  status: $Enums.TransferOrderStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TransferOrderMaxAggregateOutputType = {
  id: string | null
  fromStoreId: string | null
  toStoreId: string | null
  status: $Enums.TransferOrderStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TransferOrderCountAggregateOutputType = {
  id: number
  fromStoreId: number
  toStoreId: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TransferOrderMinAggregateInputType = {
  id?: true
  fromStoreId?: true
  toStoreId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type TransferOrderMaxAggregateInputType = {
  id?: true
  fromStoreId?: true
  toStoreId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type TransferOrderCountAggregateInputType = {
  id?: true
  fromStoreId?: true
  toStoreId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TransferOrderAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TransferOrder to aggregate.
   */
  where?: Prisma.TransferOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransferOrders to fetch.
   */
  orderBy?: Prisma.TransferOrderOrderByWithRelationInput | Prisma.TransferOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TransferOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransferOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransferOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TransferOrders
  **/
  _count?: true | TransferOrderCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TransferOrderMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TransferOrderMaxAggregateInputType
}

export type GetTransferOrderAggregateType<T extends TransferOrderAggregateArgs> = {
      [P in keyof T & keyof AggregateTransferOrder]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTransferOrder[P]>
    : Prisma.GetScalarType<T[P], AggregateTransferOrder[P]>
}




export type TransferOrderGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransferOrderWhereInput
  orderBy?: Prisma.TransferOrderOrderByWithAggregationInput | Prisma.TransferOrderOrderByWithAggregationInput[]
  by: Prisma.TransferOrderScalarFieldEnum[] | Prisma.TransferOrderScalarFieldEnum
  having?: Prisma.TransferOrderScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TransferOrderCountAggregateInputType | true
  _min?: TransferOrderMinAggregateInputType
  _max?: TransferOrderMaxAggregateInputType
}

export type TransferOrderGroupByOutputType = {
  id: string
  fromStoreId: string
  toStoreId: string
  status: $Enums.TransferOrderStatus
  createdAt: Date
  updatedAt: Date
  _count: TransferOrderCountAggregateOutputType | null
  _min: TransferOrderMinAggregateOutputType | null
  _max: TransferOrderMaxAggregateOutputType | null
}

type GetTransferOrderGroupByPayload<T extends TransferOrderGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TransferOrderGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TransferOrderGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TransferOrderGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TransferOrderGroupByOutputType[P]>
      }
    >
  > 



export type TransferOrderWhereInput = {
  AND?: Prisma.TransferOrderWhereInput | Prisma.TransferOrderWhereInput[]
  OR?: Prisma.TransferOrderWhereInput[]
  NOT?: Prisma.TransferOrderWhereInput | Prisma.TransferOrderWhereInput[]
  id?: Prisma.StringFilter<"TransferOrder"> | string
  fromStoreId?: Prisma.StringFilter<"TransferOrder"> | string
  toStoreId?: Prisma.StringFilter<"TransferOrder"> | string
  status?: Prisma.EnumTransferOrderStatusFilter<"TransferOrder"> | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFilter<"TransferOrder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TransferOrder"> | Date | string
  fromStore?: Prisma.XOR<Prisma.StoreScalarRelationFilter, Prisma.StoreWhereInput>
  toStore?: Prisma.XOR<Prisma.StoreScalarRelationFilter, Prisma.StoreWhereInput>
}

export type TransferOrderOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  fromStoreId?: Prisma.SortOrder
  toStoreId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  fromStore?: Prisma.StoreOrderByWithRelationInput
  toStore?: Prisma.StoreOrderByWithRelationInput
}

export type TransferOrderWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TransferOrderWhereInput | Prisma.TransferOrderWhereInput[]
  OR?: Prisma.TransferOrderWhereInput[]
  NOT?: Prisma.TransferOrderWhereInput | Prisma.TransferOrderWhereInput[]
  fromStoreId?: Prisma.StringFilter<"TransferOrder"> | string
  toStoreId?: Prisma.StringFilter<"TransferOrder"> | string
  status?: Prisma.EnumTransferOrderStatusFilter<"TransferOrder"> | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFilter<"TransferOrder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TransferOrder"> | Date | string
  fromStore?: Prisma.XOR<Prisma.StoreScalarRelationFilter, Prisma.StoreWhereInput>
  toStore?: Prisma.XOR<Prisma.StoreScalarRelationFilter, Prisma.StoreWhereInput>
}, "id">

export type TransferOrderOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  fromStoreId?: Prisma.SortOrder
  toStoreId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TransferOrderCountOrderByAggregateInput
  _max?: Prisma.TransferOrderMaxOrderByAggregateInput
  _min?: Prisma.TransferOrderMinOrderByAggregateInput
}

export type TransferOrderScalarWhereWithAggregatesInput = {
  AND?: Prisma.TransferOrderScalarWhereWithAggregatesInput | Prisma.TransferOrderScalarWhereWithAggregatesInput[]
  OR?: Prisma.TransferOrderScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TransferOrderScalarWhereWithAggregatesInput | Prisma.TransferOrderScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TransferOrder"> | string
  fromStoreId?: Prisma.StringWithAggregatesFilter<"TransferOrder"> | string
  toStoreId?: Prisma.StringWithAggregatesFilter<"TransferOrder"> | string
  status?: Prisma.EnumTransferOrderStatusWithAggregatesFilter<"TransferOrder"> | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TransferOrder"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TransferOrder"> | Date | string
}

export type TransferOrderCreateInput = {
  id?: string
  status?: $Enums.TransferOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  fromStore: Prisma.StoreCreateNestedOneWithoutTransferOrdersFromInput
  toStore: Prisma.StoreCreateNestedOneWithoutTransferOrdersToInput
}

export type TransferOrderUncheckedCreateInput = {
  id?: string
  fromStoreId: string
  toStoreId: string
  status?: $Enums.TransferOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransferOrderUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumTransferOrderStatusFieldUpdateOperationsInput | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fromStore?: Prisma.StoreUpdateOneRequiredWithoutTransferOrdersFromNestedInput
  toStore?: Prisma.StoreUpdateOneRequiredWithoutTransferOrdersToNestedInput
}

export type TransferOrderUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStoreId?: Prisma.StringFieldUpdateOperationsInput | string
  toStoreId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumTransferOrderStatusFieldUpdateOperationsInput | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferOrderCreateManyInput = {
  id?: string
  fromStoreId: string
  toStoreId: string
  status?: $Enums.TransferOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransferOrderUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumTransferOrderStatusFieldUpdateOperationsInput | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferOrderUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStoreId?: Prisma.StringFieldUpdateOperationsInput | string
  toStoreId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumTransferOrderStatusFieldUpdateOperationsInput | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferOrderListRelationFilter = {
  every?: Prisma.TransferOrderWhereInput
  some?: Prisma.TransferOrderWhereInput
  none?: Prisma.TransferOrderWhereInput
}

export type TransferOrderOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TransferOrderCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fromStoreId?: Prisma.SortOrder
  toStoreId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TransferOrderMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fromStoreId?: Prisma.SortOrder
  toStoreId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TransferOrderMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fromStoreId?: Prisma.SortOrder
  toStoreId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TransferOrderCreateNestedManyWithoutFromStoreInput = {
  create?: Prisma.XOR<Prisma.TransferOrderCreateWithoutFromStoreInput, Prisma.TransferOrderUncheckedCreateWithoutFromStoreInput> | Prisma.TransferOrderCreateWithoutFromStoreInput[] | Prisma.TransferOrderUncheckedCreateWithoutFromStoreInput[]
  connectOrCreate?: Prisma.TransferOrderCreateOrConnectWithoutFromStoreInput | Prisma.TransferOrderCreateOrConnectWithoutFromStoreInput[]
  createMany?: Prisma.TransferOrderCreateManyFromStoreInputEnvelope
  connect?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
}

export type TransferOrderCreateNestedManyWithoutToStoreInput = {
  create?: Prisma.XOR<Prisma.TransferOrderCreateWithoutToStoreInput, Prisma.TransferOrderUncheckedCreateWithoutToStoreInput> | Prisma.TransferOrderCreateWithoutToStoreInput[] | Prisma.TransferOrderUncheckedCreateWithoutToStoreInput[]
  connectOrCreate?: Prisma.TransferOrderCreateOrConnectWithoutToStoreInput | Prisma.TransferOrderCreateOrConnectWithoutToStoreInput[]
  createMany?: Prisma.TransferOrderCreateManyToStoreInputEnvelope
  connect?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
}

export type TransferOrderUncheckedCreateNestedManyWithoutFromStoreInput = {
  create?: Prisma.XOR<Prisma.TransferOrderCreateWithoutFromStoreInput, Prisma.TransferOrderUncheckedCreateWithoutFromStoreInput> | Prisma.TransferOrderCreateWithoutFromStoreInput[] | Prisma.TransferOrderUncheckedCreateWithoutFromStoreInput[]
  connectOrCreate?: Prisma.TransferOrderCreateOrConnectWithoutFromStoreInput | Prisma.TransferOrderCreateOrConnectWithoutFromStoreInput[]
  createMany?: Prisma.TransferOrderCreateManyFromStoreInputEnvelope
  connect?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
}

export type TransferOrderUncheckedCreateNestedManyWithoutToStoreInput = {
  create?: Prisma.XOR<Prisma.TransferOrderCreateWithoutToStoreInput, Prisma.TransferOrderUncheckedCreateWithoutToStoreInput> | Prisma.TransferOrderCreateWithoutToStoreInput[] | Prisma.TransferOrderUncheckedCreateWithoutToStoreInput[]
  connectOrCreate?: Prisma.TransferOrderCreateOrConnectWithoutToStoreInput | Prisma.TransferOrderCreateOrConnectWithoutToStoreInput[]
  createMany?: Prisma.TransferOrderCreateManyToStoreInputEnvelope
  connect?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
}

export type TransferOrderUpdateManyWithoutFromStoreNestedInput = {
  create?: Prisma.XOR<Prisma.TransferOrderCreateWithoutFromStoreInput, Prisma.TransferOrderUncheckedCreateWithoutFromStoreInput> | Prisma.TransferOrderCreateWithoutFromStoreInput[] | Prisma.TransferOrderUncheckedCreateWithoutFromStoreInput[]
  connectOrCreate?: Prisma.TransferOrderCreateOrConnectWithoutFromStoreInput | Prisma.TransferOrderCreateOrConnectWithoutFromStoreInput[]
  upsert?: Prisma.TransferOrderUpsertWithWhereUniqueWithoutFromStoreInput | Prisma.TransferOrderUpsertWithWhereUniqueWithoutFromStoreInput[]
  createMany?: Prisma.TransferOrderCreateManyFromStoreInputEnvelope
  set?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  disconnect?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  delete?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  connect?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  update?: Prisma.TransferOrderUpdateWithWhereUniqueWithoutFromStoreInput | Prisma.TransferOrderUpdateWithWhereUniqueWithoutFromStoreInput[]
  updateMany?: Prisma.TransferOrderUpdateManyWithWhereWithoutFromStoreInput | Prisma.TransferOrderUpdateManyWithWhereWithoutFromStoreInput[]
  deleteMany?: Prisma.TransferOrderScalarWhereInput | Prisma.TransferOrderScalarWhereInput[]
}

export type TransferOrderUpdateManyWithoutToStoreNestedInput = {
  create?: Prisma.XOR<Prisma.TransferOrderCreateWithoutToStoreInput, Prisma.TransferOrderUncheckedCreateWithoutToStoreInput> | Prisma.TransferOrderCreateWithoutToStoreInput[] | Prisma.TransferOrderUncheckedCreateWithoutToStoreInput[]
  connectOrCreate?: Prisma.TransferOrderCreateOrConnectWithoutToStoreInput | Prisma.TransferOrderCreateOrConnectWithoutToStoreInput[]
  upsert?: Prisma.TransferOrderUpsertWithWhereUniqueWithoutToStoreInput | Prisma.TransferOrderUpsertWithWhereUniqueWithoutToStoreInput[]
  createMany?: Prisma.TransferOrderCreateManyToStoreInputEnvelope
  set?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  disconnect?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  delete?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  connect?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  update?: Prisma.TransferOrderUpdateWithWhereUniqueWithoutToStoreInput | Prisma.TransferOrderUpdateWithWhereUniqueWithoutToStoreInput[]
  updateMany?: Prisma.TransferOrderUpdateManyWithWhereWithoutToStoreInput | Prisma.TransferOrderUpdateManyWithWhereWithoutToStoreInput[]
  deleteMany?: Prisma.TransferOrderScalarWhereInput | Prisma.TransferOrderScalarWhereInput[]
}

export type TransferOrderUncheckedUpdateManyWithoutFromStoreNestedInput = {
  create?: Prisma.XOR<Prisma.TransferOrderCreateWithoutFromStoreInput, Prisma.TransferOrderUncheckedCreateWithoutFromStoreInput> | Prisma.TransferOrderCreateWithoutFromStoreInput[] | Prisma.TransferOrderUncheckedCreateWithoutFromStoreInput[]
  connectOrCreate?: Prisma.TransferOrderCreateOrConnectWithoutFromStoreInput | Prisma.TransferOrderCreateOrConnectWithoutFromStoreInput[]
  upsert?: Prisma.TransferOrderUpsertWithWhereUniqueWithoutFromStoreInput | Prisma.TransferOrderUpsertWithWhereUniqueWithoutFromStoreInput[]
  createMany?: Prisma.TransferOrderCreateManyFromStoreInputEnvelope
  set?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  disconnect?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  delete?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  connect?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  update?: Prisma.TransferOrderUpdateWithWhereUniqueWithoutFromStoreInput | Prisma.TransferOrderUpdateWithWhereUniqueWithoutFromStoreInput[]
  updateMany?: Prisma.TransferOrderUpdateManyWithWhereWithoutFromStoreInput | Prisma.TransferOrderUpdateManyWithWhereWithoutFromStoreInput[]
  deleteMany?: Prisma.TransferOrderScalarWhereInput | Prisma.TransferOrderScalarWhereInput[]
}

export type TransferOrderUncheckedUpdateManyWithoutToStoreNestedInput = {
  create?: Prisma.XOR<Prisma.TransferOrderCreateWithoutToStoreInput, Prisma.TransferOrderUncheckedCreateWithoutToStoreInput> | Prisma.TransferOrderCreateWithoutToStoreInput[] | Prisma.TransferOrderUncheckedCreateWithoutToStoreInput[]
  connectOrCreate?: Prisma.TransferOrderCreateOrConnectWithoutToStoreInput | Prisma.TransferOrderCreateOrConnectWithoutToStoreInput[]
  upsert?: Prisma.TransferOrderUpsertWithWhereUniqueWithoutToStoreInput | Prisma.TransferOrderUpsertWithWhereUniqueWithoutToStoreInput[]
  createMany?: Prisma.TransferOrderCreateManyToStoreInputEnvelope
  set?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  disconnect?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  delete?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  connect?: Prisma.TransferOrderWhereUniqueInput | Prisma.TransferOrderWhereUniqueInput[]
  update?: Prisma.TransferOrderUpdateWithWhereUniqueWithoutToStoreInput | Prisma.TransferOrderUpdateWithWhereUniqueWithoutToStoreInput[]
  updateMany?: Prisma.TransferOrderUpdateManyWithWhereWithoutToStoreInput | Prisma.TransferOrderUpdateManyWithWhereWithoutToStoreInput[]
  deleteMany?: Prisma.TransferOrderScalarWhereInput | Prisma.TransferOrderScalarWhereInput[]
}

export type EnumTransferOrderStatusFieldUpdateOperationsInput = {
  set?: $Enums.TransferOrderStatus
}

export type TransferOrderCreateWithoutFromStoreInput = {
  id?: string
  status?: $Enums.TransferOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  toStore: Prisma.StoreCreateNestedOneWithoutTransferOrdersToInput
}

export type TransferOrderUncheckedCreateWithoutFromStoreInput = {
  id?: string
  toStoreId: string
  status?: $Enums.TransferOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransferOrderCreateOrConnectWithoutFromStoreInput = {
  where: Prisma.TransferOrderWhereUniqueInput
  create: Prisma.XOR<Prisma.TransferOrderCreateWithoutFromStoreInput, Prisma.TransferOrderUncheckedCreateWithoutFromStoreInput>
}

export type TransferOrderCreateManyFromStoreInputEnvelope = {
  data: Prisma.TransferOrderCreateManyFromStoreInput | Prisma.TransferOrderCreateManyFromStoreInput[]
  skipDuplicates?: boolean
}

export type TransferOrderCreateWithoutToStoreInput = {
  id?: string
  status?: $Enums.TransferOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  fromStore: Prisma.StoreCreateNestedOneWithoutTransferOrdersFromInput
}

export type TransferOrderUncheckedCreateWithoutToStoreInput = {
  id?: string
  fromStoreId: string
  status?: $Enums.TransferOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransferOrderCreateOrConnectWithoutToStoreInput = {
  where: Prisma.TransferOrderWhereUniqueInput
  create: Prisma.XOR<Prisma.TransferOrderCreateWithoutToStoreInput, Prisma.TransferOrderUncheckedCreateWithoutToStoreInput>
}

export type TransferOrderCreateManyToStoreInputEnvelope = {
  data: Prisma.TransferOrderCreateManyToStoreInput | Prisma.TransferOrderCreateManyToStoreInput[]
  skipDuplicates?: boolean
}

export type TransferOrderUpsertWithWhereUniqueWithoutFromStoreInput = {
  where: Prisma.TransferOrderWhereUniqueInput
  update: Prisma.XOR<Prisma.TransferOrderUpdateWithoutFromStoreInput, Prisma.TransferOrderUncheckedUpdateWithoutFromStoreInput>
  create: Prisma.XOR<Prisma.TransferOrderCreateWithoutFromStoreInput, Prisma.TransferOrderUncheckedCreateWithoutFromStoreInput>
}

export type TransferOrderUpdateWithWhereUniqueWithoutFromStoreInput = {
  where: Prisma.TransferOrderWhereUniqueInput
  data: Prisma.XOR<Prisma.TransferOrderUpdateWithoutFromStoreInput, Prisma.TransferOrderUncheckedUpdateWithoutFromStoreInput>
}

export type TransferOrderUpdateManyWithWhereWithoutFromStoreInput = {
  where: Prisma.TransferOrderScalarWhereInput
  data: Prisma.XOR<Prisma.TransferOrderUpdateManyMutationInput, Prisma.TransferOrderUncheckedUpdateManyWithoutFromStoreInput>
}

export type TransferOrderScalarWhereInput = {
  AND?: Prisma.TransferOrderScalarWhereInput | Prisma.TransferOrderScalarWhereInput[]
  OR?: Prisma.TransferOrderScalarWhereInput[]
  NOT?: Prisma.TransferOrderScalarWhereInput | Prisma.TransferOrderScalarWhereInput[]
  id?: Prisma.StringFilter<"TransferOrder"> | string
  fromStoreId?: Prisma.StringFilter<"TransferOrder"> | string
  toStoreId?: Prisma.StringFilter<"TransferOrder"> | string
  status?: Prisma.EnumTransferOrderStatusFilter<"TransferOrder"> | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFilter<"TransferOrder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TransferOrder"> | Date | string
}

export type TransferOrderUpsertWithWhereUniqueWithoutToStoreInput = {
  where: Prisma.TransferOrderWhereUniqueInput
  update: Prisma.XOR<Prisma.TransferOrderUpdateWithoutToStoreInput, Prisma.TransferOrderUncheckedUpdateWithoutToStoreInput>
  create: Prisma.XOR<Prisma.TransferOrderCreateWithoutToStoreInput, Prisma.TransferOrderUncheckedCreateWithoutToStoreInput>
}

export type TransferOrderUpdateWithWhereUniqueWithoutToStoreInput = {
  where: Prisma.TransferOrderWhereUniqueInput
  data: Prisma.XOR<Prisma.TransferOrderUpdateWithoutToStoreInput, Prisma.TransferOrderUncheckedUpdateWithoutToStoreInput>
}

export type TransferOrderUpdateManyWithWhereWithoutToStoreInput = {
  where: Prisma.TransferOrderScalarWhereInput
  data: Prisma.XOR<Prisma.TransferOrderUpdateManyMutationInput, Prisma.TransferOrderUncheckedUpdateManyWithoutToStoreInput>
}

export type TransferOrderCreateManyFromStoreInput = {
  id?: string
  toStoreId: string
  status?: $Enums.TransferOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransferOrderCreateManyToStoreInput = {
  id?: string
  fromStoreId: string
  status?: $Enums.TransferOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransferOrderUpdateWithoutFromStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumTransferOrderStatusFieldUpdateOperationsInput | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  toStore?: Prisma.StoreUpdateOneRequiredWithoutTransferOrdersToNestedInput
}

export type TransferOrderUncheckedUpdateWithoutFromStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  toStoreId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumTransferOrderStatusFieldUpdateOperationsInput | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferOrderUncheckedUpdateManyWithoutFromStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  toStoreId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumTransferOrderStatusFieldUpdateOperationsInput | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferOrderUpdateWithoutToStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumTransferOrderStatusFieldUpdateOperationsInput | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fromStore?: Prisma.StoreUpdateOneRequiredWithoutTransferOrdersFromNestedInput
}

export type TransferOrderUncheckedUpdateWithoutToStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStoreId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumTransferOrderStatusFieldUpdateOperationsInput | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferOrderUncheckedUpdateManyWithoutToStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromStoreId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumTransferOrderStatusFieldUpdateOperationsInput | $Enums.TransferOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TransferOrderSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fromStoreId?: boolean
  toStoreId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  fromStore?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
  toStore?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transferOrder"]>

export type TransferOrderSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fromStoreId?: boolean
  toStoreId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  fromStore?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
  toStore?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transferOrder"]>

export type TransferOrderSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fromStoreId?: boolean
  toStoreId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  fromStore?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
  toStore?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transferOrder"]>

export type TransferOrderSelectScalar = {
  id?: boolean
  fromStoreId?: boolean
  toStoreId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TransferOrderOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "fromStoreId" | "toStoreId" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["transferOrder"]>
export type TransferOrderInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  fromStore?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
  toStore?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}
export type TransferOrderIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  fromStore?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
  toStore?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}
export type TransferOrderIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  fromStore?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
  toStore?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}

export type $TransferOrderPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TransferOrder"
  objects: {
    fromStore: Prisma.$StorePayload<ExtArgs>
    toStore: Prisma.$StorePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    fromStoreId: string
    toStoreId: string
    status: $Enums.TransferOrderStatus
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["transferOrder"]>
  composites: {}
}

export type TransferOrderGetPayload<S extends boolean | null | undefined | TransferOrderDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload, S>

export type TransferOrderCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TransferOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TransferOrderCountAggregateInputType | true
  }

export interface TransferOrderDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransferOrder'], meta: { name: 'TransferOrder' } }
  /**
   * Find zero or one TransferOrder that matches the filter.
   * @param {TransferOrderFindUniqueArgs} args - Arguments to find a TransferOrder
   * @example
   * // Get one TransferOrder
   * const transferOrder = await prisma.transferOrder.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TransferOrderFindUniqueArgs>(args: Prisma.SelectSubset<T, TransferOrderFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TransferOrderClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TransferOrder that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TransferOrderFindUniqueOrThrowArgs} args - Arguments to find a TransferOrder
   * @example
   * // Get one TransferOrder
   * const transferOrder = await prisma.transferOrder.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TransferOrderFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TransferOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransferOrderClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TransferOrder that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderFindFirstArgs} args - Arguments to find a TransferOrder
   * @example
   * // Get one TransferOrder
   * const transferOrder = await prisma.transferOrder.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TransferOrderFindFirstArgs>(args?: Prisma.SelectSubset<T, TransferOrderFindFirstArgs<ExtArgs>>): Prisma.Prisma__TransferOrderClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TransferOrder that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderFindFirstOrThrowArgs} args - Arguments to find a TransferOrder
   * @example
   * // Get one TransferOrder
   * const transferOrder = await prisma.transferOrder.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TransferOrderFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TransferOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransferOrderClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TransferOrders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TransferOrders
   * const transferOrders = await prisma.transferOrder.findMany()
   * 
   * // Get first 10 TransferOrders
   * const transferOrders = await prisma.transferOrder.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const transferOrderWithIdOnly = await prisma.transferOrder.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TransferOrderFindManyArgs>(args?: Prisma.SelectSubset<T, TransferOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TransferOrder.
   * @param {TransferOrderCreateArgs} args - Arguments to create a TransferOrder.
   * @example
   * // Create one TransferOrder
   * const TransferOrder = await prisma.transferOrder.create({
   *   data: {
   *     // ... data to create a TransferOrder
   *   }
   * })
   * 
   */
  create<T extends TransferOrderCreateArgs>(args: Prisma.SelectSubset<T, TransferOrderCreateArgs<ExtArgs>>): Prisma.Prisma__TransferOrderClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TransferOrders.
   * @param {TransferOrderCreateManyArgs} args - Arguments to create many TransferOrders.
   * @example
   * // Create many TransferOrders
   * const transferOrder = await prisma.transferOrder.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TransferOrderCreateManyArgs>(args?: Prisma.SelectSubset<T, TransferOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TransferOrders and returns the data saved in the database.
   * @param {TransferOrderCreateManyAndReturnArgs} args - Arguments to create many TransferOrders.
   * @example
   * // Create many TransferOrders
   * const transferOrder = await prisma.transferOrder.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TransferOrders and only return the `id`
   * const transferOrderWithIdOnly = await prisma.transferOrder.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TransferOrderCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TransferOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TransferOrder.
   * @param {TransferOrderDeleteArgs} args - Arguments to delete one TransferOrder.
   * @example
   * // Delete one TransferOrder
   * const TransferOrder = await prisma.transferOrder.delete({
   *   where: {
   *     // ... filter to delete one TransferOrder
   *   }
   * })
   * 
   */
  delete<T extends TransferOrderDeleteArgs>(args: Prisma.SelectSubset<T, TransferOrderDeleteArgs<ExtArgs>>): Prisma.Prisma__TransferOrderClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TransferOrder.
   * @param {TransferOrderUpdateArgs} args - Arguments to update one TransferOrder.
   * @example
   * // Update one TransferOrder
   * const transferOrder = await prisma.transferOrder.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TransferOrderUpdateArgs>(args: Prisma.SelectSubset<T, TransferOrderUpdateArgs<ExtArgs>>): Prisma.Prisma__TransferOrderClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TransferOrders.
   * @param {TransferOrderDeleteManyArgs} args - Arguments to filter TransferOrders to delete.
   * @example
   * // Delete a few TransferOrders
   * const { count } = await prisma.transferOrder.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TransferOrderDeleteManyArgs>(args?: Prisma.SelectSubset<T, TransferOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TransferOrders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TransferOrders
   * const transferOrder = await prisma.transferOrder.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TransferOrderUpdateManyArgs>(args: Prisma.SelectSubset<T, TransferOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TransferOrders and returns the data updated in the database.
   * @param {TransferOrderUpdateManyAndReturnArgs} args - Arguments to update many TransferOrders.
   * @example
   * // Update many TransferOrders
   * const transferOrder = await prisma.transferOrder.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TransferOrders and only return the `id`
   * const transferOrderWithIdOnly = await prisma.transferOrder.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TransferOrderUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TransferOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TransferOrder.
   * @param {TransferOrderUpsertArgs} args - Arguments to update or create a TransferOrder.
   * @example
   * // Update or create a TransferOrder
   * const transferOrder = await prisma.transferOrder.upsert({
   *   create: {
   *     // ... data to create a TransferOrder
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TransferOrder we want to update
   *   }
   * })
   */
  upsert<T extends TransferOrderUpsertArgs>(args: Prisma.SelectSubset<T, TransferOrderUpsertArgs<ExtArgs>>): Prisma.Prisma__TransferOrderClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TransferOrders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderCountArgs} args - Arguments to filter TransferOrders to count.
   * @example
   * // Count the number of TransferOrders
   * const count = await prisma.transferOrder.count({
   *   where: {
   *     // ... the filter for the TransferOrders we want to count
   *   }
   * })
  **/
  count<T extends TransferOrderCountArgs>(
    args?: Prisma.Subset<T, TransferOrderCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TransferOrderCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TransferOrder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TransferOrderAggregateArgs>(args: Prisma.Subset<T, TransferOrderAggregateArgs>): Prisma.PrismaPromise<GetTransferOrderAggregateType<T>>

  /**
   * Group by TransferOrder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TransferOrderGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TransferOrderGroupByArgs['orderBy'] }
      : { orderBy?: TransferOrderGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TransferOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransferOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TransferOrder model
 */
readonly fields: TransferOrderFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TransferOrder.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TransferOrderClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  fromStore<T extends Prisma.StoreDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StoreDefaultArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  toStore<T extends Prisma.StoreDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StoreDefaultArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TransferOrder model
 */
export interface TransferOrderFieldRefs {
  readonly id: Prisma.FieldRef<"TransferOrder", 'String'>
  readonly fromStoreId: Prisma.FieldRef<"TransferOrder", 'String'>
  readonly toStoreId: Prisma.FieldRef<"TransferOrder", 'String'>
  readonly status: Prisma.FieldRef<"TransferOrder", 'TransferOrderStatus'>
  readonly createdAt: Prisma.FieldRef<"TransferOrder", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TransferOrder", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TransferOrder findUnique
 */
export type TransferOrderFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderInclude<ExtArgs> | null
  /**
   * Filter, which TransferOrder to fetch.
   */
  where: Prisma.TransferOrderWhereUniqueInput
}

/**
 * TransferOrder findUniqueOrThrow
 */
export type TransferOrderFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderInclude<ExtArgs> | null
  /**
   * Filter, which TransferOrder to fetch.
   */
  where: Prisma.TransferOrderWhereUniqueInput
}

/**
 * TransferOrder findFirst
 */
export type TransferOrderFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderInclude<ExtArgs> | null
  /**
   * Filter, which TransferOrder to fetch.
   */
  where?: Prisma.TransferOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransferOrders to fetch.
   */
  orderBy?: Prisma.TransferOrderOrderByWithRelationInput | Prisma.TransferOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TransferOrders.
   */
  cursor?: Prisma.TransferOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransferOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransferOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TransferOrders.
   */
  distinct?: Prisma.TransferOrderScalarFieldEnum | Prisma.TransferOrderScalarFieldEnum[]
}

/**
 * TransferOrder findFirstOrThrow
 */
export type TransferOrderFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderInclude<ExtArgs> | null
  /**
   * Filter, which TransferOrder to fetch.
   */
  where?: Prisma.TransferOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransferOrders to fetch.
   */
  orderBy?: Prisma.TransferOrderOrderByWithRelationInput | Prisma.TransferOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TransferOrders.
   */
  cursor?: Prisma.TransferOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransferOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransferOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TransferOrders.
   */
  distinct?: Prisma.TransferOrderScalarFieldEnum | Prisma.TransferOrderScalarFieldEnum[]
}

/**
 * TransferOrder findMany
 */
export type TransferOrderFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderInclude<ExtArgs> | null
  /**
   * Filter, which TransferOrders to fetch.
   */
  where?: Prisma.TransferOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransferOrders to fetch.
   */
  orderBy?: Prisma.TransferOrderOrderByWithRelationInput | Prisma.TransferOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TransferOrders.
   */
  cursor?: Prisma.TransferOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransferOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransferOrders.
   */
  skip?: number
  distinct?: Prisma.TransferOrderScalarFieldEnum | Prisma.TransferOrderScalarFieldEnum[]
}

/**
 * TransferOrder create
 */
export type TransferOrderCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderInclude<ExtArgs> | null
  /**
   * The data needed to create a TransferOrder.
   */
  data: Prisma.XOR<Prisma.TransferOrderCreateInput, Prisma.TransferOrderUncheckedCreateInput>
}

/**
 * TransferOrder createMany
 */
export type TransferOrderCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TransferOrders.
   */
  data: Prisma.TransferOrderCreateManyInput | Prisma.TransferOrderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TransferOrder createManyAndReturn
 */
export type TransferOrderCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * The data used to create many TransferOrders.
   */
  data: Prisma.TransferOrderCreateManyInput | Prisma.TransferOrderCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TransferOrder update
 */
export type TransferOrderUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderInclude<ExtArgs> | null
  /**
   * The data needed to update a TransferOrder.
   */
  data: Prisma.XOR<Prisma.TransferOrderUpdateInput, Prisma.TransferOrderUncheckedUpdateInput>
  /**
   * Choose, which TransferOrder to update.
   */
  where: Prisma.TransferOrderWhereUniqueInput
}

/**
 * TransferOrder updateMany
 */
export type TransferOrderUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TransferOrders.
   */
  data: Prisma.XOR<Prisma.TransferOrderUpdateManyMutationInput, Prisma.TransferOrderUncheckedUpdateManyInput>
  /**
   * Filter which TransferOrders to update
   */
  where?: Prisma.TransferOrderWhereInput
  /**
   * Limit how many TransferOrders to update.
   */
  limit?: number
}

/**
 * TransferOrder updateManyAndReturn
 */
export type TransferOrderUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * The data used to update TransferOrders.
   */
  data: Prisma.XOR<Prisma.TransferOrderUpdateManyMutationInput, Prisma.TransferOrderUncheckedUpdateManyInput>
  /**
   * Filter which TransferOrders to update
   */
  where?: Prisma.TransferOrderWhereInput
  /**
   * Limit how many TransferOrders to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TransferOrder upsert
 */
export type TransferOrderUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderInclude<ExtArgs> | null
  /**
   * The filter to search for the TransferOrder to update in case it exists.
   */
  where: Prisma.TransferOrderWhereUniqueInput
  /**
   * In case the TransferOrder found by the `where` argument doesn't exist, create a new TransferOrder with this data.
   */
  create: Prisma.XOR<Prisma.TransferOrderCreateInput, Prisma.TransferOrderUncheckedCreateInput>
  /**
   * In case the TransferOrder was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TransferOrderUpdateInput, Prisma.TransferOrderUncheckedUpdateInput>
}

/**
 * TransferOrder delete
 */
export type TransferOrderDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderInclude<ExtArgs> | null
  /**
   * Filter which TransferOrder to delete.
   */
  where: Prisma.TransferOrderWhereUniqueInput
}

/**
 * TransferOrder deleteMany
 */
export type TransferOrderDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TransferOrders to delete
   */
  where?: Prisma.TransferOrderWhereInput
  /**
   * Limit how many TransferOrders to delete.
   */
  limit?: number
}

/**
 * TransferOrder without action
 */
export type TransferOrderDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderInclude<ExtArgs> | null
}
