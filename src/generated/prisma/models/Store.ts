
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Store` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Store
 * 
 */
export type StoreModel = runtime.Types.Result.DefaultSelection<Prisma.$StorePayload>

export type AggregateStore = {
  _count: StoreCountAggregateOutputType | null
  _min: StoreMinAggregateOutputType | null
  _max: StoreMaxAggregateOutputType | null
}

export type StoreMinAggregateOutputType = {
  id: string | null
  businessId: string | null
  name: string | null
  address: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type StoreMaxAggregateOutputType = {
  id: string | null
  businessId: string | null
  name: string | null
  address: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type StoreCountAggregateOutputType = {
  id: number
  businessId: number
  name: number
  address: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type StoreMinAggregateInputType = {
  id?: true
  businessId?: true
  name?: true
  address?: true
  createdAt?: true
  updatedAt?: true
}

export type StoreMaxAggregateInputType = {
  id?: true
  businessId?: true
  name?: true
  address?: true
  createdAt?: true
  updatedAt?: true
}

export type StoreCountAggregateInputType = {
  id?: true
  businessId?: true
  name?: true
  address?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type StoreAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Store to aggregate.
   */
  where?: Prisma.StoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Stores to fetch.
   */
  orderBy?: Prisma.StoreOrderByWithRelationInput | Prisma.StoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Stores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Stores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Stores
  **/
  _count?: true | StoreCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StoreMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StoreMaxAggregateInputType
}

export type GetStoreAggregateType<T extends StoreAggregateArgs> = {
      [P in keyof T & keyof AggregateStore]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStore[P]>
    : Prisma.GetScalarType<T[P], AggregateStore[P]>
}




export type StoreGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StoreWhereInput
  orderBy?: Prisma.StoreOrderByWithAggregationInput | Prisma.StoreOrderByWithAggregationInput[]
  by: Prisma.StoreScalarFieldEnum[] | Prisma.StoreScalarFieldEnum
  having?: Prisma.StoreScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StoreCountAggregateInputType | true
  _min?: StoreMinAggregateInputType
  _max?: StoreMaxAggregateInputType
}

export type StoreGroupByOutputType = {
  id: string
  businessId: string
  name: string
  address: string | null
  createdAt: Date
  updatedAt: Date
  _count: StoreCountAggregateOutputType | null
  _min: StoreMinAggregateOutputType | null
  _max: StoreMaxAggregateOutputType | null
}

type GetStoreGroupByPayload<T extends StoreGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StoreGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StoreGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StoreGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StoreGroupByOutputType[P]>
      }
    >
  > 



export type StoreWhereInput = {
  AND?: Prisma.StoreWhereInput | Prisma.StoreWhereInput[]
  OR?: Prisma.StoreWhereInput[]
  NOT?: Prisma.StoreWhereInput | Prisma.StoreWhereInput[]
  id?: Prisma.StringFilter<"Store"> | string
  businessId?: Prisma.StringFilter<"Store"> | string
  name?: Prisma.StringFilter<"Store"> | string
  address?: Prisma.StringNullableFilter<"Store"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Store"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Store"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
  sales?: Prisma.SaleListRelationFilter
  purchaseOrders?: Prisma.PurchaseOrderListRelationFilter
  transferOrdersFrom?: Prisma.TransferOrderListRelationFilter
  transferOrdersTo?: Prisma.TransferOrderListRelationFilter
  inventoryAdjustments?: Prisma.InventoryAdjustmentListRelationFilter
  shifts?: Prisma.ShiftListRelationFilter
  products?: Prisma.ProductListRelationFilter
}

export type StoreOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  business?: Prisma.BusinessOrderByWithRelationInput
  sales?: Prisma.SaleOrderByRelationAggregateInput
  purchaseOrders?: Prisma.PurchaseOrderOrderByRelationAggregateInput
  transferOrdersFrom?: Prisma.TransferOrderOrderByRelationAggregateInput
  transferOrdersTo?: Prisma.TransferOrderOrderByRelationAggregateInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentOrderByRelationAggregateInput
  shifts?: Prisma.ShiftOrderByRelationAggregateInput
  products?: Prisma.ProductOrderByRelationAggregateInput
}

export type StoreWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.StoreWhereInput | Prisma.StoreWhereInput[]
  OR?: Prisma.StoreWhereInput[]
  NOT?: Prisma.StoreWhereInput | Prisma.StoreWhereInput[]
  businessId?: Prisma.StringFilter<"Store"> | string
  name?: Prisma.StringFilter<"Store"> | string
  address?: Prisma.StringNullableFilter<"Store"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Store"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Store"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
  sales?: Prisma.SaleListRelationFilter
  purchaseOrders?: Prisma.PurchaseOrderListRelationFilter
  transferOrdersFrom?: Prisma.TransferOrderListRelationFilter
  transferOrdersTo?: Prisma.TransferOrderListRelationFilter
  inventoryAdjustments?: Prisma.InventoryAdjustmentListRelationFilter
  shifts?: Prisma.ShiftListRelationFilter
  products?: Prisma.ProductListRelationFilter
}, "id">

export type StoreOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.StoreCountOrderByAggregateInput
  _max?: Prisma.StoreMaxOrderByAggregateInput
  _min?: Prisma.StoreMinOrderByAggregateInput
}

export type StoreScalarWhereWithAggregatesInput = {
  AND?: Prisma.StoreScalarWhereWithAggregatesInput | Prisma.StoreScalarWhereWithAggregatesInput[]
  OR?: Prisma.StoreScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StoreScalarWhereWithAggregatesInput | Prisma.StoreScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Store"> | string
  businessId?: Prisma.StringWithAggregatesFilter<"Store"> | string
  name?: Prisma.StringWithAggregatesFilter<"Store"> | string
  address?: Prisma.StringNullableWithAggregatesFilter<"Store"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Store"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Store"> | Date | string
}

export type StoreCreateInput = {
  id?: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutStoresInput
  sales?: Prisma.SaleCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductCreateNestedManyWithoutStoreInput
}

export type StoreUncheckedCreateInput = {
  id?: string
  businessId: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sales?: Prisma.SaleUncheckedCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftUncheckedCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutStoreInput
}

export type StoreUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutStoresNestedInput
  sales?: Prisma.SaleUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUpdateManyWithoutStoreNestedInput
}

export type StoreUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sales?: Prisma.SaleUncheckedUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUncheckedUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUncheckedUpdateManyWithoutStoreNestedInput
}

export type StoreCreateManyInput = {
  id?: string
  businessId: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type StoreUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StoreUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StoreListRelationFilter = {
  every?: Prisma.StoreWhereInput
  some?: Prisma.StoreWhereInput
  none?: Prisma.StoreWhereInput
}

export type StoreOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StoreNullableScalarRelationFilter = {
  is?: Prisma.StoreWhereInput | null
  isNot?: Prisma.StoreWhereInput | null
}

export type StoreCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StoreMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StoreMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StoreScalarRelationFilter = {
  is?: Prisma.StoreWhereInput
  isNot?: Prisma.StoreWhereInput
}

export type StoreCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutBusinessInput, Prisma.StoreUncheckedCreateWithoutBusinessInput> | Prisma.StoreCreateWithoutBusinessInput[] | Prisma.StoreUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutBusinessInput | Prisma.StoreCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.StoreCreateManyBusinessInputEnvelope
  connect?: Prisma.StoreWhereUniqueInput | Prisma.StoreWhereUniqueInput[]
}

export type StoreUncheckedCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutBusinessInput, Prisma.StoreUncheckedCreateWithoutBusinessInput> | Prisma.StoreCreateWithoutBusinessInput[] | Prisma.StoreUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutBusinessInput | Prisma.StoreCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.StoreCreateManyBusinessInputEnvelope
  connect?: Prisma.StoreWhereUniqueInput | Prisma.StoreWhereUniqueInput[]
}

export type StoreUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutBusinessInput, Prisma.StoreUncheckedCreateWithoutBusinessInput> | Prisma.StoreCreateWithoutBusinessInput[] | Prisma.StoreUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutBusinessInput | Prisma.StoreCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.StoreUpsertWithWhereUniqueWithoutBusinessInput | Prisma.StoreUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.StoreCreateManyBusinessInputEnvelope
  set?: Prisma.StoreWhereUniqueInput | Prisma.StoreWhereUniqueInput[]
  disconnect?: Prisma.StoreWhereUniqueInput | Prisma.StoreWhereUniqueInput[]
  delete?: Prisma.StoreWhereUniqueInput | Prisma.StoreWhereUniqueInput[]
  connect?: Prisma.StoreWhereUniqueInput | Prisma.StoreWhereUniqueInput[]
  update?: Prisma.StoreUpdateWithWhereUniqueWithoutBusinessInput | Prisma.StoreUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.StoreUpdateManyWithWhereWithoutBusinessInput | Prisma.StoreUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.StoreScalarWhereInput | Prisma.StoreScalarWhereInput[]
}

export type StoreUncheckedUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutBusinessInput, Prisma.StoreUncheckedCreateWithoutBusinessInput> | Prisma.StoreCreateWithoutBusinessInput[] | Prisma.StoreUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutBusinessInput | Prisma.StoreCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.StoreUpsertWithWhereUniqueWithoutBusinessInput | Prisma.StoreUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.StoreCreateManyBusinessInputEnvelope
  set?: Prisma.StoreWhereUniqueInput | Prisma.StoreWhereUniqueInput[]
  disconnect?: Prisma.StoreWhereUniqueInput | Prisma.StoreWhereUniqueInput[]
  delete?: Prisma.StoreWhereUniqueInput | Prisma.StoreWhereUniqueInput[]
  connect?: Prisma.StoreWhereUniqueInput | Prisma.StoreWhereUniqueInput[]
  update?: Prisma.StoreUpdateWithWhereUniqueWithoutBusinessInput | Prisma.StoreUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.StoreUpdateManyWithWhereWithoutBusinessInput | Prisma.StoreUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.StoreScalarWhereInput | Prisma.StoreScalarWhereInput[]
}

export type StoreCreateNestedOneWithoutProductsInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutProductsInput, Prisma.StoreUncheckedCreateWithoutProductsInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutProductsInput
  connect?: Prisma.StoreWhereUniqueInput
}

export type StoreUpdateOneWithoutProductsNestedInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutProductsInput, Prisma.StoreUncheckedCreateWithoutProductsInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutProductsInput
  upsert?: Prisma.StoreUpsertWithoutProductsInput
  disconnect?: Prisma.StoreWhereInput | boolean
  delete?: Prisma.StoreWhereInput | boolean
  connect?: Prisma.StoreWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StoreUpdateToOneWithWhereWithoutProductsInput, Prisma.StoreUpdateWithoutProductsInput>, Prisma.StoreUncheckedUpdateWithoutProductsInput>
}

export type StoreCreateNestedOneWithoutSalesInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutSalesInput, Prisma.StoreUncheckedCreateWithoutSalesInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutSalesInput
  connect?: Prisma.StoreWhereUniqueInput
}

export type StoreUpdateOneRequiredWithoutSalesNestedInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutSalesInput, Prisma.StoreUncheckedCreateWithoutSalesInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutSalesInput
  upsert?: Prisma.StoreUpsertWithoutSalesInput
  connect?: Prisma.StoreWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StoreUpdateToOneWithWhereWithoutSalesInput, Prisma.StoreUpdateWithoutSalesInput>, Prisma.StoreUncheckedUpdateWithoutSalesInput>
}

export type StoreCreateNestedOneWithoutPurchaseOrdersInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutPurchaseOrdersInput, Prisma.StoreUncheckedCreateWithoutPurchaseOrdersInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutPurchaseOrdersInput
  connect?: Prisma.StoreWhereUniqueInput
}

export type StoreUpdateOneRequiredWithoutPurchaseOrdersNestedInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutPurchaseOrdersInput, Prisma.StoreUncheckedCreateWithoutPurchaseOrdersInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutPurchaseOrdersInput
  upsert?: Prisma.StoreUpsertWithoutPurchaseOrdersInput
  connect?: Prisma.StoreWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StoreUpdateToOneWithWhereWithoutPurchaseOrdersInput, Prisma.StoreUpdateWithoutPurchaseOrdersInput>, Prisma.StoreUncheckedUpdateWithoutPurchaseOrdersInput>
}

export type StoreCreateNestedOneWithoutTransferOrdersFromInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutTransferOrdersFromInput, Prisma.StoreUncheckedCreateWithoutTransferOrdersFromInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutTransferOrdersFromInput
  connect?: Prisma.StoreWhereUniqueInput
}

export type StoreCreateNestedOneWithoutTransferOrdersToInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutTransferOrdersToInput, Prisma.StoreUncheckedCreateWithoutTransferOrdersToInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutTransferOrdersToInput
  connect?: Prisma.StoreWhereUniqueInput
}

export type StoreUpdateOneRequiredWithoutTransferOrdersFromNestedInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutTransferOrdersFromInput, Prisma.StoreUncheckedCreateWithoutTransferOrdersFromInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutTransferOrdersFromInput
  upsert?: Prisma.StoreUpsertWithoutTransferOrdersFromInput
  connect?: Prisma.StoreWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StoreUpdateToOneWithWhereWithoutTransferOrdersFromInput, Prisma.StoreUpdateWithoutTransferOrdersFromInput>, Prisma.StoreUncheckedUpdateWithoutTransferOrdersFromInput>
}

export type StoreUpdateOneRequiredWithoutTransferOrdersToNestedInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutTransferOrdersToInput, Prisma.StoreUncheckedCreateWithoutTransferOrdersToInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutTransferOrdersToInput
  upsert?: Prisma.StoreUpsertWithoutTransferOrdersToInput
  connect?: Prisma.StoreWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StoreUpdateToOneWithWhereWithoutTransferOrdersToInput, Prisma.StoreUpdateWithoutTransferOrdersToInput>, Prisma.StoreUncheckedUpdateWithoutTransferOrdersToInput>
}

export type StoreCreateNestedOneWithoutInventoryAdjustmentsInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutInventoryAdjustmentsInput, Prisma.StoreUncheckedCreateWithoutInventoryAdjustmentsInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutInventoryAdjustmentsInput
  connect?: Prisma.StoreWhereUniqueInput
}

export type StoreUpdateOneRequiredWithoutInventoryAdjustmentsNestedInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutInventoryAdjustmentsInput, Prisma.StoreUncheckedCreateWithoutInventoryAdjustmentsInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutInventoryAdjustmentsInput
  upsert?: Prisma.StoreUpsertWithoutInventoryAdjustmentsInput
  connect?: Prisma.StoreWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StoreUpdateToOneWithWhereWithoutInventoryAdjustmentsInput, Prisma.StoreUpdateWithoutInventoryAdjustmentsInput>, Prisma.StoreUncheckedUpdateWithoutInventoryAdjustmentsInput>
}

export type StoreCreateNestedOneWithoutShiftsInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutShiftsInput, Prisma.StoreUncheckedCreateWithoutShiftsInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutShiftsInput
  connect?: Prisma.StoreWhereUniqueInput
}

export type StoreUpdateOneRequiredWithoutShiftsNestedInput = {
  create?: Prisma.XOR<Prisma.StoreCreateWithoutShiftsInput, Prisma.StoreUncheckedCreateWithoutShiftsInput>
  connectOrCreate?: Prisma.StoreCreateOrConnectWithoutShiftsInput
  upsert?: Prisma.StoreUpsertWithoutShiftsInput
  connect?: Prisma.StoreWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StoreUpdateToOneWithWhereWithoutShiftsInput, Prisma.StoreUpdateWithoutShiftsInput>, Prisma.StoreUncheckedUpdateWithoutShiftsInput>
}

export type StoreCreateWithoutBusinessInput = {
  id?: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sales?: Prisma.SaleCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductCreateNestedManyWithoutStoreInput
}

export type StoreUncheckedCreateWithoutBusinessInput = {
  id?: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sales?: Prisma.SaleUncheckedCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftUncheckedCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutStoreInput
}

export type StoreCreateOrConnectWithoutBusinessInput = {
  where: Prisma.StoreWhereUniqueInput
  create: Prisma.XOR<Prisma.StoreCreateWithoutBusinessInput, Prisma.StoreUncheckedCreateWithoutBusinessInput>
}

export type StoreCreateManyBusinessInputEnvelope = {
  data: Prisma.StoreCreateManyBusinessInput | Prisma.StoreCreateManyBusinessInput[]
  skipDuplicates?: boolean
}

export type StoreUpsertWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.StoreWhereUniqueInput
  update: Prisma.XOR<Prisma.StoreUpdateWithoutBusinessInput, Prisma.StoreUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.StoreCreateWithoutBusinessInput, Prisma.StoreUncheckedCreateWithoutBusinessInput>
}

export type StoreUpdateWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.StoreWhereUniqueInput
  data: Prisma.XOR<Prisma.StoreUpdateWithoutBusinessInput, Prisma.StoreUncheckedUpdateWithoutBusinessInput>
}

export type StoreUpdateManyWithWhereWithoutBusinessInput = {
  where: Prisma.StoreScalarWhereInput
  data: Prisma.XOR<Prisma.StoreUpdateManyMutationInput, Prisma.StoreUncheckedUpdateManyWithoutBusinessInput>
}

export type StoreScalarWhereInput = {
  AND?: Prisma.StoreScalarWhereInput | Prisma.StoreScalarWhereInput[]
  OR?: Prisma.StoreScalarWhereInput[]
  NOT?: Prisma.StoreScalarWhereInput | Prisma.StoreScalarWhereInput[]
  id?: Prisma.StringFilter<"Store"> | string
  businessId?: Prisma.StringFilter<"Store"> | string
  name?: Prisma.StringFilter<"Store"> | string
  address?: Prisma.StringNullableFilter<"Store"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Store"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Store"> | Date | string
}

export type StoreCreateWithoutProductsInput = {
  id?: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutStoresInput
  sales?: Prisma.SaleCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftCreateNestedManyWithoutStoreInput
}

export type StoreUncheckedCreateWithoutProductsInput = {
  id?: string
  businessId: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sales?: Prisma.SaleUncheckedCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftUncheckedCreateNestedManyWithoutStoreInput
}

export type StoreCreateOrConnectWithoutProductsInput = {
  where: Prisma.StoreWhereUniqueInput
  create: Prisma.XOR<Prisma.StoreCreateWithoutProductsInput, Prisma.StoreUncheckedCreateWithoutProductsInput>
}

export type StoreUpsertWithoutProductsInput = {
  update: Prisma.XOR<Prisma.StoreUpdateWithoutProductsInput, Prisma.StoreUncheckedUpdateWithoutProductsInput>
  create: Prisma.XOR<Prisma.StoreCreateWithoutProductsInput, Prisma.StoreUncheckedCreateWithoutProductsInput>
  where?: Prisma.StoreWhereInput
}

export type StoreUpdateToOneWithWhereWithoutProductsInput = {
  where?: Prisma.StoreWhereInput
  data: Prisma.XOR<Prisma.StoreUpdateWithoutProductsInput, Prisma.StoreUncheckedUpdateWithoutProductsInput>
}

export type StoreUpdateWithoutProductsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutStoresNestedInput
  sales?: Prisma.SaleUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUpdateManyWithoutStoreNestedInput
}

export type StoreUncheckedUpdateWithoutProductsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sales?: Prisma.SaleUncheckedUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUncheckedUpdateManyWithoutStoreNestedInput
}

export type StoreCreateWithoutSalesInput = {
  id?: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutStoresInput
  purchaseOrders?: Prisma.PurchaseOrderCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductCreateNestedManyWithoutStoreInput
}

export type StoreUncheckedCreateWithoutSalesInput = {
  id?: string
  businessId: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  purchaseOrders?: Prisma.PurchaseOrderUncheckedCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftUncheckedCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutStoreInput
}

export type StoreCreateOrConnectWithoutSalesInput = {
  where: Prisma.StoreWhereUniqueInput
  create: Prisma.XOR<Prisma.StoreCreateWithoutSalesInput, Prisma.StoreUncheckedCreateWithoutSalesInput>
}

export type StoreUpsertWithoutSalesInput = {
  update: Prisma.XOR<Prisma.StoreUpdateWithoutSalesInput, Prisma.StoreUncheckedUpdateWithoutSalesInput>
  create: Prisma.XOR<Prisma.StoreCreateWithoutSalesInput, Prisma.StoreUncheckedCreateWithoutSalesInput>
  where?: Prisma.StoreWhereInput
}

export type StoreUpdateToOneWithWhereWithoutSalesInput = {
  where?: Prisma.StoreWhereInput
  data: Prisma.XOR<Prisma.StoreUpdateWithoutSalesInput, Prisma.StoreUncheckedUpdateWithoutSalesInput>
}

export type StoreUpdateWithoutSalesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutStoresNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUpdateManyWithoutStoreNestedInput
}

export type StoreUncheckedUpdateWithoutSalesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchaseOrders?: Prisma.PurchaseOrderUncheckedUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUncheckedUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUncheckedUpdateManyWithoutStoreNestedInput
}

export type StoreCreateWithoutPurchaseOrdersInput = {
  id?: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutStoresInput
  sales?: Prisma.SaleCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductCreateNestedManyWithoutStoreInput
}

export type StoreUncheckedCreateWithoutPurchaseOrdersInput = {
  id?: string
  businessId: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sales?: Prisma.SaleUncheckedCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftUncheckedCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutStoreInput
}

export type StoreCreateOrConnectWithoutPurchaseOrdersInput = {
  where: Prisma.StoreWhereUniqueInput
  create: Prisma.XOR<Prisma.StoreCreateWithoutPurchaseOrdersInput, Prisma.StoreUncheckedCreateWithoutPurchaseOrdersInput>
}

export type StoreUpsertWithoutPurchaseOrdersInput = {
  update: Prisma.XOR<Prisma.StoreUpdateWithoutPurchaseOrdersInput, Prisma.StoreUncheckedUpdateWithoutPurchaseOrdersInput>
  create: Prisma.XOR<Prisma.StoreCreateWithoutPurchaseOrdersInput, Prisma.StoreUncheckedCreateWithoutPurchaseOrdersInput>
  where?: Prisma.StoreWhereInput
}

export type StoreUpdateToOneWithWhereWithoutPurchaseOrdersInput = {
  where?: Prisma.StoreWhereInput
  data: Prisma.XOR<Prisma.StoreUpdateWithoutPurchaseOrdersInput, Prisma.StoreUncheckedUpdateWithoutPurchaseOrdersInput>
}

export type StoreUpdateWithoutPurchaseOrdersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutStoresNestedInput
  sales?: Prisma.SaleUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUpdateManyWithoutStoreNestedInput
}

export type StoreUncheckedUpdateWithoutPurchaseOrdersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sales?: Prisma.SaleUncheckedUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUncheckedUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUncheckedUpdateManyWithoutStoreNestedInput
}

export type StoreCreateWithoutTransferOrdersFromInput = {
  id?: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutStoresInput
  sales?: Prisma.SaleCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderCreateNestedManyWithoutStoreInput
  transferOrdersTo?: Prisma.TransferOrderCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductCreateNestedManyWithoutStoreInput
}

export type StoreUncheckedCreateWithoutTransferOrdersFromInput = {
  id?: string
  businessId: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sales?: Prisma.SaleUncheckedCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedCreateNestedManyWithoutStoreInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftUncheckedCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutStoreInput
}

export type StoreCreateOrConnectWithoutTransferOrdersFromInput = {
  where: Prisma.StoreWhereUniqueInput
  create: Prisma.XOR<Prisma.StoreCreateWithoutTransferOrdersFromInput, Prisma.StoreUncheckedCreateWithoutTransferOrdersFromInput>
}

export type StoreCreateWithoutTransferOrdersToInput = {
  id?: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutStoresInput
  sales?: Prisma.SaleCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderCreateNestedManyWithoutFromStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductCreateNestedManyWithoutStoreInput
}

export type StoreUncheckedCreateWithoutTransferOrdersToInput = {
  id?: string
  businessId: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sales?: Prisma.SaleUncheckedCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutFromStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedCreateNestedManyWithoutStoreInput
  shifts?: Prisma.ShiftUncheckedCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutStoreInput
}

export type StoreCreateOrConnectWithoutTransferOrdersToInput = {
  where: Prisma.StoreWhereUniqueInput
  create: Prisma.XOR<Prisma.StoreCreateWithoutTransferOrdersToInput, Prisma.StoreUncheckedCreateWithoutTransferOrdersToInput>
}

export type StoreUpsertWithoutTransferOrdersFromInput = {
  update: Prisma.XOR<Prisma.StoreUpdateWithoutTransferOrdersFromInput, Prisma.StoreUncheckedUpdateWithoutTransferOrdersFromInput>
  create: Prisma.XOR<Prisma.StoreCreateWithoutTransferOrdersFromInput, Prisma.StoreUncheckedCreateWithoutTransferOrdersFromInput>
  where?: Prisma.StoreWhereInput
}

export type StoreUpdateToOneWithWhereWithoutTransferOrdersFromInput = {
  where?: Prisma.StoreWhereInput
  data: Prisma.XOR<Prisma.StoreUpdateWithoutTransferOrdersFromInput, Prisma.StoreUncheckedUpdateWithoutTransferOrdersFromInput>
}

export type StoreUpdateWithoutTransferOrdersFromInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutStoresNestedInput
  sales?: Prisma.SaleUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUpdateManyWithoutStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUpdateManyWithoutStoreNestedInput
}

export type StoreUncheckedUpdateWithoutTransferOrdersFromInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sales?: Prisma.SaleUncheckedUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedUpdateManyWithoutStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUncheckedUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUncheckedUpdateManyWithoutStoreNestedInput
}

export type StoreUpsertWithoutTransferOrdersToInput = {
  update: Prisma.XOR<Prisma.StoreUpdateWithoutTransferOrdersToInput, Prisma.StoreUncheckedUpdateWithoutTransferOrdersToInput>
  create: Prisma.XOR<Prisma.StoreCreateWithoutTransferOrdersToInput, Prisma.StoreUncheckedCreateWithoutTransferOrdersToInput>
  where?: Prisma.StoreWhereInput
}

export type StoreUpdateToOneWithWhereWithoutTransferOrdersToInput = {
  where?: Prisma.StoreWhereInput
  data: Prisma.XOR<Prisma.StoreUpdateWithoutTransferOrdersToInput, Prisma.StoreUncheckedUpdateWithoutTransferOrdersToInput>
}

export type StoreUpdateWithoutTransferOrdersToInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutStoresNestedInput
  sales?: Prisma.SaleUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUpdateManyWithoutFromStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUpdateManyWithoutStoreNestedInput
}

export type StoreUncheckedUpdateWithoutTransferOrdersToInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sales?: Prisma.SaleUncheckedUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedUpdateManyWithoutFromStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUncheckedUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUncheckedUpdateManyWithoutStoreNestedInput
}

export type StoreCreateWithoutInventoryAdjustmentsInput = {
  id?: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutStoresInput
  sales?: Prisma.SaleCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderCreateNestedManyWithoutToStoreInput
  shifts?: Prisma.ShiftCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductCreateNestedManyWithoutStoreInput
}

export type StoreUncheckedCreateWithoutInventoryAdjustmentsInput = {
  id?: string
  businessId: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sales?: Prisma.SaleUncheckedCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutToStoreInput
  shifts?: Prisma.ShiftUncheckedCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutStoreInput
}

export type StoreCreateOrConnectWithoutInventoryAdjustmentsInput = {
  where: Prisma.StoreWhereUniqueInput
  create: Prisma.XOR<Prisma.StoreCreateWithoutInventoryAdjustmentsInput, Prisma.StoreUncheckedCreateWithoutInventoryAdjustmentsInput>
}

export type StoreUpsertWithoutInventoryAdjustmentsInput = {
  update: Prisma.XOR<Prisma.StoreUpdateWithoutInventoryAdjustmentsInput, Prisma.StoreUncheckedUpdateWithoutInventoryAdjustmentsInput>
  create: Prisma.XOR<Prisma.StoreCreateWithoutInventoryAdjustmentsInput, Prisma.StoreUncheckedCreateWithoutInventoryAdjustmentsInput>
  where?: Prisma.StoreWhereInput
}

export type StoreUpdateToOneWithWhereWithoutInventoryAdjustmentsInput = {
  where?: Prisma.StoreWhereInput
  data: Prisma.XOR<Prisma.StoreUpdateWithoutInventoryAdjustmentsInput, Prisma.StoreUncheckedUpdateWithoutInventoryAdjustmentsInput>
}

export type StoreUpdateWithoutInventoryAdjustmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutStoresNestedInput
  sales?: Prisma.SaleUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUpdateManyWithoutToStoreNestedInput
  shifts?: Prisma.ShiftUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUpdateManyWithoutStoreNestedInput
}

export type StoreUncheckedUpdateWithoutInventoryAdjustmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sales?: Prisma.SaleUncheckedUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedUpdateManyWithoutToStoreNestedInput
  shifts?: Prisma.ShiftUncheckedUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUncheckedUpdateManyWithoutStoreNestedInput
}

export type StoreCreateWithoutShiftsInput = {
  id?: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutStoresInput
  sales?: Prisma.SaleCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductCreateNestedManyWithoutStoreInput
}

export type StoreUncheckedCreateWithoutShiftsInput = {
  id?: string
  businessId: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sales?: Prisma.SaleUncheckedCreateNestedManyWithoutStoreInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedCreateNestedManyWithoutStoreInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutFromStoreInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedCreateNestedManyWithoutToStoreInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedCreateNestedManyWithoutStoreInput
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutStoreInput
}

export type StoreCreateOrConnectWithoutShiftsInput = {
  where: Prisma.StoreWhereUniqueInput
  create: Prisma.XOR<Prisma.StoreCreateWithoutShiftsInput, Prisma.StoreUncheckedCreateWithoutShiftsInput>
}

export type StoreUpsertWithoutShiftsInput = {
  update: Prisma.XOR<Prisma.StoreUpdateWithoutShiftsInput, Prisma.StoreUncheckedUpdateWithoutShiftsInput>
  create: Prisma.XOR<Prisma.StoreCreateWithoutShiftsInput, Prisma.StoreUncheckedCreateWithoutShiftsInput>
  where?: Prisma.StoreWhereInput
}

export type StoreUpdateToOneWithWhereWithoutShiftsInput = {
  where?: Prisma.StoreWhereInput
  data: Prisma.XOR<Prisma.StoreUpdateWithoutShiftsInput, Prisma.StoreUncheckedUpdateWithoutShiftsInput>
}

export type StoreUpdateWithoutShiftsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutStoresNestedInput
  sales?: Prisma.SaleUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUpdateManyWithoutStoreNestedInput
}

export type StoreUncheckedUpdateWithoutShiftsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sales?: Prisma.SaleUncheckedUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUncheckedUpdateManyWithoutStoreNestedInput
}

export type StoreCreateManyBusinessInput = {
  id?: string
  name: string
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type StoreUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sales?: Prisma.SaleUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUpdateManyWithoutStoreNestedInput
}

export type StoreUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sales?: Prisma.SaleUncheckedUpdateManyWithoutStoreNestedInput
  purchaseOrders?: Prisma.PurchaseOrderUncheckedUpdateManyWithoutStoreNestedInput
  transferOrdersFrom?: Prisma.TransferOrderUncheckedUpdateManyWithoutFromStoreNestedInput
  transferOrdersTo?: Prisma.TransferOrderUncheckedUpdateManyWithoutToStoreNestedInput
  inventoryAdjustments?: Prisma.InventoryAdjustmentUncheckedUpdateManyWithoutStoreNestedInput
  shifts?: Prisma.ShiftUncheckedUpdateManyWithoutStoreNestedInput
  products?: Prisma.ProductUncheckedUpdateManyWithoutStoreNestedInput
}

export type StoreUncheckedUpdateManyWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type StoreCountOutputType
 */

export type StoreCountOutputType = {
  sales: number
  purchaseOrders: number
  transferOrdersFrom: number
  transferOrdersTo: number
  inventoryAdjustments: number
  shifts: number
  products: number
}

export type StoreCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sales?: boolean | StoreCountOutputTypeCountSalesArgs
  purchaseOrders?: boolean | StoreCountOutputTypeCountPurchaseOrdersArgs
  transferOrdersFrom?: boolean | StoreCountOutputTypeCountTransferOrdersFromArgs
  transferOrdersTo?: boolean | StoreCountOutputTypeCountTransferOrdersToArgs
  inventoryAdjustments?: boolean | StoreCountOutputTypeCountInventoryAdjustmentsArgs
  shifts?: boolean | StoreCountOutputTypeCountShiftsArgs
  products?: boolean | StoreCountOutputTypeCountProductsArgs
}

/**
 * StoreCountOutputType without action
 */
export type StoreCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StoreCountOutputType
   */
  select?: Prisma.StoreCountOutputTypeSelect<ExtArgs> | null
}

/**
 * StoreCountOutputType without action
 */
export type StoreCountOutputTypeCountSalesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SaleWhereInput
}

/**
 * StoreCountOutputType without action
 */
export type StoreCountOutputTypeCountPurchaseOrdersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PurchaseOrderWhereInput
}

/**
 * StoreCountOutputType without action
 */
export type StoreCountOutputTypeCountTransferOrdersFromArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransferOrderWhereInput
}

/**
 * StoreCountOutputType without action
 */
export type StoreCountOutputTypeCountTransferOrdersToArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransferOrderWhereInput
}

/**
 * StoreCountOutputType without action
 */
export type StoreCountOutputTypeCountInventoryAdjustmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InventoryAdjustmentWhereInput
}

/**
 * StoreCountOutputType without action
 */
export type StoreCountOutputTypeCountShiftsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ShiftWhereInput
}

/**
 * StoreCountOutputType without action
 */
export type StoreCountOutputTypeCountProductsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductWhereInput
}


export type StoreSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  name?: boolean
  address?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  sales?: boolean | Prisma.Store$salesArgs<ExtArgs>
  purchaseOrders?: boolean | Prisma.Store$purchaseOrdersArgs<ExtArgs>
  transferOrdersFrom?: boolean | Prisma.Store$transferOrdersFromArgs<ExtArgs>
  transferOrdersTo?: boolean | Prisma.Store$transferOrdersToArgs<ExtArgs>
  inventoryAdjustments?: boolean | Prisma.Store$inventoryAdjustmentsArgs<ExtArgs>
  shifts?: boolean | Prisma.Store$shiftsArgs<ExtArgs>
  products?: boolean | Prisma.Store$productsArgs<ExtArgs>
  _count?: boolean | Prisma.StoreCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["store"]>

export type StoreSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  name?: boolean
  address?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["store"]>

export type StoreSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  name?: boolean
  address?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["store"]>

export type StoreSelectScalar = {
  id?: boolean
  businessId?: boolean
  name?: boolean
  address?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type StoreOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "businessId" | "name" | "address" | "createdAt" | "updatedAt", ExtArgs["result"]["store"]>
export type StoreInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  sales?: boolean | Prisma.Store$salesArgs<ExtArgs>
  purchaseOrders?: boolean | Prisma.Store$purchaseOrdersArgs<ExtArgs>
  transferOrdersFrom?: boolean | Prisma.Store$transferOrdersFromArgs<ExtArgs>
  transferOrdersTo?: boolean | Prisma.Store$transferOrdersToArgs<ExtArgs>
  inventoryAdjustments?: boolean | Prisma.Store$inventoryAdjustmentsArgs<ExtArgs>
  shifts?: boolean | Prisma.Store$shiftsArgs<ExtArgs>
  products?: boolean | Prisma.Store$productsArgs<ExtArgs>
  _count?: boolean | Prisma.StoreCountOutputTypeDefaultArgs<ExtArgs>
}
export type StoreIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}
export type StoreIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}

export type $StorePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Store"
  objects: {
    business: Prisma.$BusinessPayload<ExtArgs>
    sales: Prisma.$SalePayload<ExtArgs>[]
    purchaseOrders: Prisma.$PurchaseOrderPayload<ExtArgs>[]
    transferOrdersFrom: Prisma.$TransferOrderPayload<ExtArgs>[]
    transferOrdersTo: Prisma.$TransferOrderPayload<ExtArgs>[]
    inventoryAdjustments: Prisma.$InventoryAdjustmentPayload<ExtArgs>[]
    shifts: Prisma.$ShiftPayload<ExtArgs>[]
    products: Prisma.$ProductPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    businessId: string
    name: string
    address: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["store"]>
  composites: {}
}

export type StoreGetPayload<S extends boolean | null | undefined | StoreDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StorePayload, S>

export type StoreCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StoreCountAggregateInputType | true
  }

export interface StoreDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Store'], meta: { name: 'Store' } }
  /**
   * Find zero or one Store that matches the filter.
   * @param {StoreFindUniqueArgs} args - Arguments to find a Store
   * @example
   * // Get one Store
   * const store = await prisma.store.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StoreFindUniqueArgs>(args: Prisma.SelectSubset<T, StoreFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Store that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StoreFindUniqueOrThrowArgs} args - Arguments to find a Store
   * @example
   * // Get one Store
   * const store = await prisma.store.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StoreFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Store that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StoreFindFirstArgs} args - Arguments to find a Store
   * @example
   * // Get one Store
   * const store = await prisma.store.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StoreFindFirstArgs>(args?: Prisma.SelectSubset<T, StoreFindFirstArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Store that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StoreFindFirstOrThrowArgs} args - Arguments to find a Store
   * @example
   * // Get one Store
   * const store = await prisma.store.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StoreFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StoreFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Stores that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StoreFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Stores
   * const stores = await prisma.store.findMany()
   * 
   * // Get first 10 Stores
   * const stores = await prisma.store.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const storeWithIdOnly = await prisma.store.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StoreFindManyArgs>(args?: Prisma.SelectSubset<T, StoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Store.
   * @param {StoreCreateArgs} args - Arguments to create a Store.
   * @example
   * // Create one Store
   * const Store = await prisma.store.create({
   *   data: {
   *     // ... data to create a Store
   *   }
   * })
   * 
   */
  create<T extends StoreCreateArgs>(args: Prisma.SelectSubset<T, StoreCreateArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Stores.
   * @param {StoreCreateManyArgs} args - Arguments to create many Stores.
   * @example
   * // Create many Stores
   * const store = await prisma.store.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StoreCreateManyArgs>(args?: Prisma.SelectSubset<T, StoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Stores and returns the data saved in the database.
   * @param {StoreCreateManyAndReturnArgs} args - Arguments to create many Stores.
   * @example
   * // Create many Stores
   * const store = await prisma.store.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Stores and only return the `id`
   * const storeWithIdOnly = await prisma.store.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StoreCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Store.
   * @param {StoreDeleteArgs} args - Arguments to delete one Store.
   * @example
   * // Delete one Store
   * const Store = await prisma.store.delete({
   *   where: {
   *     // ... filter to delete one Store
   *   }
   * })
   * 
   */
  delete<T extends StoreDeleteArgs>(args: Prisma.SelectSubset<T, StoreDeleteArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Store.
   * @param {StoreUpdateArgs} args - Arguments to update one Store.
   * @example
   * // Update one Store
   * const store = await prisma.store.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StoreUpdateArgs>(args: Prisma.SelectSubset<T, StoreUpdateArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Stores.
   * @param {StoreDeleteManyArgs} args - Arguments to filter Stores to delete.
   * @example
   * // Delete a few Stores
   * const { count } = await prisma.store.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StoreDeleteManyArgs>(args?: Prisma.SelectSubset<T, StoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Stores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StoreUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Stores
   * const store = await prisma.store.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StoreUpdateManyArgs>(args: Prisma.SelectSubset<T, StoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Stores and returns the data updated in the database.
   * @param {StoreUpdateManyAndReturnArgs} args - Arguments to update many Stores.
   * @example
   * // Update many Stores
   * const store = await prisma.store.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Stores and only return the `id`
   * const storeWithIdOnly = await prisma.store.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StoreUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Store.
   * @param {StoreUpsertArgs} args - Arguments to update or create a Store.
   * @example
   * // Update or create a Store
   * const store = await prisma.store.upsert({
   *   create: {
   *     // ... data to create a Store
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Store we want to update
   *   }
   * })
   */
  upsert<T extends StoreUpsertArgs>(args: Prisma.SelectSubset<T, StoreUpsertArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Stores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StoreCountArgs} args - Arguments to filter Stores to count.
   * @example
   * // Count the number of Stores
   * const count = await prisma.store.count({
   *   where: {
   *     // ... the filter for the Stores we want to count
   *   }
   * })
  **/
  count<T extends StoreCountArgs>(
    args?: Prisma.Subset<T, StoreCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StoreCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Store.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StoreAggregateArgs>(args: Prisma.Subset<T, StoreAggregateArgs>): Prisma.PrismaPromise<GetStoreAggregateType<T>>

  /**
   * Group by Store.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StoreGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StoreGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StoreGroupByArgs['orderBy'] }
      : { orderBy?: StoreGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Store model
 */
readonly fields: StoreFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Store.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StoreClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  business<T extends Prisma.BusinessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BusinessDefaultArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  sales<T extends Prisma.Store$salesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Store$salesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  purchaseOrders<T extends Prisma.Store$purchaseOrdersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Store$purchaseOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  transferOrdersFrom<T extends Prisma.Store$transferOrdersFromArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Store$transferOrdersFromArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  transferOrdersTo<T extends Prisma.Store$transferOrdersToArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Store$transferOrdersToArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  inventoryAdjustments<T extends Prisma.Store$inventoryAdjustmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Store$inventoryAdjustmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InventoryAdjustmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  shifts<T extends Prisma.Store$shiftsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Store$shiftsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  products<T extends Prisma.Store$productsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Store$productsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Store model
 */
export interface StoreFieldRefs {
  readonly id: Prisma.FieldRef<"Store", 'String'>
  readonly businessId: Prisma.FieldRef<"Store", 'String'>
  readonly name: Prisma.FieldRef<"Store", 'String'>
  readonly address: Prisma.FieldRef<"Store", 'String'>
  readonly createdAt: Prisma.FieldRef<"Store", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Store", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Store findUnique
 */
export type StoreFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Store
   */
  select?: Prisma.StoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Store
   */
  omit?: Prisma.StoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoreInclude<ExtArgs> | null
  /**
   * Filter, which Store to fetch.
   */
  where: Prisma.StoreWhereUniqueInput
}

/**
 * Store findUniqueOrThrow
 */
export type StoreFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Store
   */
  select?: Prisma.StoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Store
   */
  omit?: Prisma.StoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoreInclude<ExtArgs> | null
  /**
   * Filter, which Store to fetch.
   */
  where: Prisma.StoreWhereUniqueInput
}

/**
 * Store findFirst
 */
export type StoreFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Store
   */
  select?: Prisma.StoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Store
   */
  omit?: Prisma.StoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoreInclude<ExtArgs> | null
  /**
   * Filter, which Store to fetch.
   */
  where?: Prisma.StoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Stores to fetch.
   */
  orderBy?: Prisma.StoreOrderByWithRelationInput | Prisma.StoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Stores.
   */
  cursor?: Prisma.StoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Stores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Stores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Stores.
   */
  distinct?: Prisma.StoreScalarFieldEnum | Prisma.StoreScalarFieldEnum[]
}

/**
 * Store findFirstOrThrow
 */
export type StoreFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Store
   */
  select?: Prisma.StoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Store
   */
  omit?: Prisma.StoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoreInclude<ExtArgs> | null
  /**
   * Filter, which Store to fetch.
   */
  where?: Prisma.StoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Stores to fetch.
   */
  orderBy?: Prisma.StoreOrderByWithRelationInput | Prisma.StoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Stores.
   */
  cursor?: Prisma.StoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Stores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Stores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Stores.
   */
  distinct?: Prisma.StoreScalarFieldEnum | Prisma.StoreScalarFieldEnum[]
}

/**
 * Store findMany
 */
export type StoreFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Store
   */
  select?: Prisma.StoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Store
   */
  omit?: Prisma.StoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoreInclude<ExtArgs> | null
  /**
   * Filter, which Stores to fetch.
   */
  where?: Prisma.StoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Stores to fetch.
   */
  orderBy?: Prisma.StoreOrderByWithRelationInput | Prisma.StoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Stores.
   */
  cursor?: Prisma.StoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Stores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Stores.
   */
  skip?: number
  distinct?: Prisma.StoreScalarFieldEnum | Prisma.StoreScalarFieldEnum[]
}

/**
 * Store create
 */
export type StoreCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Store
   */
  select?: Prisma.StoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Store
   */
  omit?: Prisma.StoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoreInclude<ExtArgs> | null
  /**
   * The data needed to create a Store.
   */
  data: Prisma.XOR<Prisma.StoreCreateInput, Prisma.StoreUncheckedCreateInput>
}

/**
 * Store createMany
 */
export type StoreCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Stores.
   */
  data: Prisma.StoreCreateManyInput | Prisma.StoreCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Store createManyAndReturn
 */
export type StoreCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Store
   */
  select?: Prisma.StoreSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Store
   */
  omit?: Prisma.StoreOmit<ExtArgs> | null
  /**
   * The data used to create many Stores.
   */
  data: Prisma.StoreCreateManyInput | Prisma.StoreCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoreIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Store update
 */
export type StoreUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Store
   */
  select?: Prisma.StoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Store
   */
  omit?: Prisma.StoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoreInclude<ExtArgs> | null
  /**
   * The data needed to update a Store.
   */
  data: Prisma.XOR<Prisma.StoreUpdateInput, Prisma.StoreUncheckedUpdateInput>
  /**
   * Choose, which Store to update.
   */
  where: Prisma.StoreWhereUniqueInput
}

/**
 * Store updateMany
 */
export type StoreUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Stores.
   */
  data: Prisma.XOR<Prisma.StoreUpdateManyMutationInput, Prisma.StoreUncheckedUpdateManyInput>
  /**
   * Filter which Stores to update
   */
  where?: Prisma.StoreWhereInput
  /**
   * Limit how many Stores to update.
   */
  limit?: number
}

/**
 * Store updateManyAndReturn
 */
export type StoreUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Store
   */
  select?: Prisma.StoreSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Store
   */
  omit?: Prisma.StoreOmit<ExtArgs> | null
  /**
   * The data used to update Stores.
   */
  data: Prisma.XOR<Prisma.StoreUpdateManyMutationInput, Prisma.StoreUncheckedUpdateManyInput>
  /**
   * Filter which Stores to update
   */
  where?: Prisma.StoreWhereInput
  /**
   * Limit how many Stores to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoreIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Store upsert
 */
export type StoreUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Store
   */
  select?: Prisma.StoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Store
   */
  omit?: Prisma.StoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoreInclude<ExtArgs> | null
  /**
   * The filter to search for the Store to update in case it exists.
   */
  where: Prisma.StoreWhereUniqueInput
  /**
   * In case the Store found by the `where` argument doesn't exist, create a new Store with this data.
   */
  create: Prisma.XOR<Prisma.StoreCreateInput, Prisma.StoreUncheckedCreateInput>
  /**
   * In case the Store was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StoreUpdateInput, Prisma.StoreUncheckedUpdateInput>
}

/**
 * Store delete
 */
export type StoreDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Store
   */
  select?: Prisma.StoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Store
   */
  omit?: Prisma.StoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoreInclude<ExtArgs> | null
  /**
   * Filter which Store to delete.
   */
  where: Prisma.StoreWhereUniqueInput
}

/**
 * Store deleteMany
 */
export type StoreDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Stores to delete
   */
  where?: Prisma.StoreWhereInput
  /**
   * Limit how many Stores to delete.
   */
  limit?: number
}

/**
 * Store.sales
 */
export type Store$salesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sale
   */
  select?: Prisma.SaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sale
   */
  omit?: Prisma.SaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleInclude<ExtArgs> | null
  where?: Prisma.SaleWhereInput
  orderBy?: Prisma.SaleOrderByWithRelationInput | Prisma.SaleOrderByWithRelationInput[]
  cursor?: Prisma.SaleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SaleScalarFieldEnum | Prisma.SaleScalarFieldEnum[]
}

/**
 * Store.purchaseOrders
 */
export type Store$purchaseOrdersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderInclude<ExtArgs> | null
  where?: Prisma.PurchaseOrderWhereInput
  orderBy?: Prisma.PurchaseOrderOrderByWithRelationInput | Prisma.PurchaseOrderOrderByWithRelationInput[]
  cursor?: Prisma.PurchaseOrderWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PurchaseOrderScalarFieldEnum | Prisma.PurchaseOrderScalarFieldEnum[]
}

/**
 * Store.transferOrdersFrom
 */
export type Store$transferOrdersFromArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderInclude<ExtArgs> | null
  where?: Prisma.TransferOrderWhereInput
  orderBy?: Prisma.TransferOrderOrderByWithRelationInput | Prisma.TransferOrderOrderByWithRelationInput[]
  cursor?: Prisma.TransferOrderWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransferOrderScalarFieldEnum | Prisma.TransferOrderScalarFieldEnum[]
}

/**
 * Store.transferOrdersTo
 */
export type Store$transferOrdersToArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrder
   */
  select?: Prisma.TransferOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrder
   */
  omit?: Prisma.TransferOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderInclude<ExtArgs> | null
  where?: Prisma.TransferOrderWhereInput
  orderBy?: Prisma.TransferOrderOrderByWithRelationInput | Prisma.TransferOrderOrderByWithRelationInput[]
  cursor?: Prisma.TransferOrderWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransferOrderScalarFieldEnum | Prisma.TransferOrderScalarFieldEnum[]
}

/**
 * Store.inventoryAdjustments
 */
export type Store$inventoryAdjustmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InventoryAdjustment
   */
  select?: Prisma.InventoryAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InventoryAdjustment
   */
  omit?: Prisma.InventoryAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryAdjustmentInclude<ExtArgs> | null
  where?: Prisma.InventoryAdjustmentWhereInput
  orderBy?: Prisma.InventoryAdjustmentOrderByWithRelationInput | Prisma.InventoryAdjustmentOrderByWithRelationInput[]
  cursor?: Prisma.InventoryAdjustmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InventoryAdjustmentScalarFieldEnum | Prisma.InventoryAdjustmentScalarFieldEnum[]
}

/**
 * Store.shifts
 */
export type Store$shiftsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftInclude<ExtArgs> | null
  where?: Prisma.ShiftWhereInput
  orderBy?: Prisma.ShiftOrderByWithRelationInput | Prisma.ShiftOrderByWithRelationInput[]
  cursor?: Prisma.ShiftWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ShiftScalarFieldEnum | Prisma.ShiftScalarFieldEnum[]
}

/**
 * Store.products
 */
export type Store$productsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Product
   */
  select?: Prisma.ProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Product
   */
  omit?: Prisma.ProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInclude<ExtArgs> | null
  where?: Prisma.ProductWhereInput
  orderBy?: Prisma.ProductOrderByWithRelationInput | Prisma.ProductOrderByWithRelationInput[]
  cursor?: Prisma.ProductWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductScalarFieldEnum | Prisma.ProductScalarFieldEnum[]
}

/**
 * Store without action
 */
export type StoreDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Store
   */
  select?: Prisma.StoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Store
   */
  omit?: Prisma.StoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StoreInclude<ExtArgs> | null
}
