
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FreelanceService` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FreelanceService
 * 
 */
export type FreelanceServiceModel = runtime.Types.Result.DefaultSelection<Prisma.$FreelanceServicePayload>

export type AggregateFreelanceService = {
  _count: FreelanceServiceCountAggregateOutputType | null
  _avg: FreelanceServiceAvgAggregateOutputType | null
  _sum: FreelanceServiceSumAggregateOutputType | null
  _min: FreelanceServiceMinAggregateOutputType | null
  _max: FreelanceServiceMaxAggregateOutputType | null
}

export type FreelanceServiceAvgAggregateOutputType = {
  rate: number | null
}

export type FreelanceServiceSumAggregateOutputType = {
  rate: number | null
}

export type FreelanceServiceMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  isHourly: boolean | null
  rate: number | null
  category: $Enums.FreelanceServiceCategory | null
  businessId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FreelanceServiceMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  isHourly: boolean | null
  rate: number | null
  category: $Enums.FreelanceServiceCategory | null
  businessId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FreelanceServiceCountAggregateOutputType = {
  id: number
  title: number
  description: number
  isHourly: number
  rate: number
  category: number
  businessId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type FreelanceServiceAvgAggregateInputType = {
  rate?: true
}

export type FreelanceServiceSumAggregateInputType = {
  rate?: true
}

export type FreelanceServiceMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  isHourly?: true
  rate?: true
  category?: true
  businessId?: true
  createdAt?: true
  updatedAt?: true
}

export type FreelanceServiceMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  isHourly?: true
  rate?: true
  category?: true
  businessId?: true
  createdAt?: true
  updatedAt?: true
}

export type FreelanceServiceCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  isHourly?: true
  rate?: true
  category?: true
  businessId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FreelanceServiceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FreelanceService to aggregate.
   */
  where?: Prisma.FreelanceServiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FreelanceServices to fetch.
   */
  orderBy?: Prisma.FreelanceServiceOrderByWithRelationInput | Prisma.FreelanceServiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FreelanceServiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FreelanceServices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FreelanceServices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FreelanceServices
  **/
  _count?: true | FreelanceServiceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FreelanceServiceAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FreelanceServiceSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FreelanceServiceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FreelanceServiceMaxAggregateInputType
}

export type GetFreelanceServiceAggregateType<T extends FreelanceServiceAggregateArgs> = {
      [P in keyof T & keyof AggregateFreelanceService]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFreelanceService[P]>
    : Prisma.GetScalarType<T[P], AggregateFreelanceService[P]>
}




export type FreelanceServiceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FreelanceServiceWhereInput
  orderBy?: Prisma.FreelanceServiceOrderByWithAggregationInput | Prisma.FreelanceServiceOrderByWithAggregationInput[]
  by: Prisma.FreelanceServiceScalarFieldEnum[] | Prisma.FreelanceServiceScalarFieldEnum
  having?: Prisma.FreelanceServiceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FreelanceServiceCountAggregateInputType | true
  _avg?: FreelanceServiceAvgAggregateInputType
  _sum?: FreelanceServiceSumAggregateInputType
  _min?: FreelanceServiceMinAggregateInputType
  _max?: FreelanceServiceMaxAggregateInputType
}

export type FreelanceServiceGroupByOutputType = {
  id: string
  title: string
  description: string | null
  isHourly: boolean
  rate: number
  category: $Enums.FreelanceServiceCategory | null
  businessId: string
  createdAt: Date
  updatedAt: Date
  _count: FreelanceServiceCountAggregateOutputType | null
  _avg: FreelanceServiceAvgAggregateOutputType | null
  _sum: FreelanceServiceSumAggregateOutputType | null
  _min: FreelanceServiceMinAggregateOutputType | null
  _max: FreelanceServiceMaxAggregateOutputType | null
}

type GetFreelanceServiceGroupByPayload<T extends FreelanceServiceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FreelanceServiceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FreelanceServiceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FreelanceServiceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FreelanceServiceGroupByOutputType[P]>
      }
    >
  > 



export type FreelanceServiceWhereInput = {
  AND?: Prisma.FreelanceServiceWhereInput | Prisma.FreelanceServiceWhereInput[]
  OR?: Prisma.FreelanceServiceWhereInput[]
  NOT?: Prisma.FreelanceServiceWhereInput | Prisma.FreelanceServiceWhereInput[]
  id?: Prisma.StringFilter<"FreelanceService"> | string
  title?: Prisma.StringFilter<"FreelanceService"> | string
  description?: Prisma.StringNullableFilter<"FreelanceService"> | string | null
  isHourly?: Prisma.BoolFilter<"FreelanceService"> | boolean
  rate?: Prisma.FloatFilter<"FreelanceService"> | number
  category?: Prisma.EnumFreelanceServiceCategoryNullableFilter<"FreelanceService"> | $Enums.FreelanceServiceCategory | null
  businessId?: Prisma.StringFilter<"FreelanceService"> | string
  createdAt?: Prisma.DateTimeFilter<"FreelanceService"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FreelanceService"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
  orders?: Prisma.FreelanceOrderListRelationFilter
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentListRelationFilter
  chats?: Prisma.ChatListRelationFilter
}

export type FreelanceServiceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  isHourly?: Prisma.SortOrder
  rate?: Prisma.SortOrder
  category?: Prisma.SortOrderInput | Prisma.SortOrder
  businessId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  business?: Prisma.BusinessOrderByWithRelationInput
  orders?: Prisma.FreelanceOrderOrderByRelationAggregateInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentOrderByRelationAggregateInput
  chats?: Prisma.ChatOrderByRelationAggregateInput
}

export type FreelanceServiceWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FreelanceServiceWhereInput | Prisma.FreelanceServiceWhereInput[]
  OR?: Prisma.FreelanceServiceWhereInput[]
  NOT?: Prisma.FreelanceServiceWhereInput | Prisma.FreelanceServiceWhereInput[]
  title?: Prisma.StringFilter<"FreelanceService"> | string
  description?: Prisma.StringNullableFilter<"FreelanceService"> | string | null
  isHourly?: Prisma.BoolFilter<"FreelanceService"> | boolean
  rate?: Prisma.FloatFilter<"FreelanceService"> | number
  category?: Prisma.EnumFreelanceServiceCategoryNullableFilter<"FreelanceService"> | $Enums.FreelanceServiceCategory | null
  businessId?: Prisma.StringFilter<"FreelanceService"> | string
  createdAt?: Prisma.DateTimeFilter<"FreelanceService"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FreelanceService"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
  orders?: Prisma.FreelanceOrderListRelationFilter
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentListRelationFilter
  chats?: Prisma.ChatListRelationFilter
}, "id">

export type FreelanceServiceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  isHourly?: Prisma.SortOrder
  rate?: Prisma.SortOrder
  category?: Prisma.SortOrderInput | Prisma.SortOrder
  businessId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FreelanceServiceCountOrderByAggregateInput
  _avg?: Prisma.FreelanceServiceAvgOrderByAggregateInput
  _max?: Prisma.FreelanceServiceMaxOrderByAggregateInput
  _min?: Prisma.FreelanceServiceMinOrderByAggregateInput
  _sum?: Prisma.FreelanceServiceSumOrderByAggregateInput
}

export type FreelanceServiceScalarWhereWithAggregatesInput = {
  AND?: Prisma.FreelanceServiceScalarWhereWithAggregatesInput | Prisma.FreelanceServiceScalarWhereWithAggregatesInput[]
  OR?: Prisma.FreelanceServiceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FreelanceServiceScalarWhereWithAggregatesInput | Prisma.FreelanceServiceScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FreelanceService"> | string
  title?: Prisma.StringWithAggregatesFilter<"FreelanceService"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"FreelanceService"> | string | null
  isHourly?: Prisma.BoolWithAggregatesFilter<"FreelanceService"> | boolean
  rate?: Prisma.FloatWithAggregatesFilter<"FreelanceService"> | number
  category?: Prisma.EnumFreelanceServiceCategoryNullableWithAggregatesFilter<"FreelanceService"> | $Enums.FreelanceServiceCategory | null
  businessId?: Prisma.StringWithAggregatesFilter<"FreelanceService"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FreelanceService"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FreelanceService"> | Date | string
}

export type FreelanceServiceCreateInput = {
  id?: string
  title: string
  description?: string | null
  isHourly?: boolean
  rate: number
  category?: $Enums.FreelanceServiceCategory | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutFreelanceServicesInput
  orders?: Prisma.FreelanceOrderCreateNestedManyWithoutServiceInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentCreateNestedManyWithoutFreelanceServiceInput
  chats?: Prisma.ChatCreateNestedManyWithoutServiceInput
}

export type FreelanceServiceUncheckedCreateInput = {
  id?: string
  title: string
  description?: string | null
  isHourly?: boolean
  rate: number
  category?: $Enums.FreelanceServiceCategory | null
  businessId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  orders?: Prisma.FreelanceOrderUncheckedCreateNestedManyWithoutServiceInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentUncheckedCreateNestedManyWithoutFreelanceServiceInput
  chats?: Prisma.ChatUncheckedCreateNestedManyWithoutServiceInput
}

export type FreelanceServiceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutFreelanceServicesNestedInput
  orders?: Prisma.FreelanceOrderUpdateManyWithoutServiceNestedInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentUpdateManyWithoutFreelanceServiceNestedInput
  chats?: Prisma.ChatUpdateManyWithoutServiceNestedInput
}

export type FreelanceServiceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  orders?: Prisma.FreelanceOrderUncheckedUpdateManyWithoutServiceNestedInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentUncheckedUpdateManyWithoutFreelanceServiceNestedInput
  chats?: Prisma.ChatUncheckedUpdateManyWithoutServiceNestedInput
}

export type FreelanceServiceCreateManyInput = {
  id?: string
  title: string
  description?: string | null
  isHourly?: boolean
  rate: number
  category?: $Enums.FreelanceServiceCategory | null
  businessId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FreelanceServiceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceServiceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceServiceListRelationFilter = {
  every?: Prisma.FreelanceServiceWhereInput
  some?: Prisma.FreelanceServiceWhereInput
  none?: Prisma.FreelanceServiceWhereInput
}

export type FreelanceServiceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FreelanceServiceNullableScalarRelationFilter = {
  is?: Prisma.FreelanceServiceWhereInput | null
  isNot?: Prisma.FreelanceServiceWhereInput | null
}

export type FreelanceServiceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isHourly?: Prisma.SortOrder
  rate?: Prisma.SortOrder
  category?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FreelanceServiceAvgOrderByAggregateInput = {
  rate?: Prisma.SortOrder
}

export type FreelanceServiceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isHourly?: Prisma.SortOrder
  rate?: Prisma.SortOrder
  category?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FreelanceServiceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isHourly?: Prisma.SortOrder
  rate?: Prisma.SortOrder
  category?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FreelanceServiceSumOrderByAggregateInput = {
  rate?: Prisma.SortOrder
}

export type FreelanceServiceScalarRelationFilter = {
  is?: Prisma.FreelanceServiceWhereInput
  isNot?: Prisma.FreelanceServiceWhereInput
}

export type FreelanceServiceCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutBusinessInput, Prisma.FreelanceServiceUncheckedCreateWithoutBusinessInput> | Prisma.FreelanceServiceCreateWithoutBusinessInput[] | Prisma.FreelanceServiceUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.FreelanceServiceCreateOrConnectWithoutBusinessInput | Prisma.FreelanceServiceCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.FreelanceServiceCreateManyBusinessInputEnvelope
  connect?: Prisma.FreelanceServiceWhereUniqueInput | Prisma.FreelanceServiceWhereUniqueInput[]
}

export type FreelanceServiceUncheckedCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutBusinessInput, Prisma.FreelanceServiceUncheckedCreateWithoutBusinessInput> | Prisma.FreelanceServiceCreateWithoutBusinessInput[] | Prisma.FreelanceServiceUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.FreelanceServiceCreateOrConnectWithoutBusinessInput | Prisma.FreelanceServiceCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.FreelanceServiceCreateManyBusinessInputEnvelope
  connect?: Prisma.FreelanceServiceWhereUniqueInput | Prisma.FreelanceServiceWhereUniqueInput[]
}

export type FreelanceServiceUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutBusinessInput, Prisma.FreelanceServiceUncheckedCreateWithoutBusinessInput> | Prisma.FreelanceServiceCreateWithoutBusinessInput[] | Prisma.FreelanceServiceUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.FreelanceServiceCreateOrConnectWithoutBusinessInput | Prisma.FreelanceServiceCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.FreelanceServiceUpsertWithWhereUniqueWithoutBusinessInput | Prisma.FreelanceServiceUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.FreelanceServiceCreateManyBusinessInputEnvelope
  set?: Prisma.FreelanceServiceWhereUniqueInput | Prisma.FreelanceServiceWhereUniqueInput[]
  disconnect?: Prisma.FreelanceServiceWhereUniqueInput | Prisma.FreelanceServiceWhereUniqueInput[]
  delete?: Prisma.FreelanceServiceWhereUniqueInput | Prisma.FreelanceServiceWhereUniqueInput[]
  connect?: Prisma.FreelanceServiceWhereUniqueInput | Prisma.FreelanceServiceWhereUniqueInput[]
  update?: Prisma.FreelanceServiceUpdateWithWhereUniqueWithoutBusinessInput | Prisma.FreelanceServiceUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.FreelanceServiceUpdateManyWithWhereWithoutBusinessInput | Prisma.FreelanceServiceUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.FreelanceServiceScalarWhereInput | Prisma.FreelanceServiceScalarWhereInput[]
}

export type FreelanceServiceUncheckedUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutBusinessInput, Prisma.FreelanceServiceUncheckedCreateWithoutBusinessInput> | Prisma.FreelanceServiceCreateWithoutBusinessInput[] | Prisma.FreelanceServiceUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.FreelanceServiceCreateOrConnectWithoutBusinessInput | Prisma.FreelanceServiceCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.FreelanceServiceUpsertWithWhereUniqueWithoutBusinessInput | Prisma.FreelanceServiceUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.FreelanceServiceCreateManyBusinessInputEnvelope
  set?: Prisma.FreelanceServiceWhereUniqueInput | Prisma.FreelanceServiceWhereUniqueInput[]
  disconnect?: Prisma.FreelanceServiceWhereUniqueInput | Prisma.FreelanceServiceWhereUniqueInput[]
  delete?: Prisma.FreelanceServiceWhereUniqueInput | Prisma.FreelanceServiceWhereUniqueInput[]
  connect?: Prisma.FreelanceServiceWhereUniqueInput | Prisma.FreelanceServiceWhereUniqueInput[]
  update?: Prisma.FreelanceServiceUpdateWithWhereUniqueWithoutBusinessInput | Prisma.FreelanceServiceUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.FreelanceServiceUpdateManyWithWhereWithoutBusinessInput | Prisma.FreelanceServiceUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.FreelanceServiceScalarWhereInput | Prisma.FreelanceServiceScalarWhereInput[]
}

export type FreelanceServiceCreateNestedOneWithoutChatsInput = {
  create?: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutChatsInput, Prisma.FreelanceServiceUncheckedCreateWithoutChatsInput>
  connectOrCreate?: Prisma.FreelanceServiceCreateOrConnectWithoutChatsInput
  connect?: Prisma.FreelanceServiceWhereUniqueInput
}

export type FreelanceServiceUpdateOneWithoutChatsNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutChatsInput, Prisma.FreelanceServiceUncheckedCreateWithoutChatsInput>
  connectOrCreate?: Prisma.FreelanceServiceCreateOrConnectWithoutChatsInput
  upsert?: Prisma.FreelanceServiceUpsertWithoutChatsInput
  disconnect?: Prisma.FreelanceServiceWhereInput | boolean
  delete?: Prisma.FreelanceServiceWhereInput | boolean
  connect?: Prisma.FreelanceServiceWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FreelanceServiceUpdateToOneWithWhereWithoutChatsInput, Prisma.FreelanceServiceUpdateWithoutChatsInput>, Prisma.FreelanceServiceUncheckedUpdateWithoutChatsInput>
}

export type NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput = {
  set?: $Enums.FreelanceServiceCategory | null
}

export type FreelanceServiceCreateNestedOneWithoutWorkerServiceAssignmentsInput = {
  create?: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutWorkerServiceAssignmentsInput, Prisma.FreelanceServiceUncheckedCreateWithoutWorkerServiceAssignmentsInput>
  connectOrCreate?: Prisma.FreelanceServiceCreateOrConnectWithoutWorkerServiceAssignmentsInput
  connect?: Prisma.FreelanceServiceWhereUniqueInput
}

export type FreelanceServiceUpdateOneRequiredWithoutWorkerServiceAssignmentsNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutWorkerServiceAssignmentsInput, Prisma.FreelanceServiceUncheckedCreateWithoutWorkerServiceAssignmentsInput>
  connectOrCreate?: Prisma.FreelanceServiceCreateOrConnectWithoutWorkerServiceAssignmentsInput
  upsert?: Prisma.FreelanceServiceUpsertWithoutWorkerServiceAssignmentsInput
  connect?: Prisma.FreelanceServiceWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FreelanceServiceUpdateToOneWithWhereWithoutWorkerServiceAssignmentsInput, Prisma.FreelanceServiceUpdateWithoutWorkerServiceAssignmentsInput>, Prisma.FreelanceServiceUncheckedUpdateWithoutWorkerServiceAssignmentsInput>
}

export type FreelanceServiceCreateNestedOneWithoutOrdersInput = {
  create?: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutOrdersInput, Prisma.FreelanceServiceUncheckedCreateWithoutOrdersInput>
  connectOrCreate?: Prisma.FreelanceServiceCreateOrConnectWithoutOrdersInput
  connect?: Prisma.FreelanceServiceWhereUniqueInput
}

export type FreelanceServiceUpdateOneRequiredWithoutOrdersNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutOrdersInput, Prisma.FreelanceServiceUncheckedCreateWithoutOrdersInput>
  connectOrCreate?: Prisma.FreelanceServiceCreateOrConnectWithoutOrdersInput
  upsert?: Prisma.FreelanceServiceUpsertWithoutOrdersInput
  connect?: Prisma.FreelanceServiceWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FreelanceServiceUpdateToOneWithWhereWithoutOrdersInput, Prisma.FreelanceServiceUpdateWithoutOrdersInput>, Prisma.FreelanceServiceUncheckedUpdateWithoutOrdersInput>
}

export type FreelanceServiceCreateWithoutBusinessInput = {
  id?: string
  title: string
  description?: string | null
  isHourly?: boolean
  rate: number
  category?: $Enums.FreelanceServiceCategory | null
  createdAt?: Date | string
  updatedAt?: Date | string
  orders?: Prisma.FreelanceOrderCreateNestedManyWithoutServiceInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentCreateNestedManyWithoutFreelanceServiceInput
  chats?: Prisma.ChatCreateNestedManyWithoutServiceInput
}

export type FreelanceServiceUncheckedCreateWithoutBusinessInput = {
  id?: string
  title: string
  description?: string | null
  isHourly?: boolean
  rate: number
  category?: $Enums.FreelanceServiceCategory | null
  createdAt?: Date | string
  updatedAt?: Date | string
  orders?: Prisma.FreelanceOrderUncheckedCreateNestedManyWithoutServiceInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentUncheckedCreateNestedManyWithoutFreelanceServiceInput
  chats?: Prisma.ChatUncheckedCreateNestedManyWithoutServiceInput
}

export type FreelanceServiceCreateOrConnectWithoutBusinessInput = {
  where: Prisma.FreelanceServiceWhereUniqueInput
  create: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutBusinessInput, Prisma.FreelanceServiceUncheckedCreateWithoutBusinessInput>
}

export type FreelanceServiceCreateManyBusinessInputEnvelope = {
  data: Prisma.FreelanceServiceCreateManyBusinessInput | Prisma.FreelanceServiceCreateManyBusinessInput[]
  skipDuplicates?: boolean
}

export type FreelanceServiceUpsertWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.FreelanceServiceWhereUniqueInput
  update: Prisma.XOR<Prisma.FreelanceServiceUpdateWithoutBusinessInput, Prisma.FreelanceServiceUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutBusinessInput, Prisma.FreelanceServiceUncheckedCreateWithoutBusinessInput>
}

export type FreelanceServiceUpdateWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.FreelanceServiceWhereUniqueInput
  data: Prisma.XOR<Prisma.FreelanceServiceUpdateWithoutBusinessInput, Prisma.FreelanceServiceUncheckedUpdateWithoutBusinessInput>
}

export type FreelanceServiceUpdateManyWithWhereWithoutBusinessInput = {
  where: Prisma.FreelanceServiceScalarWhereInput
  data: Prisma.XOR<Prisma.FreelanceServiceUpdateManyMutationInput, Prisma.FreelanceServiceUncheckedUpdateManyWithoutBusinessInput>
}

export type FreelanceServiceScalarWhereInput = {
  AND?: Prisma.FreelanceServiceScalarWhereInput | Prisma.FreelanceServiceScalarWhereInput[]
  OR?: Prisma.FreelanceServiceScalarWhereInput[]
  NOT?: Prisma.FreelanceServiceScalarWhereInput | Prisma.FreelanceServiceScalarWhereInput[]
  id?: Prisma.StringFilter<"FreelanceService"> | string
  title?: Prisma.StringFilter<"FreelanceService"> | string
  description?: Prisma.StringNullableFilter<"FreelanceService"> | string | null
  isHourly?: Prisma.BoolFilter<"FreelanceService"> | boolean
  rate?: Prisma.FloatFilter<"FreelanceService"> | number
  category?: Prisma.EnumFreelanceServiceCategoryNullableFilter<"FreelanceService"> | $Enums.FreelanceServiceCategory | null
  businessId?: Prisma.StringFilter<"FreelanceService"> | string
  createdAt?: Prisma.DateTimeFilter<"FreelanceService"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FreelanceService"> | Date | string
}

export type FreelanceServiceCreateWithoutChatsInput = {
  id?: string
  title: string
  description?: string | null
  isHourly?: boolean
  rate: number
  category?: $Enums.FreelanceServiceCategory | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutFreelanceServicesInput
  orders?: Prisma.FreelanceOrderCreateNestedManyWithoutServiceInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentCreateNestedManyWithoutFreelanceServiceInput
}

export type FreelanceServiceUncheckedCreateWithoutChatsInput = {
  id?: string
  title: string
  description?: string | null
  isHourly?: boolean
  rate: number
  category?: $Enums.FreelanceServiceCategory | null
  businessId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  orders?: Prisma.FreelanceOrderUncheckedCreateNestedManyWithoutServiceInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentUncheckedCreateNestedManyWithoutFreelanceServiceInput
}

export type FreelanceServiceCreateOrConnectWithoutChatsInput = {
  where: Prisma.FreelanceServiceWhereUniqueInput
  create: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutChatsInput, Prisma.FreelanceServiceUncheckedCreateWithoutChatsInput>
}

export type FreelanceServiceUpsertWithoutChatsInput = {
  update: Prisma.XOR<Prisma.FreelanceServiceUpdateWithoutChatsInput, Prisma.FreelanceServiceUncheckedUpdateWithoutChatsInput>
  create: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutChatsInput, Prisma.FreelanceServiceUncheckedCreateWithoutChatsInput>
  where?: Prisma.FreelanceServiceWhereInput
}

export type FreelanceServiceUpdateToOneWithWhereWithoutChatsInput = {
  where?: Prisma.FreelanceServiceWhereInput
  data: Prisma.XOR<Prisma.FreelanceServiceUpdateWithoutChatsInput, Prisma.FreelanceServiceUncheckedUpdateWithoutChatsInput>
}

export type FreelanceServiceUpdateWithoutChatsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutFreelanceServicesNestedInput
  orders?: Prisma.FreelanceOrderUpdateManyWithoutServiceNestedInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentUpdateManyWithoutFreelanceServiceNestedInput
}

export type FreelanceServiceUncheckedUpdateWithoutChatsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  orders?: Prisma.FreelanceOrderUncheckedUpdateManyWithoutServiceNestedInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentUncheckedUpdateManyWithoutFreelanceServiceNestedInput
}

export type FreelanceServiceCreateWithoutWorkerServiceAssignmentsInput = {
  id?: string
  title: string
  description?: string | null
  isHourly?: boolean
  rate: number
  category?: $Enums.FreelanceServiceCategory | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutFreelanceServicesInput
  orders?: Prisma.FreelanceOrderCreateNestedManyWithoutServiceInput
  chats?: Prisma.ChatCreateNestedManyWithoutServiceInput
}

export type FreelanceServiceUncheckedCreateWithoutWorkerServiceAssignmentsInput = {
  id?: string
  title: string
  description?: string | null
  isHourly?: boolean
  rate: number
  category?: $Enums.FreelanceServiceCategory | null
  businessId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  orders?: Prisma.FreelanceOrderUncheckedCreateNestedManyWithoutServiceInput
  chats?: Prisma.ChatUncheckedCreateNestedManyWithoutServiceInput
}

export type FreelanceServiceCreateOrConnectWithoutWorkerServiceAssignmentsInput = {
  where: Prisma.FreelanceServiceWhereUniqueInput
  create: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutWorkerServiceAssignmentsInput, Prisma.FreelanceServiceUncheckedCreateWithoutWorkerServiceAssignmentsInput>
}

export type FreelanceServiceUpsertWithoutWorkerServiceAssignmentsInput = {
  update: Prisma.XOR<Prisma.FreelanceServiceUpdateWithoutWorkerServiceAssignmentsInput, Prisma.FreelanceServiceUncheckedUpdateWithoutWorkerServiceAssignmentsInput>
  create: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutWorkerServiceAssignmentsInput, Prisma.FreelanceServiceUncheckedCreateWithoutWorkerServiceAssignmentsInput>
  where?: Prisma.FreelanceServiceWhereInput
}

export type FreelanceServiceUpdateToOneWithWhereWithoutWorkerServiceAssignmentsInput = {
  where?: Prisma.FreelanceServiceWhereInput
  data: Prisma.XOR<Prisma.FreelanceServiceUpdateWithoutWorkerServiceAssignmentsInput, Prisma.FreelanceServiceUncheckedUpdateWithoutWorkerServiceAssignmentsInput>
}

export type FreelanceServiceUpdateWithoutWorkerServiceAssignmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutFreelanceServicesNestedInput
  orders?: Prisma.FreelanceOrderUpdateManyWithoutServiceNestedInput
  chats?: Prisma.ChatUpdateManyWithoutServiceNestedInput
}

export type FreelanceServiceUncheckedUpdateWithoutWorkerServiceAssignmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  orders?: Prisma.FreelanceOrderUncheckedUpdateManyWithoutServiceNestedInput
  chats?: Prisma.ChatUncheckedUpdateManyWithoutServiceNestedInput
}

export type FreelanceServiceCreateWithoutOrdersInput = {
  id?: string
  title: string
  description?: string | null
  isHourly?: boolean
  rate: number
  category?: $Enums.FreelanceServiceCategory | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutFreelanceServicesInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentCreateNestedManyWithoutFreelanceServiceInput
  chats?: Prisma.ChatCreateNestedManyWithoutServiceInput
}

export type FreelanceServiceUncheckedCreateWithoutOrdersInput = {
  id?: string
  title: string
  description?: string | null
  isHourly?: boolean
  rate: number
  category?: $Enums.FreelanceServiceCategory | null
  businessId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentUncheckedCreateNestedManyWithoutFreelanceServiceInput
  chats?: Prisma.ChatUncheckedCreateNestedManyWithoutServiceInput
}

export type FreelanceServiceCreateOrConnectWithoutOrdersInput = {
  where: Prisma.FreelanceServiceWhereUniqueInput
  create: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutOrdersInput, Prisma.FreelanceServiceUncheckedCreateWithoutOrdersInput>
}

export type FreelanceServiceUpsertWithoutOrdersInput = {
  update: Prisma.XOR<Prisma.FreelanceServiceUpdateWithoutOrdersInput, Prisma.FreelanceServiceUncheckedUpdateWithoutOrdersInput>
  create: Prisma.XOR<Prisma.FreelanceServiceCreateWithoutOrdersInput, Prisma.FreelanceServiceUncheckedCreateWithoutOrdersInput>
  where?: Prisma.FreelanceServiceWhereInput
}

export type FreelanceServiceUpdateToOneWithWhereWithoutOrdersInput = {
  where?: Prisma.FreelanceServiceWhereInput
  data: Prisma.XOR<Prisma.FreelanceServiceUpdateWithoutOrdersInput, Prisma.FreelanceServiceUncheckedUpdateWithoutOrdersInput>
}

export type FreelanceServiceUpdateWithoutOrdersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutFreelanceServicesNestedInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentUpdateManyWithoutFreelanceServiceNestedInput
  chats?: Prisma.ChatUpdateManyWithoutServiceNestedInput
}

export type FreelanceServiceUncheckedUpdateWithoutOrdersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentUncheckedUpdateManyWithoutFreelanceServiceNestedInput
  chats?: Prisma.ChatUncheckedUpdateManyWithoutServiceNestedInput
}

export type FreelanceServiceCreateManyBusinessInput = {
  id?: string
  title: string
  description?: string | null
  isHourly?: boolean
  rate: number
  category?: $Enums.FreelanceServiceCategory | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FreelanceServiceUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  orders?: Prisma.FreelanceOrderUpdateManyWithoutServiceNestedInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentUpdateManyWithoutFreelanceServiceNestedInput
  chats?: Prisma.ChatUpdateManyWithoutServiceNestedInput
}

export type FreelanceServiceUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  orders?: Prisma.FreelanceOrderUncheckedUpdateManyWithoutServiceNestedInput
  workerServiceAssignments?: Prisma.WorkerServiceAssignmentUncheckedUpdateManyWithoutFreelanceServiceNestedInput
  chats?: Prisma.ChatUncheckedUpdateManyWithoutServiceNestedInput
}

export type FreelanceServiceUncheckedUpdateManyWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isHourly?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rate?: Prisma.FloatFieldUpdateOperationsInput | number
  category?: Prisma.NullableEnumFreelanceServiceCategoryFieldUpdateOperationsInput | $Enums.FreelanceServiceCategory | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type FreelanceServiceCountOutputType
 */

export type FreelanceServiceCountOutputType = {
  orders: number
  workerServiceAssignments: number
  chats: number
}

export type FreelanceServiceCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  orders?: boolean | FreelanceServiceCountOutputTypeCountOrdersArgs
  workerServiceAssignments?: boolean | FreelanceServiceCountOutputTypeCountWorkerServiceAssignmentsArgs
  chats?: boolean | FreelanceServiceCountOutputTypeCountChatsArgs
}

/**
 * FreelanceServiceCountOutputType without action
 */
export type FreelanceServiceCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceServiceCountOutputType
   */
  select?: Prisma.FreelanceServiceCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FreelanceServiceCountOutputType without action
 */
export type FreelanceServiceCountOutputTypeCountOrdersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FreelanceOrderWhereInput
}

/**
 * FreelanceServiceCountOutputType without action
 */
export type FreelanceServiceCountOutputTypeCountWorkerServiceAssignmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkerServiceAssignmentWhereInput
}

/**
 * FreelanceServiceCountOutputType without action
 */
export type FreelanceServiceCountOutputTypeCountChatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatWhereInput
}


export type FreelanceServiceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  isHourly?: boolean
  rate?: boolean
  category?: boolean
  businessId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  orders?: boolean | Prisma.FreelanceService$ordersArgs<ExtArgs>
  workerServiceAssignments?: boolean | Prisma.FreelanceService$workerServiceAssignmentsArgs<ExtArgs>
  chats?: boolean | Prisma.FreelanceService$chatsArgs<ExtArgs>
  _count?: boolean | Prisma.FreelanceServiceCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["freelanceService"]>

export type FreelanceServiceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  isHourly?: boolean
  rate?: boolean
  category?: boolean
  businessId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["freelanceService"]>

export type FreelanceServiceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  isHourly?: boolean
  rate?: boolean
  category?: boolean
  businessId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["freelanceService"]>

export type FreelanceServiceSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  isHourly?: boolean
  rate?: boolean
  category?: boolean
  businessId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FreelanceServiceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "isHourly" | "rate" | "category" | "businessId" | "createdAt" | "updatedAt", ExtArgs["result"]["freelanceService"]>
export type FreelanceServiceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  orders?: boolean | Prisma.FreelanceService$ordersArgs<ExtArgs>
  workerServiceAssignments?: boolean | Prisma.FreelanceService$workerServiceAssignmentsArgs<ExtArgs>
  chats?: boolean | Prisma.FreelanceService$chatsArgs<ExtArgs>
  _count?: boolean | Prisma.FreelanceServiceCountOutputTypeDefaultArgs<ExtArgs>
}
export type FreelanceServiceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}
export type FreelanceServiceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}

export type $FreelanceServicePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FreelanceService"
  objects: {
    business: Prisma.$BusinessPayload<ExtArgs>
    orders: Prisma.$FreelanceOrderPayload<ExtArgs>[]
    workerServiceAssignments: Prisma.$WorkerServiceAssignmentPayload<ExtArgs>[]
    chats: Prisma.$ChatPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string | null
    isHourly: boolean
    rate: number
    category: $Enums.FreelanceServiceCategory | null
    businessId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["freelanceService"]>
  composites: {}
}

export type FreelanceServiceGetPayload<S extends boolean | null | undefined | FreelanceServiceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload, S>

export type FreelanceServiceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FreelanceServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FreelanceServiceCountAggregateInputType | true
  }

export interface FreelanceServiceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FreelanceService'], meta: { name: 'FreelanceService' } }
  /**
   * Find zero or one FreelanceService that matches the filter.
   * @param {FreelanceServiceFindUniqueArgs} args - Arguments to find a FreelanceService
   * @example
   * // Get one FreelanceService
   * const freelanceService = await prisma.freelanceService.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FreelanceServiceFindUniqueArgs>(args: Prisma.SelectSubset<T, FreelanceServiceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FreelanceServiceClient<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FreelanceService that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FreelanceServiceFindUniqueOrThrowArgs} args - Arguments to find a FreelanceService
   * @example
   * // Get one FreelanceService
   * const freelanceService = await prisma.freelanceService.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FreelanceServiceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FreelanceServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FreelanceServiceClient<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FreelanceService that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceServiceFindFirstArgs} args - Arguments to find a FreelanceService
   * @example
   * // Get one FreelanceService
   * const freelanceService = await prisma.freelanceService.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FreelanceServiceFindFirstArgs>(args?: Prisma.SelectSubset<T, FreelanceServiceFindFirstArgs<ExtArgs>>): Prisma.Prisma__FreelanceServiceClient<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FreelanceService that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceServiceFindFirstOrThrowArgs} args - Arguments to find a FreelanceService
   * @example
   * // Get one FreelanceService
   * const freelanceService = await prisma.freelanceService.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FreelanceServiceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FreelanceServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FreelanceServiceClient<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FreelanceServices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceServiceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FreelanceServices
   * const freelanceServices = await prisma.freelanceService.findMany()
   * 
   * // Get first 10 FreelanceServices
   * const freelanceServices = await prisma.freelanceService.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const freelanceServiceWithIdOnly = await prisma.freelanceService.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FreelanceServiceFindManyArgs>(args?: Prisma.SelectSubset<T, FreelanceServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FreelanceService.
   * @param {FreelanceServiceCreateArgs} args - Arguments to create a FreelanceService.
   * @example
   * // Create one FreelanceService
   * const FreelanceService = await prisma.freelanceService.create({
   *   data: {
   *     // ... data to create a FreelanceService
   *   }
   * })
   * 
   */
  create<T extends FreelanceServiceCreateArgs>(args: Prisma.SelectSubset<T, FreelanceServiceCreateArgs<ExtArgs>>): Prisma.Prisma__FreelanceServiceClient<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FreelanceServices.
   * @param {FreelanceServiceCreateManyArgs} args - Arguments to create many FreelanceServices.
   * @example
   * // Create many FreelanceServices
   * const freelanceService = await prisma.freelanceService.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FreelanceServiceCreateManyArgs>(args?: Prisma.SelectSubset<T, FreelanceServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FreelanceServices and returns the data saved in the database.
   * @param {FreelanceServiceCreateManyAndReturnArgs} args - Arguments to create many FreelanceServices.
   * @example
   * // Create many FreelanceServices
   * const freelanceService = await prisma.freelanceService.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FreelanceServices and only return the `id`
   * const freelanceServiceWithIdOnly = await prisma.freelanceService.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FreelanceServiceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FreelanceServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FreelanceService.
   * @param {FreelanceServiceDeleteArgs} args - Arguments to delete one FreelanceService.
   * @example
   * // Delete one FreelanceService
   * const FreelanceService = await prisma.freelanceService.delete({
   *   where: {
   *     // ... filter to delete one FreelanceService
   *   }
   * })
   * 
   */
  delete<T extends FreelanceServiceDeleteArgs>(args: Prisma.SelectSubset<T, FreelanceServiceDeleteArgs<ExtArgs>>): Prisma.Prisma__FreelanceServiceClient<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FreelanceService.
   * @param {FreelanceServiceUpdateArgs} args - Arguments to update one FreelanceService.
   * @example
   * // Update one FreelanceService
   * const freelanceService = await prisma.freelanceService.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FreelanceServiceUpdateArgs>(args: Prisma.SelectSubset<T, FreelanceServiceUpdateArgs<ExtArgs>>): Prisma.Prisma__FreelanceServiceClient<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FreelanceServices.
   * @param {FreelanceServiceDeleteManyArgs} args - Arguments to filter FreelanceServices to delete.
   * @example
   * // Delete a few FreelanceServices
   * const { count } = await prisma.freelanceService.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FreelanceServiceDeleteManyArgs>(args?: Prisma.SelectSubset<T, FreelanceServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FreelanceServices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceServiceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FreelanceServices
   * const freelanceService = await prisma.freelanceService.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FreelanceServiceUpdateManyArgs>(args: Prisma.SelectSubset<T, FreelanceServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FreelanceServices and returns the data updated in the database.
   * @param {FreelanceServiceUpdateManyAndReturnArgs} args - Arguments to update many FreelanceServices.
   * @example
   * // Update many FreelanceServices
   * const freelanceService = await prisma.freelanceService.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FreelanceServices and only return the `id`
   * const freelanceServiceWithIdOnly = await prisma.freelanceService.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FreelanceServiceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FreelanceServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FreelanceService.
   * @param {FreelanceServiceUpsertArgs} args - Arguments to update or create a FreelanceService.
   * @example
   * // Update or create a FreelanceService
   * const freelanceService = await prisma.freelanceService.upsert({
   *   create: {
   *     // ... data to create a FreelanceService
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FreelanceService we want to update
   *   }
   * })
   */
  upsert<T extends FreelanceServiceUpsertArgs>(args: Prisma.SelectSubset<T, FreelanceServiceUpsertArgs<ExtArgs>>): Prisma.Prisma__FreelanceServiceClient<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FreelanceServices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceServiceCountArgs} args - Arguments to filter FreelanceServices to count.
   * @example
   * // Count the number of FreelanceServices
   * const count = await prisma.freelanceService.count({
   *   where: {
   *     // ... the filter for the FreelanceServices we want to count
   *   }
   * })
  **/
  count<T extends FreelanceServiceCountArgs>(
    args?: Prisma.Subset<T, FreelanceServiceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FreelanceServiceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FreelanceService.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FreelanceServiceAggregateArgs>(args: Prisma.Subset<T, FreelanceServiceAggregateArgs>): Prisma.PrismaPromise<GetFreelanceServiceAggregateType<T>>

  /**
   * Group by FreelanceService.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceServiceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FreelanceServiceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FreelanceServiceGroupByArgs['orderBy'] }
      : { orderBy?: FreelanceServiceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FreelanceServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFreelanceServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FreelanceService model
 */
readonly fields: FreelanceServiceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FreelanceService.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FreelanceServiceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  business<T extends Prisma.BusinessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BusinessDefaultArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  orders<T extends Prisma.FreelanceService$ordersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FreelanceService$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  workerServiceAssignments<T extends Prisma.FreelanceService$workerServiceAssignmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FreelanceService$workerServiceAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerServiceAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  chats<T extends Prisma.FreelanceService$chatsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FreelanceService$chatsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FreelanceService model
 */
export interface FreelanceServiceFieldRefs {
  readonly id: Prisma.FieldRef<"FreelanceService", 'String'>
  readonly title: Prisma.FieldRef<"FreelanceService", 'String'>
  readonly description: Prisma.FieldRef<"FreelanceService", 'String'>
  readonly isHourly: Prisma.FieldRef<"FreelanceService", 'Boolean'>
  readonly rate: Prisma.FieldRef<"FreelanceService", 'Float'>
  readonly category: Prisma.FieldRef<"FreelanceService", 'FreelanceServiceCategory'>
  readonly businessId: Prisma.FieldRef<"FreelanceService", 'String'>
  readonly createdAt: Prisma.FieldRef<"FreelanceService", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"FreelanceService", 'DateTime'>
}
    

// Custom InputTypes
/**
 * FreelanceService findUnique
 */
export type FreelanceServiceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceService to fetch.
   */
  where: Prisma.FreelanceServiceWhereUniqueInput
}

/**
 * FreelanceService findUniqueOrThrow
 */
export type FreelanceServiceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceService to fetch.
   */
  where: Prisma.FreelanceServiceWhereUniqueInput
}

/**
 * FreelanceService findFirst
 */
export type FreelanceServiceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceService to fetch.
   */
  where?: Prisma.FreelanceServiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FreelanceServices to fetch.
   */
  orderBy?: Prisma.FreelanceServiceOrderByWithRelationInput | Prisma.FreelanceServiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FreelanceServices.
   */
  cursor?: Prisma.FreelanceServiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FreelanceServices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FreelanceServices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FreelanceServices.
   */
  distinct?: Prisma.FreelanceServiceScalarFieldEnum | Prisma.FreelanceServiceScalarFieldEnum[]
}

/**
 * FreelanceService findFirstOrThrow
 */
export type FreelanceServiceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceService to fetch.
   */
  where?: Prisma.FreelanceServiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FreelanceServices to fetch.
   */
  orderBy?: Prisma.FreelanceServiceOrderByWithRelationInput | Prisma.FreelanceServiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FreelanceServices.
   */
  cursor?: Prisma.FreelanceServiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FreelanceServices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FreelanceServices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FreelanceServices.
   */
  distinct?: Prisma.FreelanceServiceScalarFieldEnum | Prisma.FreelanceServiceScalarFieldEnum[]
}

/**
 * FreelanceService findMany
 */
export type FreelanceServiceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceServices to fetch.
   */
  where?: Prisma.FreelanceServiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FreelanceServices to fetch.
   */
  orderBy?: Prisma.FreelanceServiceOrderByWithRelationInput | Prisma.FreelanceServiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FreelanceServices.
   */
  cursor?: Prisma.FreelanceServiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FreelanceServices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FreelanceServices.
   */
  skip?: number
  distinct?: Prisma.FreelanceServiceScalarFieldEnum | Prisma.FreelanceServiceScalarFieldEnum[]
}

/**
 * FreelanceService create
 */
export type FreelanceServiceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceInclude<ExtArgs> | null
  /**
   * The data needed to create a FreelanceService.
   */
  data: Prisma.XOR<Prisma.FreelanceServiceCreateInput, Prisma.FreelanceServiceUncheckedCreateInput>
}

/**
 * FreelanceService createMany
 */
export type FreelanceServiceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FreelanceServices.
   */
  data: Prisma.FreelanceServiceCreateManyInput | Prisma.FreelanceServiceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FreelanceService createManyAndReturn
 */
export type FreelanceServiceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * The data used to create many FreelanceServices.
   */
  data: Prisma.FreelanceServiceCreateManyInput | Prisma.FreelanceServiceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FreelanceService update
 */
export type FreelanceServiceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceInclude<ExtArgs> | null
  /**
   * The data needed to update a FreelanceService.
   */
  data: Prisma.XOR<Prisma.FreelanceServiceUpdateInput, Prisma.FreelanceServiceUncheckedUpdateInput>
  /**
   * Choose, which FreelanceService to update.
   */
  where: Prisma.FreelanceServiceWhereUniqueInput
}

/**
 * FreelanceService updateMany
 */
export type FreelanceServiceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FreelanceServices.
   */
  data: Prisma.XOR<Prisma.FreelanceServiceUpdateManyMutationInput, Prisma.FreelanceServiceUncheckedUpdateManyInput>
  /**
   * Filter which FreelanceServices to update
   */
  where?: Prisma.FreelanceServiceWhereInput
  /**
   * Limit how many FreelanceServices to update.
   */
  limit?: number
}

/**
 * FreelanceService updateManyAndReturn
 */
export type FreelanceServiceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * The data used to update FreelanceServices.
   */
  data: Prisma.XOR<Prisma.FreelanceServiceUpdateManyMutationInput, Prisma.FreelanceServiceUncheckedUpdateManyInput>
  /**
   * Filter which FreelanceServices to update
   */
  where?: Prisma.FreelanceServiceWhereInput
  /**
   * Limit how many FreelanceServices to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FreelanceService upsert
 */
export type FreelanceServiceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceInclude<ExtArgs> | null
  /**
   * The filter to search for the FreelanceService to update in case it exists.
   */
  where: Prisma.FreelanceServiceWhereUniqueInput
  /**
   * In case the FreelanceService found by the `where` argument doesn't exist, create a new FreelanceService with this data.
   */
  create: Prisma.XOR<Prisma.FreelanceServiceCreateInput, Prisma.FreelanceServiceUncheckedCreateInput>
  /**
   * In case the FreelanceService was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FreelanceServiceUpdateInput, Prisma.FreelanceServiceUncheckedUpdateInput>
}

/**
 * FreelanceService delete
 */
export type FreelanceServiceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceInclude<ExtArgs> | null
  /**
   * Filter which FreelanceService to delete.
   */
  where: Prisma.FreelanceServiceWhereUniqueInput
}

/**
 * FreelanceService deleteMany
 */
export type FreelanceServiceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FreelanceServices to delete
   */
  where?: Prisma.FreelanceServiceWhereInput
  /**
   * Limit how many FreelanceServices to delete.
   */
  limit?: number
}

/**
 * FreelanceService.orders
 */
export type FreelanceService$ordersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderInclude<ExtArgs> | null
  where?: Prisma.FreelanceOrderWhereInput
  orderBy?: Prisma.FreelanceOrderOrderByWithRelationInput | Prisma.FreelanceOrderOrderByWithRelationInput[]
  cursor?: Prisma.FreelanceOrderWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FreelanceOrderScalarFieldEnum | Prisma.FreelanceOrderScalarFieldEnum[]
}

/**
 * FreelanceService.workerServiceAssignments
 */
export type FreelanceService$workerServiceAssignmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerServiceAssignment
   */
  select?: Prisma.WorkerServiceAssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerServiceAssignment
   */
  omit?: Prisma.WorkerServiceAssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerServiceAssignmentInclude<ExtArgs> | null
  where?: Prisma.WorkerServiceAssignmentWhereInput
  orderBy?: Prisma.WorkerServiceAssignmentOrderByWithRelationInput | Prisma.WorkerServiceAssignmentOrderByWithRelationInput[]
  cursor?: Prisma.WorkerServiceAssignmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WorkerServiceAssignmentScalarFieldEnum | Prisma.WorkerServiceAssignmentScalarFieldEnum[]
}

/**
 * FreelanceService.chats
 */
export type FreelanceService$chatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  where?: Prisma.ChatWhereInput
  orderBy?: Prisma.ChatOrderByWithRelationInput | Prisma.ChatOrderByWithRelationInput[]
  cursor?: Prisma.ChatWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChatScalarFieldEnum | Prisma.ChatScalarFieldEnum[]
}

/**
 * FreelanceService without action
 */
export type FreelanceServiceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceService
   */
  select?: Prisma.FreelanceServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceService
   */
  omit?: Prisma.FreelanceServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceServiceInclude<ExtArgs> | null
}
