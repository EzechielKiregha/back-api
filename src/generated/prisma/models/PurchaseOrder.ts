
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PurchaseOrder` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PurchaseOrder
 * 
 */
export type PurchaseOrderModel = runtime.Types.Result.DefaultSelection<Prisma.$PurchaseOrderPayload>

export type AggregatePurchaseOrder = {
  _count: PurchaseOrderCountAggregateOutputType | null
  _min: PurchaseOrderMinAggregateOutputType | null
  _max: PurchaseOrderMaxAggregateOutputType | null
}

export type PurchaseOrderMinAggregateOutputType = {
  id: string | null
  businessId: string | null
  storeId: string | null
  supplierId: string | null
  status: $Enums.PurchaseOrderStatus | null
  expectedDelivery: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PurchaseOrderMaxAggregateOutputType = {
  id: string | null
  businessId: string | null
  storeId: string | null
  supplierId: string | null
  status: $Enums.PurchaseOrderStatus | null
  expectedDelivery: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PurchaseOrderCountAggregateOutputType = {
  id: number
  businessId: number
  storeId: number
  supplierId: number
  status: number
  expectedDelivery: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PurchaseOrderMinAggregateInputType = {
  id?: true
  businessId?: true
  storeId?: true
  supplierId?: true
  status?: true
  expectedDelivery?: true
  createdAt?: true
  updatedAt?: true
}

export type PurchaseOrderMaxAggregateInputType = {
  id?: true
  businessId?: true
  storeId?: true
  supplierId?: true
  status?: true
  expectedDelivery?: true
  createdAt?: true
  updatedAt?: true
}

export type PurchaseOrderCountAggregateInputType = {
  id?: true
  businessId?: true
  storeId?: true
  supplierId?: true
  status?: true
  expectedDelivery?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PurchaseOrderAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PurchaseOrder to aggregate.
   */
  where?: Prisma.PurchaseOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PurchaseOrders to fetch.
   */
  orderBy?: Prisma.PurchaseOrderOrderByWithRelationInput | Prisma.PurchaseOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PurchaseOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PurchaseOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PurchaseOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PurchaseOrders
  **/
  _count?: true | PurchaseOrderCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PurchaseOrderMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PurchaseOrderMaxAggregateInputType
}

export type GetPurchaseOrderAggregateType<T extends PurchaseOrderAggregateArgs> = {
      [P in keyof T & keyof AggregatePurchaseOrder]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePurchaseOrder[P]>
    : Prisma.GetScalarType<T[P], AggregatePurchaseOrder[P]>
}




export type PurchaseOrderGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PurchaseOrderWhereInput
  orderBy?: Prisma.PurchaseOrderOrderByWithAggregationInput | Prisma.PurchaseOrderOrderByWithAggregationInput[]
  by: Prisma.PurchaseOrderScalarFieldEnum[] | Prisma.PurchaseOrderScalarFieldEnum
  having?: Prisma.PurchaseOrderScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PurchaseOrderCountAggregateInputType | true
  _min?: PurchaseOrderMinAggregateInputType
  _max?: PurchaseOrderMaxAggregateInputType
}

export type PurchaseOrderGroupByOutputType = {
  id: string
  businessId: string
  storeId: string
  supplierId: string | null
  status: $Enums.PurchaseOrderStatus
  expectedDelivery: Date | null
  createdAt: Date
  updatedAt: Date
  _count: PurchaseOrderCountAggregateOutputType | null
  _min: PurchaseOrderMinAggregateOutputType | null
  _max: PurchaseOrderMaxAggregateOutputType | null
}

type GetPurchaseOrderGroupByPayload<T extends PurchaseOrderGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PurchaseOrderGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PurchaseOrderGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PurchaseOrderGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PurchaseOrderGroupByOutputType[P]>
      }
    >
  > 



export type PurchaseOrderWhereInput = {
  AND?: Prisma.PurchaseOrderWhereInput | Prisma.PurchaseOrderWhereInput[]
  OR?: Prisma.PurchaseOrderWhereInput[]
  NOT?: Prisma.PurchaseOrderWhereInput | Prisma.PurchaseOrderWhereInput[]
  id?: Prisma.StringFilter<"PurchaseOrder"> | string
  businessId?: Prisma.StringFilter<"PurchaseOrder"> | string
  storeId?: Prisma.StringFilter<"PurchaseOrder"> | string
  supplierId?: Prisma.StringNullableFilter<"PurchaseOrder"> | string | null
  status?: Prisma.EnumPurchaseOrderStatusFilter<"PurchaseOrder"> | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.DateTimeNullableFilter<"PurchaseOrder"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"PurchaseOrder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PurchaseOrder"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
  store?: Prisma.XOR<Prisma.StoreScalarRelationFilter, Prisma.StoreWhereInput>
}

export type PurchaseOrderOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  supplierId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  expectedDelivery?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  business?: Prisma.BusinessOrderByWithRelationInput
  store?: Prisma.StoreOrderByWithRelationInput
}

export type PurchaseOrderWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PurchaseOrderWhereInput | Prisma.PurchaseOrderWhereInput[]
  OR?: Prisma.PurchaseOrderWhereInput[]
  NOT?: Prisma.PurchaseOrderWhereInput | Prisma.PurchaseOrderWhereInput[]
  businessId?: Prisma.StringFilter<"PurchaseOrder"> | string
  storeId?: Prisma.StringFilter<"PurchaseOrder"> | string
  supplierId?: Prisma.StringNullableFilter<"PurchaseOrder"> | string | null
  status?: Prisma.EnumPurchaseOrderStatusFilter<"PurchaseOrder"> | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.DateTimeNullableFilter<"PurchaseOrder"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"PurchaseOrder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PurchaseOrder"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
  store?: Prisma.XOR<Prisma.StoreScalarRelationFilter, Prisma.StoreWhereInput>
}, "id">

export type PurchaseOrderOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  supplierId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  expectedDelivery?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PurchaseOrderCountOrderByAggregateInput
  _max?: Prisma.PurchaseOrderMaxOrderByAggregateInput
  _min?: Prisma.PurchaseOrderMinOrderByAggregateInput
}

export type PurchaseOrderScalarWhereWithAggregatesInput = {
  AND?: Prisma.PurchaseOrderScalarWhereWithAggregatesInput | Prisma.PurchaseOrderScalarWhereWithAggregatesInput[]
  OR?: Prisma.PurchaseOrderScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PurchaseOrderScalarWhereWithAggregatesInput | Prisma.PurchaseOrderScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PurchaseOrder"> | string
  businessId?: Prisma.StringWithAggregatesFilter<"PurchaseOrder"> | string
  storeId?: Prisma.StringWithAggregatesFilter<"PurchaseOrder"> | string
  supplierId?: Prisma.StringNullableWithAggregatesFilter<"PurchaseOrder"> | string | null
  status?: Prisma.EnumPurchaseOrderStatusWithAggregatesFilter<"PurchaseOrder"> | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.DateTimeNullableWithAggregatesFilter<"PurchaseOrder"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PurchaseOrder"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PurchaseOrder"> | Date | string
}

export type PurchaseOrderCreateInput = {
  id?: string
  supplierId?: string | null
  status?: $Enums.PurchaseOrderStatus
  expectedDelivery?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutPurchaseOrdersInput
  store: Prisma.StoreCreateNestedOneWithoutPurchaseOrdersInput
}

export type PurchaseOrderUncheckedCreateInput = {
  id?: string
  businessId: string
  storeId: string
  supplierId?: string | null
  status?: $Enums.PurchaseOrderStatus
  expectedDelivery?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PurchaseOrderUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  supplierId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPurchaseOrderStatusFieldUpdateOperationsInput | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutPurchaseOrdersNestedInput
  store?: Prisma.StoreUpdateOneRequiredWithoutPurchaseOrdersNestedInput
}

export type PurchaseOrderUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  storeId?: Prisma.StringFieldUpdateOperationsInput | string
  supplierId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPurchaseOrderStatusFieldUpdateOperationsInput | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PurchaseOrderCreateManyInput = {
  id?: string
  businessId: string
  storeId: string
  supplierId?: string | null
  status?: $Enums.PurchaseOrderStatus
  expectedDelivery?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PurchaseOrderUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  supplierId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPurchaseOrderStatusFieldUpdateOperationsInput | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PurchaseOrderUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  storeId?: Prisma.StringFieldUpdateOperationsInput | string
  supplierId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPurchaseOrderStatusFieldUpdateOperationsInput | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PurchaseOrderListRelationFilter = {
  every?: Prisma.PurchaseOrderWhereInput
  some?: Prisma.PurchaseOrderWhereInput
  none?: Prisma.PurchaseOrderWhereInput
}

export type PurchaseOrderOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PurchaseOrderCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  supplierId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  expectedDelivery?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PurchaseOrderMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  supplierId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  expectedDelivery?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PurchaseOrderMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  supplierId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  expectedDelivery?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PurchaseOrderCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.PurchaseOrderCreateWithoutBusinessInput, Prisma.PurchaseOrderUncheckedCreateWithoutBusinessInput> | Prisma.PurchaseOrderCreateWithoutBusinessInput[] | Prisma.PurchaseOrderUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.PurchaseOrderCreateOrConnectWithoutBusinessInput | Prisma.PurchaseOrderCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.PurchaseOrderCreateManyBusinessInputEnvelope
  connect?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
}

export type PurchaseOrderUncheckedCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.PurchaseOrderCreateWithoutBusinessInput, Prisma.PurchaseOrderUncheckedCreateWithoutBusinessInput> | Prisma.PurchaseOrderCreateWithoutBusinessInput[] | Prisma.PurchaseOrderUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.PurchaseOrderCreateOrConnectWithoutBusinessInput | Prisma.PurchaseOrderCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.PurchaseOrderCreateManyBusinessInputEnvelope
  connect?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
}

export type PurchaseOrderUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.PurchaseOrderCreateWithoutBusinessInput, Prisma.PurchaseOrderUncheckedCreateWithoutBusinessInput> | Prisma.PurchaseOrderCreateWithoutBusinessInput[] | Prisma.PurchaseOrderUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.PurchaseOrderCreateOrConnectWithoutBusinessInput | Prisma.PurchaseOrderCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.PurchaseOrderUpsertWithWhereUniqueWithoutBusinessInput | Prisma.PurchaseOrderUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.PurchaseOrderCreateManyBusinessInputEnvelope
  set?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  disconnect?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  delete?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  connect?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  update?: Prisma.PurchaseOrderUpdateWithWhereUniqueWithoutBusinessInput | Prisma.PurchaseOrderUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.PurchaseOrderUpdateManyWithWhereWithoutBusinessInput | Prisma.PurchaseOrderUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.PurchaseOrderScalarWhereInput | Prisma.PurchaseOrderScalarWhereInput[]
}

export type PurchaseOrderUncheckedUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.PurchaseOrderCreateWithoutBusinessInput, Prisma.PurchaseOrderUncheckedCreateWithoutBusinessInput> | Prisma.PurchaseOrderCreateWithoutBusinessInput[] | Prisma.PurchaseOrderUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.PurchaseOrderCreateOrConnectWithoutBusinessInput | Prisma.PurchaseOrderCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.PurchaseOrderUpsertWithWhereUniqueWithoutBusinessInput | Prisma.PurchaseOrderUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.PurchaseOrderCreateManyBusinessInputEnvelope
  set?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  disconnect?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  delete?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  connect?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  update?: Prisma.PurchaseOrderUpdateWithWhereUniqueWithoutBusinessInput | Prisma.PurchaseOrderUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.PurchaseOrderUpdateManyWithWhereWithoutBusinessInput | Prisma.PurchaseOrderUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.PurchaseOrderScalarWhereInput | Prisma.PurchaseOrderScalarWhereInput[]
}

export type PurchaseOrderCreateNestedManyWithoutStoreInput = {
  create?: Prisma.XOR<Prisma.PurchaseOrderCreateWithoutStoreInput, Prisma.PurchaseOrderUncheckedCreateWithoutStoreInput> | Prisma.PurchaseOrderCreateWithoutStoreInput[] | Prisma.PurchaseOrderUncheckedCreateWithoutStoreInput[]
  connectOrCreate?: Prisma.PurchaseOrderCreateOrConnectWithoutStoreInput | Prisma.PurchaseOrderCreateOrConnectWithoutStoreInput[]
  createMany?: Prisma.PurchaseOrderCreateManyStoreInputEnvelope
  connect?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
}

export type PurchaseOrderUncheckedCreateNestedManyWithoutStoreInput = {
  create?: Prisma.XOR<Prisma.PurchaseOrderCreateWithoutStoreInput, Prisma.PurchaseOrderUncheckedCreateWithoutStoreInput> | Prisma.PurchaseOrderCreateWithoutStoreInput[] | Prisma.PurchaseOrderUncheckedCreateWithoutStoreInput[]
  connectOrCreate?: Prisma.PurchaseOrderCreateOrConnectWithoutStoreInput | Prisma.PurchaseOrderCreateOrConnectWithoutStoreInput[]
  createMany?: Prisma.PurchaseOrderCreateManyStoreInputEnvelope
  connect?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
}

export type PurchaseOrderUpdateManyWithoutStoreNestedInput = {
  create?: Prisma.XOR<Prisma.PurchaseOrderCreateWithoutStoreInput, Prisma.PurchaseOrderUncheckedCreateWithoutStoreInput> | Prisma.PurchaseOrderCreateWithoutStoreInput[] | Prisma.PurchaseOrderUncheckedCreateWithoutStoreInput[]
  connectOrCreate?: Prisma.PurchaseOrderCreateOrConnectWithoutStoreInput | Prisma.PurchaseOrderCreateOrConnectWithoutStoreInput[]
  upsert?: Prisma.PurchaseOrderUpsertWithWhereUniqueWithoutStoreInput | Prisma.PurchaseOrderUpsertWithWhereUniqueWithoutStoreInput[]
  createMany?: Prisma.PurchaseOrderCreateManyStoreInputEnvelope
  set?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  disconnect?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  delete?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  connect?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  update?: Prisma.PurchaseOrderUpdateWithWhereUniqueWithoutStoreInput | Prisma.PurchaseOrderUpdateWithWhereUniqueWithoutStoreInput[]
  updateMany?: Prisma.PurchaseOrderUpdateManyWithWhereWithoutStoreInput | Prisma.PurchaseOrderUpdateManyWithWhereWithoutStoreInput[]
  deleteMany?: Prisma.PurchaseOrderScalarWhereInput | Prisma.PurchaseOrderScalarWhereInput[]
}

export type PurchaseOrderUncheckedUpdateManyWithoutStoreNestedInput = {
  create?: Prisma.XOR<Prisma.PurchaseOrderCreateWithoutStoreInput, Prisma.PurchaseOrderUncheckedCreateWithoutStoreInput> | Prisma.PurchaseOrderCreateWithoutStoreInput[] | Prisma.PurchaseOrderUncheckedCreateWithoutStoreInput[]
  connectOrCreate?: Prisma.PurchaseOrderCreateOrConnectWithoutStoreInput | Prisma.PurchaseOrderCreateOrConnectWithoutStoreInput[]
  upsert?: Prisma.PurchaseOrderUpsertWithWhereUniqueWithoutStoreInput | Prisma.PurchaseOrderUpsertWithWhereUniqueWithoutStoreInput[]
  createMany?: Prisma.PurchaseOrderCreateManyStoreInputEnvelope
  set?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  disconnect?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  delete?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  connect?: Prisma.PurchaseOrderWhereUniqueInput | Prisma.PurchaseOrderWhereUniqueInput[]
  update?: Prisma.PurchaseOrderUpdateWithWhereUniqueWithoutStoreInput | Prisma.PurchaseOrderUpdateWithWhereUniqueWithoutStoreInput[]
  updateMany?: Prisma.PurchaseOrderUpdateManyWithWhereWithoutStoreInput | Prisma.PurchaseOrderUpdateManyWithWhereWithoutStoreInput[]
  deleteMany?: Prisma.PurchaseOrderScalarWhereInput | Prisma.PurchaseOrderScalarWhereInput[]
}

export type EnumPurchaseOrderStatusFieldUpdateOperationsInput = {
  set?: $Enums.PurchaseOrderStatus
}

export type PurchaseOrderCreateWithoutBusinessInput = {
  id?: string
  supplierId?: string | null
  status?: $Enums.PurchaseOrderStatus
  expectedDelivery?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  store: Prisma.StoreCreateNestedOneWithoutPurchaseOrdersInput
}

export type PurchaseOrderUncheckedCreateWithoutBusinessInput = {
  id?: string
  storeId: string
  supplierId?: string | null
  status?: $Enums.PurchaseOrderStatus
  expectedDelivery?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PurchaseOrderCreateOrConnectWithoutBusinessInput = {
  where: Prisma.PurchaseOrderWhereUniqueInput
  create: Prisma.XOR<Prisma.PurchaseOrderCreateWithoutBusinessInput, Prisma.PurchaseOrderUncheckedCreateWithoutBusinessInput>
}

export type PurchaseOrderCreateManyBusinessInputEnvelope = {
  data: Prisma.PurchaseOrderCreateManyBusinessInput | Prisma.PurchaseOrderCreateManyBusinessInput[]
  skipDuplicates?: boolean
}

export type PurchaseOrderUpsertWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.PurchaseOrderWhereUniqueInput
  update: Prisma.XOR<Prisma.PurchaseOrderUpdateWithoutBusinessInput, Prisma.PurchaseOrderUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.PurchaseOrderCreateWithoutBusinessInput, Prisma.PurchaseOrderUncheckedCreateWithoutBusinessInput>
}

export type PurchaseOrderUpdateWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.PurchaseOrderWhereUniqueInput
  data: Prisma.XOR<Prisma.PurchaseOrderUpdateWithoutBusinessInput, Prisma.PurchaseOrderUncheckedUpdateWithoutBusinessInput>
}

export type PurchaseOrderUpdateManyWithWhereWithoutBusinessInput = {
  where: Prisma.PurchaseOrderScalarWhereInput
  data: Prisma.XOR<Prisma.PurchaseOrderUpdateManyMutationInput, Prisma.PurchaseOrderUncheckedUpdateManyWithoutBusinessInput>
}

export type PurchaseOrderScalarWhereInput = {
  AND?: Prisma.PurchaseOrderScalarWhereInput | Prisma.PurchaseOrderScalarWhereInput[]
  OR?: Prisma.PurchaseOrderScalarWhereInput[]
  NOT?: Prisma.PurchaseOrderScalarWhereInput | Prisma.PurchaseOrderScalarWhereInput[]
  id?: Prisma.StringFilter<"PurchaseOrder"> | string
  businessId?: Prisma.StringFilter<"PurchaseOrder"> | string
  storeId?: Prisma.StringFilter<"PurchaseOrder"> | string
  supplierId?: Prisma.StringNullableFilter<"PurchaseOrder"> | string | null
  status?: Prisma.EnumPurchaseOrderStatusFilter<"PurchaseOrder"> | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.DateTimeNullableFilter<"PurchaseOrder"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"PurchaseOrder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PurchaseOrder"> | Date | string
}

export type PurchaseOrderCreateWithoutStoreInput = {
  id?: string
  supplierId?: string | null
  status?: $Enums.PurchaseOrderStatus
  expectedDelivery?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutPurchaseOrdersInput
}

export type PurchaseOrderUncheckedCreateWithoutStoreInput = {
  id?: string
  businessId: string
  supplierId?: string | null
  status?: $Enums.PurchaseOrderStatus
  expectedDelivery?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PurchaseOrderCreateOrConnectWithoutStoreInput = {
  where: Prisma.PurchaseOrderWhereUniqueInput
  create: Prisma.XOR<Prisma.PurchaseOrderCreateWithoutStoreInput, Prisma.PurchaseOrderUncheckedCreateWithoutStoreInput>
}

export type PurchaseOrderCreateManyStoreInputEnvelope = {
  data: Prisma.PurchaseOrderCreateManyStoreInput | Prisma.PurchaseOrderCreateManyStoreInput[]
  skipDuplicates?: boolean
}

export type PurchaseOrderUpsertWithWhereUniqueWithoutStoreInput = {
  where: Prisma.PurchaseOrderWhereUniqueInput
  update: Prisma.XOR<Prisma.PurchaseOrderUpdateWithoutStoreInput, Prisma.PurchaseOrderUncheckedUpdateWithoutStoreInput>
  create: Prisma.XOR<Prisma.PurchaseOrderCreateWithoutStoreInput, Prisma.PurchaseOrderUncheckedCreateWithoutStoreInput>
}

export type PurchaseOrderUpdateWithWhereUniqueWithoutStoreInput = {
  where: Prisma.PurchaseOrderWhereUniqueInput
  data: Prisma.XOR<Prisma.PurchaseOrderUpdateWithoutStoreInput, Prisma.PurchaseOrderUncheckedUpdateWithoutStoreInput>
}

export type PurchaseOrderUpdateManyWithWhereWithoutStoreInput = {
  where: Prisma.PurchaseOrderScalarWhereInput
  data: Prisma.XOR<Prisma.PurchaseOrderUpdateManyMutationInput, Prisma.PurchaseOrderUncheckedUpdateManyWithoutStoreInput>
}

export type PurchaseOrderCreateManyBusinessInput = {
  id?: string
  storeId: string
  supplierId?: string | null
  status?: $Enums.PurchaseOrderStatus
  expectedDelivery?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PurchaseOrderUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  supplierId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPurchaseOrderStatusFieldUpdateOperationsInput | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  store?: Prisma.StoreUpdateOneRequiredWithoutPurchaseOrdersNestedInput
}

export type PurchaseOrderUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  storeId?: Prisma.StringFieldUpdateOperationsInput | string
  supplierId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPurchaseOrderStatusFieldUpdateOperationsInput | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PurchaseOrderUncheckedUpdateManyWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  storeId?: Prisma.StringFieldUpdateOperationsInput | string
  supplierId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPurchaseOrderStatusFieldUpdateOperationsInput | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PurchaseOrderCreateManyStoreInput = {
  id?: string
  businessId: string
  supplierId?: string | null
  status?: $Enums.PurchaseOrderStatus
  expectedDelivery?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PurchaseOrderUpdateWithoutStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  supplierId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPurchaseOrderStatusFieldUpdateOperationsInput | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutPurchaseOrdersNestedInput
}

export type PurchaseOrderUncheckedUpdateWithoutStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  supplierId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPurchaseOrderStatusFieldUpdateOperationsInput | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PurchaseOrderUncheckedUpdateManyWithoutStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  supplierId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPurchaseOrderStatusFieldUpdateOperationsInput | $Enums.PurchaseOrderStatus
  expectedDelivery?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PurchaseOrderSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  storeId?: boolean
  supplierId?: boolean
  status?: boolean
  expectedDelivery?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}, ExtArgs["result"]["purchaseOrder"]>

export type PurchaseOrderSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  storeId?: boolean
  supplierId?: boolean
  status?: boolean
  expectedDelivery?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}, ExtArgs["result"]["purchaseOrder"]>

export type PurchaseOrderSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  storeId?: boolean
  supplierId?: boolean
  status?: boolean
  expectedDelivery?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}, ExtArgs["result"]["purchaseOrder"]>

export type PurchaseOrderSelectScalar = {
  id?: boolean
  businessId?: boolean
  storeId?: boolean
  supplierId?: boolean
  status?: boolean
  expectedDelivery?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PurchaseOrderOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "businessId" | "storeId" | "supplierId" | "status" | "expectedDelivery" | "createdAt" | "updatedAt", ExtArgs["result"]["purchaseOrder"]>
export type PurchaseOrderInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}
export type PurchaseOrderIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}
export type PurchaseOrderIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}

export type $PurchaseOrderPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PurchaseOrder"
  objects: {
    business: Prisma.$BusinessPayload<ExtArgs>
    store: Prisma.$StorePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    businessId: string
    storeId: string
    supplierId: string | null
    status: $Enums.PurchaseOrderStatus
    expectedDelivery: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["purchaseOrder"]>
  composites: {}
}

export type PurchaseOrderGetPayload<S extends boolean | null | undefined | PurchaseOrderDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload, S>

export type PurchaseOrderCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PurchaseOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PurchaseOrderCountAggregateInputType | true
  }

export interface PurchaseOrderDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PurchaseOrder'], meta: { name: 'PurchaseOrder' } }
  /**
   * Find zero or one PurchaseOrder that matches the filter.
   * @param {PurchaseOrderFindUniqueArgs} args - Arguments to find a PurchaseOrder
   * @example
   * // Get one PurchaseOrder
   * const purchaseOrder = await prisma.purchaseOrder.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PurchaseOrderFindUniqueArgs>(args: Prisma.SelectSubset<T, PurchaseOrderFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PurchaseOrderClient<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PurchaseOrder that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PurchaseOrderFindUniqueOrThrowArgs} args - Arguments to find a PurchaseOrder
   * @example
   * // Get one PurchaseOrder
   * const purchaseOrder = await prisma.purchaseOrder.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PurchaseOrderFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PurchaseOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PurchaseOrderClient<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PurchaseOrder that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseOrderFindFirstArgs} args - Arguments to find a PurchaseOrder
   * @example
   * // Get one PurchaseOrder
   * const purchaseOrder = await prisma.purchaseOrder.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PurchaseOrderFindFirstArgs>(args?: Prisma.SelectSubset<T, PurchaseOrderFindFirstArgs<ExtArgs>>): Prisma.Prisma__PurchaseOrderClient<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PurchaseOrder that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseOrderFindFirstOrThrowArgs} args - Arguments to find a PurchaseOrder
   * @example
   * // Get one PurchaseOrder
   * const purchaseOrder = await prisma.purchaseOrder.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PurchaseOrderFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PurchaseOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PurchaseOrderClient<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PurchaseOrders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseOrderFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PurchaseOrders
   * const purchaseOrders = await prisma.purchaseOrder.findMany()
   * 
   * // Get first 10 PurchaseOrders
   * const purchaseOrders = await prisma.purchaseOrder.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const purchaseOrderWithIdOnly = await prisma.purchaseOrder.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PurchaseOrderFindManyArgs>(args?: Prisma.SelectSubset<T, PurchaseOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PurchaseOrder.
   * @param {PurchaseOrderCreateArgs} args - Arguments to create a PurchaseOrder.
   * @example
   * // Create one PurchaseOrder
   * const PurchaseOrder = await prisma.purchaseOrder.create({
   *   data: {
   *     // ... data to create a PurchaseOrder
   *   }
   * })
   * 
   */
  create<T extends PurchaseOrderCreateArgs>(args: Prisma.SelectSubset<T, PurchaseOrderCreateArgs<ExtArgs>>): Prisma.Prisma__PurchaseOrderClient<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PurchaseOrders.
   * @param {PurchaseOrderCreateManyArgs} args - Arguments to create many PurchaseOrders.
   * @example
   * // Create many PurchaseOrders
   * const purchaseOrder = await prisma.purchaseOrder.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PurchaseOrderCreateManyArgs>(args?: Prisma.SelectSubset<T, PurchaseOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PurchaseOrders and returns the data saved in the database.
   * @param {PurchaseOrderCreateManyAndReturnArgs} args - Arguments to create many PurchaseOrders.
   * @example
   * // Create many PurchaseOrders
   * const purchaseOrder = await prisma.purchaseOrder.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PurchaseOrders and only return the `id`
   * const purchaseOrderWithIdOnly = await prisma.purchaseOrder.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PurchaseOrderCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PurchaseOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PurchaseOrder.
   * @param {PurchaseOrderDeleteArgs} args - Arguments to delete one PurchaseOrder.
   * @example
   * // Delete one PurchaseOrder
   * const PurchaseOrder = await prisma.purchaseOrder.delete({
   *   where: {
   *     // ... filter to delete one PurchaseOrder
   *   }
   * })
   * 
   */
  delete<T extends PurchaseOrderDeleteArgs>(args: Prisma.SelectSubset<T, PurchaseOrderDeleteArgs<ExtArgs>>): Prisma.Prisma__PurchaseOrderClient<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PurchaseOrder.
   * @param {PurchaseOrderUpdateArgs} args - Arguments to update one PurchaseOrder.
   * @example
   * // Update one PurchaseOrder
   * const purchaseOrder = await prisma.purchaseOrder.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PurchaseOrderUpdateArgs>(args: Prisma.SelectSubset<T, PurchaseOrderUpdateArgs<ExtArgs>>): Prisma.Prisma__PurchaseOrderClient<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PurchaseOrders.
   * @param {PurchaseOrderDeleteManyArgs} args - Arguments to filter PurchaseOrders to delete.
   * @example
   * // Delete a few PurchaseOrders
   * const { count } = await prisma.purchaseOrder.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PurchaseOrderDeleteManyArgs>(args?: Prisma.SelectSubset<T, PurchaseOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PurchaseOrders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseOrderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PurchaseOrders
   * const purchaseOrder = await prisma.purchaseOrder.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PurchaseOrderUpdateManyArgs>(args: Prisma.SelectSubset<T, PurchaseOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PurchaseOrders and returns the data updated in the database.
   * @param {PurchaseOrderUpdateManyAndReturnArgs} args - Arguments to update many PurchaseOrders.
   * @example
   * // Update many PurchaseOrders
   * const purchaseOrder = await prisma.purchaseOrder.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PurchaseOrders and only return the `id`
   * const purchaseOrderWithIdOnly = await prisma.purchaseOrder.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PurchaseOrderUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PurchaseOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PurchaseOrder.
   * @param {PurchaseOrderUpsertArgs} args - Arguments to update or create a PurchaseOrder.
   * @example
   * // Update or create a PurchaseOrder
   * const purchaseOrder = await prisma.purchaseOrder.upsert({
   *   create: {
   *     // ... data to create a PurchaseOrder
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PurchaseOrder we want to update
   *   }
   * })
   */
  upsert<T extends PurchaseOrderUpsertArgs>(args: Prisma.SelectSubset<T, PurchaseOrderUpsertArgs<ExtArgs>>): Prisma.Prisma__PurchaseOrderClient<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PurchaseOrders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseOrderCountArgs} args - Arguments to filter PurchaseOrders to count.
   * @example
   * // Count the number of PurchaseOrders
   * const count = await prisma.purchaseOrder.count({
   *   where: {
   *     // ... the filter for the PurchaseOrders we want to count
   *   }
   * })
  **/
  count<T extends PurchaseOrderCountArgs>(
    args?: Prisma.Subset<T, PurchaseOrderCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PurchaseOrderCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PurchaseOrder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PurchaseOrderAggregateArgs>(args: Prisma.Subset<T, PurchaseOrderAggregateArgs>): Prisma.PrismaPromise<GetPurchaseOrderAggregateType<T>>

  /**
   * Group by PurchaseOrder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseOrderGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PurchaseOrderGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PurchaseOrderGroupByArgs['orderBy'] }
      : { orderBy?: PurchaseOrderGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PurchaseOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PurchaseOrder model
 */
readonly fields: PurchaseOrderFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PurchaseOrder.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PurchaseOrderClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  business<T extends Prisma.BusinessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BusinessDefaultArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  store<T extends Prisma.StoreDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StoreDefaultArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PurchaseOrder model
 */
export interface PurchaseOrderFieldRefs {
  readonly id: Prisma.FieldRef<"PurchaseOrder", 'String'>
  readonly businessId: Prisma.FieldRef<"PurchaseOrder", 'String'>
  readonly storeId: Prisma.FieldRef<"PurchaseOrder", 'String'>
  readonly supplierId: Prisma.FieldRef<"PurchaseOrder", 'String'>
  readonly status: Prisma.FieldRef<"PurchaseOrder", 'PurchaseOrderStatus'>
  readonly expectedDelivery: Prisma.FieldRef<"PurchaseOrder", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"PurchaseOrder", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PurchaseOrder", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PurchaseOrder findUnique
 */
export type PurchaseOrderFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderInclude<ExtArgs> | null
  /**
   * Filter, which PurchaseOrder to fetch.
   */
  where: Prisma.PurchaseOrderWhereUniqueInput
}

/**
 * PurchaseOrder findUniqueOrThrow
 */
export type PurchaseOrderFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderInclude<ExtArgs> | null
  /**
   * Filter, which PurchaseOrder to fetch.
   */
  where: Prisma.PurchaseOrderWhereUniqueInput
}

/**
 * PurchaseOrder findFirst
 */
export type PurchaseOrderFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderInclude<ExtArgs> | null
  /**
   * Filter, which PurchaseOrder to fetch.
   */
  where?: Prisma.PurchaseOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PurchaseOrders to fetch.
   */
  orderBy?: Prisma.PurchaseOrderOrderByWithRelationInput | Prisma.PurchaseOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PurchaseOrders.
   */
  cursor?: Prisma.PurchaseOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PurchaseOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PurchaseOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PurchaseOrders.
   */
  distinct?: Prisma.PurchaseOrderScalarFieldEnum | Prisma.PurchaseOrderScalarFieldEnum[]
}

/**
 * PurchaseOrder findFirstOrThrow
 */
export type PurchaseOrderFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderInclude<ExtArgs> | null
  /**
   * Filter, which PurchaseOrder to fetch.
   */
  where?: Prisma.PurchaseOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PurchaseOrders to fetch.
   */
  orderBy?: Prisma.PurchaseOrderOrderByWithRelationInput | Prisma.PurchaseOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PurchaseOrders.
   */
  cursor?: Prisma.PurchaseOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PurchaseOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PurchaseOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PurchaseOrders.
   */
  distinct?: Prisma.PurchaseOrderScalarFieldEnum | Prisma.PurchaseOrderScalarFieldEnum[]
}

/**
 * PurchaseOrder findMany
 */
export type PurchaseOrderFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderInclude<ExtArgs> | null
  /**
   * Filter, which PurchaseOrders to fetch.
   */
  where?: Prisma.PurchaseOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PurchaseOrders to fetch.
   */
  orderBy?: Prisma.PurchaseOrderOrderByWithRelationInput | Prisma.PurchaseOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PurchaseOrders.
   */
  cursor?: Prisma.PurchaseOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PurchaseOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PurchaseOrders.
   */
  skip?: number
  distinct?: Prisma.PurchaseOrderScalarFieldEnum | Prisma.PurchaseOrderScalarFieldEnum[]
}

/**
 * PurchaseOrder create
 */
export type PurchaseOrderCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderInclude<ExtArgs> | null
  /**
   * The data needed to create a PurchaseOrder.
   */
  data: Prisma.XOR<Prisma.PurchaseOrderCreateInput, Prisma.PurchaseOrderUncheckedCreateInput>
}

/**
 * PurchaseOrder createMany
 */
export type PurchaseOrderCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PurchaseOrders.
   */
  data: Prisma.PurchaseOrderCreateManyInput | Prisma.PurchaseOrderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PurchaseOrder createManyAndReturn
 */
export type PurchaseOrderCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * The data used to create many PurchaseOrders.
   */
  data: Prisma.PurchaseOrderCreateManyInput | Prisma.PurchaseOrderCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PurchaseOrder update
 */
export type PurchaseOrderUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderInclude<ExtArgs> | null
  /**
   * The data needed to update a PurchaseOrder.
   */
  data: Prisma.XOR<Prisma.PurchaseOrderUpdateInput, Prisma.PurchaseOrderUncheckedUpdateInput>
  /**
   * Choose, which PurchaseOrder to update.
   */
  where: Prisma.PurchaseOrderWhereUniqueInput
}

/**
 * PurchaseOrder updateMany
 */
export type PurchaseOrderUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PurchaseOrders.
   */
  data: Prisma.XOR<Prisma.PurchaseOrderUpdateManyMutationInput, Prisma.PurchaseOrderUncheckedUpdateManyInput>
  /**
   * Filter which PurchaseOrders to update
   */
  where?: Prisma.PurchaseOrderWhereInput
  /**
   * Limit how many PurchaseOrders to update.
   */
  limit?: number
}

/**
 * PurchaseOrder updateManyAndReturn
 */
export type PurchaseOrderUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * The data used to update PurchaseOrders.
   */
  data: Prisma.XOR<Prisma.PurchaseOrderUpdateManyMutationInput, Prisma.PurchaseOrderUncheckedUpdateManyInput>
  /**
   * Filter which PurchaseOrders to update
   */
  where?: Prisma.PurchaseOrderWhereInput
  /**
   * Limit how many PurchaseOrders to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PurchaseOrder upsert
 */
export type PurchaseOrderUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderInclude<ExtArgs> | null
  /**
   * The filter to search for the PurchaseOrder to update in case it exists.
   */
  where: Prisma.PurchaseOrderWhereUniqueInput
  /**
   * In case the PurchaseOrder found by the `where` argument doesn't exist, create a new PurchaseOrder with this data.
   */
  create: Prisma.XOR<Prisma.PurchaseOrderCreateInput, Prisma.PurchaseOrderUncheckedCreateInput>
  /**
   * In case the PurchaseOrder was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PurchaseOrderUpdateInput, Prisma.PurchaseOrderUncheckedUpdateInput>
}

/**
 * PurchaseOrder delete
 */
export type PurchaseOrderDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderInclude<ExtArgs> | null
  /**
   * Filter which PurchaseOrder to delete.
   */
  where: Prisma.PurchaseOrderWhereUniqueInput
}

/**
 * PurchaseOrder deleteMany
 */
export type PurchaseOrderDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PurchaseOrders to delete
   */
  where?: Prisma.PurchaseOrderWhereInput
  /**
   * Limit how many PurchaseOrders to delete.
   */
  limit?: number
}

/**
 * PurchaseOrder without action
 */
export type PurchaseOrderDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderInclude<ExtArgs> | null
}
