
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AccountRecharge` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AccountRecharge
 * 
 */
export type AccountRechargeModel = runtime.Types.Result.DefaultSelection<Prisma.$AccountRechargePayload>

export type AggregateAccountRecharge = {
  _count: AccountRechargeCountAggregateOutputType | null
  _avg: AccountRechargeAvgAggregateOutputType | null
  _sum: AccountRechargeSumAggregateOutputType | null
  _min: AccountRechargeMinAggregateOutputType | null
  _max: AccountRechargeMaxAggregateOutputType | null
}

export type AccountRechargeAvgAggregateOutputType = {
  amount: number | null
}

export type AccountRechargeSumAggregateOutputType = {
  amount: number | null
}

export type AccountRechargeMinAggregateOutputType = {
  id: string | null
  amount: number | null
  method: $Enums.RechargeMethod | null
  origin: $Enums.Country | null
  businessId: string | null
  clientId: string | null
  createdAt: Date | null
}

export type AccountRechargeMaxAggregateOutputType = {
  id: string | null
  amount: number | null
  method: $Enums.RechargeMethod | null
  origin: $Enums.Country | null
  businessId: string | null
  clientId: string | null
  createdAt: Date | null
}

export type AccountRechargeCountAggregateOutputType = {
  id: number
  amount: number
  method: number
  origin: number
  businessId: number
  clientId: number
  createdAt: number
  _all: number
}


export type AccountRechargeAvgAggregateInputType = {
  amount?: true
}

export type AccountRechargeSumAggregateInputType = {
  amount?: true
}

export type AccountRechargeMinAggregateInputType = {
  id?: true
  amount?: true
  method?: true
  origin?: true
  businessId?: true
  clientId?: true
  createdAt?: true
}

export type AccountRechargeMaxAggregateInputType = {
  id?: true
  amount?: true
  method?: true
  origin?: true
  businessId?: true
  clientId?: true
  createdAt?: true
}

export type AccountRechargeCountAggregateInputType = {
  id?: true
  amount?: true
  method?: true
  origin?: true
  businessId?: true
  clientId?: true
  createdAt?: true
  _all?: true
}

export type AccountRechargeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AccountRecharge to aggregate.
   */
  where?: Prisma.AccountRechargeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountRecharges to fetch.
   */
  orderBy?: Prisma.AccountRechargeOrderByWithRelationInput | Prisma.AccountRechargeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AccountRechargeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountRecharges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountRecharges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AccountRecharges
  **/
  _count?: true | AccountRechargeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AccountRechargeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AccountRechargeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AccountRechargeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AccountRechargeMaxAggregateInputType
}

export type GetAccountRechargeAggregateType<T extends AccountRechargeAggregateArgs> = {
      [P in keyof T & keyof AggregateAccountRecharge]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccountRecharge[P]>
    : Prisma.GetScalarType<T[P], AggregateAccountRecharge[P]>
}




export type AccountRechargeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AccountRechargeWhereInput
  orderBy?: Prisma.AccountRechargeOrderByWithAggregationInput | Prisma.AccountRechargeOrderByWithAggregationInput[]
  by: Prisma.AccountRechargeScalarFieldEnum[] | Prisma.AccountRechargeScalarFieldEnum
  having?: Prisma.AccountRechargeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AccountRechargeCountAggregateInputType | true
  _avg?: AccountRechargeAvgAggregateInputType
  _sum?: AccountRechargeSumAggregateInputType
  _min?: AccountRechargeMinAggregateInputType
  _max?: AccountRechargeMaxAggregateInputType
}

export type AccountRechargeGroupByOutputType = {
  id: string
  amount: number
  method: $Enums.RechargeMethod
  origin: $Enums.Country
  businessId: string | null
  clientId: string | null
  createdAt: Date
  _count: AccountRechargeCountAggregateOutputType | null
  _avg: AccountRechargeAvgAggregateOutputType | null
  _sum: AccountRechargeSumAggregateOutputType | null
  _min: AccountRechargeMinAggregateOutputType | null
  _max: AccountRechargeMaxAggregateOutputType | null
}

type GetAccountRechargeGroupByPayload<T extends AccountRechargeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccountRechargeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AccountRechargeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AccountRechargeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AccountRechargeGroupByOutputType[P]>
      }
    >
  > 



export type AccountRechargeWhereInput = {
  AND?: Prisma.AccountRechargeWhereInput | Prisma.AccountRechargeWhereInput[]
  OR?: Prisma.AccountRechargeWhereInput[]
  NOT?: Prisma.AccountRechargeWhereInput | Prisma.AccountRechargeWhereInput[]
  id?: Prisma.StringFilter<"AccountRecharge"> | string
  amount?: Prisma.FloatFilter<"AccountRecharge"> | number
  method?: Prisma.EnumRechargeMethodFilter<"AccountRecharge"> | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFilter<"AccountRecharge"> | $Enums.Country
  businessId?: Prisma.StringNullableFilter<"AccountRecharge"> | string | null
  clientId?: Prisma.StringNullableFilter<"AccountRecharge"> | string | null
  createdAt?: Prisma.DateTimeFilter<"AccountRecharge"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessNullableScalarRelationFilter, Prisma.BusinessWhereInput> | null
  client?: Prisma.XOR<Prisma.ClientNullableScalarRelationFilter, Prisma.ClientWhereInput> | null
}

export type AccountRechargeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  method?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  businessId?: Prisma.SortOrderInput | Prisma.SortOrder
  clientId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  business?: Prisma.BusinessOrderByWithRelationInput
  client?: Prisma.ClientOrderByWithRelationInput
}

export type AccountRechargeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AccountRechargeWhereInput | Prisma.AccountRechargeWhereInput[]
  OR?: Prisma.AccountRechargeWhereInput[]
  NOT?: Prisma.AccountRechargeWhereInput | Prisma.AccountRechargeWhereInput[]
  amount?: Prisma.FloatFilter<"AccountRecharge"> | number
  method?: Prisma.EnumRechargeMethodFilter<"AccountRecharge"> | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFilter<"AccountRecharge"> | $Enums.Country
  businessId?: Prisma.StringNullableFilter<"AccountRecharge"> | string | null
  clientId?: Prisma.StringNullableFilter<"AccountRecharge"> | string | null
  createdAt?: Prisma.DateTimeFilter<"AccountRecharge"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessNullableScalarRelationFilter, Prisma.BusinessWhereInput> | null
  client?: Prisma.XOR<Prisma.ClientNullableScalarRelationFilter, Prisma.ClientWhereInput> | null
}, "id">

export type AccountRechargeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  method?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  businessId?: Prisma.SortOrderInput | Prisma.SortOrder
  clientId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.AccountRechargeCountOrderByAggregateInput
  _avg?: Prisma.AccountRechargeAvgOrderByAggregateInput
  _max?: Prisma.AccountRechargeMaxOrderByAggregateInput
  _min?: Prisma.AccountRechargeMinOrderByAggregateInput
  _sum?: Prisma.AccountRechargeSumOrderByAggregateInput
}

export type AccountRechargeScalarWhereWithAggregatesInput = {
  AND?: Prisma.AccountRechargeScalarWhereWithAggregatesInput | Prisma.AccountRechargeScalarWhereWithAggregatesInput[]
  OR?: Prisma.AccountRechargeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AccountRechargeScalarWhereWithAggregatesInput | Prisma.AccountRechargeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AccountRecharge"> | string
  amount?: Prisma.FloatWithAggregatesFilter<"AccountRecharge"> | number
  method?: Prisma.EnumRechargeMethodWithAggregatesFilter<"AccountRecharge"> | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryWithAggregatesFilter<"AccountRecharge"> | $Enums.Country
  businessId?: Prisma.StringNullableWithAggregatesFilter<"AccountRecharge"> | string | null
  clientId?: Prisma.StringNullableWithAggregatesFilter<"AccountRecharge"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AccountRecharge"> | Date | string
}

export type AccountRechargeCreateInput = {
  id?: string
  amount: number
  method: $Enums.RechargeMethod
  origin: $Enums.Country
  createdAt?: Date | string
  business?: Prisma.BusinessCreateNestedOneWithoutRechargesInput
  client?: Prisma.ClientCreateNestedOneWithoutRechargesInput
}

export type AccountRechargeUncheckedCreateInput = {
  id?: string
  amount: number
  method: $Enums.RechargeMethod
  origin: $Enums.Country
  businessId?: string | null
  clientId?: string | null
  createdAt?: Date | string
}

export type AccountRechargeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.EnumRechargeMethodFieldUpdateOperationsInput | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFieldUpdateOperationsInput | $Enums.Country
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneWithoutRechargesNestedInput
  client?: Prisma.ClientUpdateOneWithoutRechargesNestedInput
}

export type AccountRechargeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.EnumRechargeMethodFieldUpdateOperationsInput | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFieldUpdateOperationsInput | $Enums.Country
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountRechargeCreateManyInput = {
  id?: string
  amount: number
  method: $Enums.RechargeMethod
  origin: $Enums.Country
  businessId?: string | null
  clientId?: string | null
  createdAt?: Date | string
}

export type AccountRechargeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.EnumRechargeMethodFieldUpdateOperationsInput | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFieldUpdateOperationsInput | $Enums.Country
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountRechargeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.EnumRechargeMethodFieldUpdateOperationsInput | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFieldUpdateOperationsInput | $Enums.Country
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountRechargeListRelationFilter = {
  every?: Prisma.AccountRechargeWhereInput
  some?: Prisma.AccountRechargeWhereInput
  none?: Prisma.AccountRechargeWhereInput
}

export type AccountRechargeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AccountRechargeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  method?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AccountRechargeAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type AccountRechargeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  method?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AccountRechargeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  method?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AccountRechargeSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type AccountRechargeCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.AccountRechargeCreateWithoutBusinessInput, Prisma.AccountRechargeUncheckedCreateWithoutBusinessInput> | Prisma.AccountRechargeCreateWithoutBusinessInput[] | Prisma.AccountRechargeUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.AccountRechargeCreateOrConnectWithoutBusinessInput | Prisma.AccountRechargeCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.AccountRechargeCreateManyBusinessInputEnvelope
  connect?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
}

export type AccountRechargeUncheckedCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.AccountRechargeCreateWithoutBusinessInput, Prisma.AccountRechargeUncheckedCreateWithoutBusinessInput> | Prisma.AccountRechargeCreateWithoutBusinessInput[] | Prisma.AccountRechargeUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.AccountRechargeCreateOrConnectWithoutBusinessInput | Prisma.AccountRechargeCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.AccountRechargeCreateManyBusinessInputEnvelope
  connect?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
}

export type AccountRechargeUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.AccountRechargeCreateWithoutBusinessInput, Prisma.AccountRechargeUncheckedCreateWithoutBusinessInput> | Prisma.AccountRechargeCreateWithoutBusinessInput[] | Prisma.AccountRechargeUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.AccountRechargeCreateOrConnectWithoutBusinessInput | Prisma.AccountRechargeCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.AccountRechargeUpsertWithWhereUniqueWithoutBusinessInput | Prisma.AccountRechargeUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.AccountRechargeCreateManyBusinessInputEnvelope
  set?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  disconnect?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  delete?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  connect?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  update?: Prisma.AccountRechargeUpdateWithWhereUniqueWithoutBusinessInput | Prisma.AccountRechargeUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.AccountRechargeUpdateManyWithWhereWithoutBusinessInput | Prisma.AccountRechargeUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.AccountRechargeScalarWhereInput | Prisma.AccountRechargeScalarWhereInput[]
}

export type AccountRechargeUncheckedUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.AccountRechargeCreateWithoutBusinessInput, Prisma.AccountRechargeUncheckedCreateWithoutBusinessInput> | Prisma.AccountRechargeCreateWithoutBusinessInput[] | Prisma.AccountRechargeUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.AccountRechargeCreateOrConnectWithoutBusinessInput | Prisma.AccountRechargeCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.AccountRechargeUpsertWithWhereUniqueWithoutBusinessInput | Prisma.AccountRechargeUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.AccountRechargeCreateManyBusinessInputEnvelope
  set?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  disconnect?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  delete?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  connect?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  update?: Prisma.AccountRechargeUpdateWithWhereUniqueWithoutBusinessInput | Prisma.AccountRechargeUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.AccountRechargeUpdateManyWithWhereWithoutBusinessInput | Prisma.AccountRechargeUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.AccountRechargeScalarWhereInput | Prisma.AccountRechargeScalarWhereInput[]
}

export type AccountRechargeCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.AccountRechargeCreateWithoutClientInput, Prisma.AccountRechargeUncheckedCreateWithoutClientInput> | Prisma.AccountRechargeCreateWithoutClientInput[] | Prisma.AccountRechargeUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.AccountRechargeCreateOrConnectWithoutClientInput | Prisma.AccountRechargeCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.AccountRechargeCreateManyClientInputEnvelope
  connect?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
}

export type AccountRechargeUncheckedCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.AccountRechargeCreateWithoutClientInput, Prisma.AccountRechargeUncheckedCreateWithoutClientInput> | Prisma.AccountRechargeCreateWithoutClientInput[] | Prisma.AccountRechargeUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.AccountRechargeCreateOrConnectWithoutClientInput | Prisma.AccountRechargeCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.AccountRechargeCreateManyClientInputEnvelope
  connect?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
}

export type AccountRechargeUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.AccountRechargeCreateWithoutClientInput, Prisma.AccountRechargeUncheckedCreateWithoutClientInput> | Prisma.AccountRechargeCreateWithoutClientInput[] | Prisma.AccountRechargeUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.AccountRechargeCreateOrConnectWithoutClientInput | Prisma.AccountRechargeCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.AccountRechargeUpsertWithWhereUniqueWithoutClientInput | Prisma.AccountRechargeUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.AccountRechargeCreateManyClientInputEnvelope
  set?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  disconnect?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  delete?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  connect?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  update?: Prisma.AccountRechargeUpdateWithWhereUniqueWithoutClientInput | Prisma.AccountRechargeUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.AccountRechargeUpdateManyWithWhereWithoutClientInput | Prisma.AccountRechargeUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.AccountRechargeScalarWhereInput | Prisma.AccountRechargeScalarWhereInput[]
}

export type AccountRechargeUncheckedUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.AccountRechargeCreateWithoutClientInput, Prisma.AccountRechargeUncheckedCreateWithoutClientInput> | Prisma.AccountRechargeCreateWithoutClientInput[] | Prisma.AccountRechargeUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.AccountRechargeCreateOrConnectWithoutClientInput | Prisma.AccountRechargeCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.AccountRechargeUpsertWithWhereUniqueWithoutClientInput | Prisma.AccountRechargeUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.AccountRechargeCreateManyClientInputEnvelope
  set?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  disconnect?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  delete?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  connect?: Prisma.AccountRechargeWhereUniqueInput | Prisma.AccountRechargeWhereUniqueInput[]
  update?: Prisma.AccountRechargeUpdateWithWhereUniqueWithoutClientInput | Prisma.AccountRechargeUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.AccountRechargeUpdateManyWithWhereWithoutClientInput | Prisma.AccountRechargeUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.AccountRechargeScalarWhereInput | Prisma.AccountRechargeScalarWhereInput[]
}

export type EnumRechargeMethodFieldUpdateOperationsInput = {
  set?: $Enums.RechargeMethod
}

export type EnumCountryFieldUpdateOperationsInput = {
  set?: $Enums.Country
}

export type AccountRechargeCreateWithoutBusinessInput = {
  id?: string
  amount: number
  method: $Enums.RechargeMethod
  origin: $Enums.Country
  createdAt?: Date | string
  client?: Prisma.ClientCreateNestedOneWithoutRechargesInput
}

export type AccountRechargeUncheckedCreateWithoutBusinessInput = {
  id?: string
  amount: number
  method: $Enums.RechargeMethod
  origin: $Enums.Country
  clientId?: string | null
  createdAt?: Date | string
}

export type AccountRechargeCreateOrConnectWithoutBusinessInput = {
  where: Prisma.AccountRechargeWhereUniqueInput
  create: Prisma.XOR<Prisma.AccountRechargeCreateWithoutBusinessInput, Prisma.AccountRechargeUncheckedCreateWithoutBusinessInput>
}

export type AccountRechargeCreateManyBusinessInputEnvelope = {
  data: Prisma.AccountRechargeCreateManyBusinessInput | Prisma.AccountRechargeCreateManyBusinessInput[]
  skipDuplicates?: boolean
}

export type AccountRechargeUpsertWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.AccountRechargeWhereUniqueInput
  update: Prisma.XOR<Prisma.AccountRechargeUpdateWithoutBusinessInput, Prisma.AccountRechargeUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.AccountRechargeCreateWithoutBusinessInput, Prisma.AccountRechargeUncheckedCreateWithoutBusinessInput>
}

export type AccountRechargeUpdateWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.AccountRechargeWhereUniqueInput
  data: Prisma.XOR<Prisma.AccountRechargeUpdateWithoutBusinessInput, Prisma.AccountRechargeUncheckedUpdateWithoutBusinessInput>
}

export type AccountRechargeUpdateManyWithWhereWithoutBusinessInput = {
  where: Prisma.AccountRechargeScalarWhereInput
  data: Prisma.XOR<Prisma.AccountRechargeUpdateManyMutationInput, Prisma.AccountRechargeUncheckedUpdateManyWithoutBusinessInput>
}

export type AccountRechargeScalarWhereInput = {
  AND?: Prisma.AccountRechargeScalarWhereInput | Prisma.AccountRechargeScalarWhereInput[]
  OR?: Prisma.AccountRechargeScalarWhereInput[]
  NOT?: Prisma.AccountRechargeScalarWhereInput | Prisma.AccountRechargeScalarWhereInput[]
  id?: Prisma.StringFilter<"AccountRecharge"> | string
  amount?: Prisma.FloatFilter<"AccountRecharge"> | number
  method?: Prisma.EnumRechargeMethodFilter<"AccountRecharge"> | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFilter<"AccountRecharge"> | $Enums.Country
  businessId?: Prisma.StringNullableFilter<"AccountRecharge"> | string | null
  clientId?: Prisma.StringNullableFilter<"AccountRecharge"> | string | null
  createdAt?: Prisma.DateTimeFilter<"AccountRecharge"> | Date | string
}

export type AccountRechargeCreateWithoutClientInput = {
  id?: string
  amount: number
  method: $Enums.RechargeMethod
  origin: $Enums.Country
  createdAt?: Date | string
  business?: Prisma.BusinessCreateNestedOneWithoutRechargesInput
}

export type AccountRechargeUncheckedCreateWithoutClientInput = {
  id?: string
  amount: number
  method: $Enums.RechargeMethod
  origin: $Enums.Country
  businessId?: string | null
  createdAt?: Date | string
}

export type AccountRechargeCreateOrConnectWithoutClientInput = {
  where: Prisma.AccountRechargeWhereUniqueInput
  create: Prisma.XOR<Prisma.AccountRechargeCreateWithoutClientInput, Prisma.AccountRechargeUncheckedCreateWithoutClientInput>
}

export type AccountRechargeCreateManyClientInputEnvelope = {
  data: Prisma.AccountRechargeCreateManyClientInput | Prisma.AccountRechargeCreateManyClientInput[]
  skipDuplicates?: boolean
}

export type AccountRechargeUpsertWithWhereUniqueWithoutClientInput = {
  where: Prisma.AccountRechargeWhereUniqueInput
  update: Prisma.XOR<Prisma.AccountRechargeUpdateWithoutClientInput, Prisma.AccountRechargeUncheckedUpdateWithoutClientInput>
  create: Prisma.XOR<Prisma.AccountRechargeCreateWithoutClientInput, Prisma.AccountRechargeUncheckedCreateWithoutClientInput>
}

export type AccountRechargeUpdateWithWhereUniqueWithoutClientInput = {
  where: Prisma.AccountRechargeWhereUniqueInput
  data: Prisma.XOR<Prisma.AccountRechargeUpdateWithoutClientInput, Prisma.AccountRechargeUncheckedUpdateWithoutClientInput>
}

export type AccountRechargeUpdateManyWithWhereWithoutClientInput = {
  where: Prisma.AccountRechargeScalarWhereInput
  data: Prisma.XOR<Prisma.AccountRechargeUpdateManyMutationInput, Prisma.AccountRechargeUncheckedUpdateManyWithoutClientInput>
}

export type AccountRechargeCreateManyBusinessInput = {
  id?: string
  amount: number
  method: $Enums.RechargeMethod
  origin: $Enums.Country
  clientId?: string | null
  createdAt?: Date | string
}

export type AccountRechargeUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.EnumRechargeMethodFieldUpdateOperationsInput | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFieldUpdateOperationsInput | $Enums.Country
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneWithoutRechargesNestedInput
}

export type AccountRechargeUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.EnumRechargeMethodFieldUpdateOperationsInput | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFieldUpdateOperationsInput | $Enums.Country
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountRechargeUncheckedUpdateManyWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.EnumRechargeMethodFieldUpdateOperationsInput | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFieldUpdateOperationsInput | $Enums.Country
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountRechargeCreateManyClientInput = {
  id?: string
  amount: number
  method: $Enums.RechargeMethod
  origin: $Enums.Country
  businessId?: string | null
  createdAt?: Date | string
}

export type AccountRechargeUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.EnumRechargeMethodFieldUpdateOperationsInput | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFieldUpdateOperationsInput | $Enums.Country
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneWithoutRechargesNestedInput
}

export type AccountRechargeUncheckedUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.EnumRechargeMethodFieldUpdateOperationsInput | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFieldUpdateOperationsInput | $Enums.Country
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountRechargeUncheckedUpdateManyWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.EnumRechargeMethodFieldUpdateOperationsInput | $Enums.RechargeMethod
  origin?: Prisma.EnumCountryFieldUpdateOperationsInput | $Enums.Country
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type AccountRechargeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  method?: boolean
  origin?: boolean
  businessId?: boolean
  clientId?: boolean
  createdAt?: boolean
  business?: boolean | Prisma.AccountRecharge$businessArgs<ExtArgs>
  client?: boolean | Prisma.AccountRecharge$clientArgs<ExtArgs>
}, ExtArgs["result"]["accountRecharge"]>

export type AccountRechargeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  method?: boolean
  origin?: boolean
  businessId?: boolean
  clientId?: boolean
  createdAt?: boolean
  business?: boolean | Prisma.AccountRecharge$businessArgs<ExtArgs>
  client?: boolean | Prisma.AccountRecharge$clientArgs<ExtArgs>
}, ExtArgs["result"]["accountRecharge"]>

export type AccountRechargeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  method?: boolean
  origin?: boolean
  businessId?: boolean
  clientId?: boolean
  createdAt?: boolean
  business?: boolean | Prisma.AccountRecharge$businessArgs<ExtArgs>
  client?: boolean | Prisma.AccountRecharge$clientArgs<ExtArgs>
}, ExtArgs["result"]["accountRecharge"]>

export type AccountRechargeSelectScalar = {
  id?: boolean
  amount?: boolean
  method?: boolean
  origin?: boolean
  businessId?: boolean
  clientId?: boolean
  createdAt?: boolean
}

export type AccountRechargeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "amount" | "method" | "origin" | "businessId" | "clientId" | "createdAt", ExtArgs["result"]["accountRecharge"]>
export type AccountRechargeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.AccountRecharge$businessArgs<ExtArgs>
  client?: boolean | Prisma.AccountRecharge$clientArgs<ExtArgs>
}
export type AccountRechargeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.AccountRecharge$businessArgs<ExtArgs>
  client?: boolean | Prisma.AccountRecharge$clientArgs<ExtArgs>
}
export type AccountRechargeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.AccountRecharge$businessArgs<ExtArgs>
  client?: boolean | Prisma.AccountRecharge$clientArgs<ExtArgs>
}

export type $AccountRechargePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AccountRecharge"
  objects: {
    business: Prisma.$BusinessPayload<ExtArgs> | null
    client: Prisma.$ClientPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    amount: number
    method: $Enums.RechargeMethod
    origin: $Enums.Country
    businessId: string | null
    clientId: string | null
    createdAt: Date
  }, ExtArgs["result"]["accountRecharge"]>
  composites: {}
}

export type AccountRechargeGetPayload<S extends boolean | null | undefined | AccountRechargeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AccountRechargePayload, S>

export type AccountRechargeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AccountRechargeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AccountRechargeCountAggregateInputType | true
  }

export interface AccountRechargeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountRecharge'], meta: { name: 'AccountRecharge' } }
  /**
   * Find zero or one AccountRecharge that matches the filter.
   * @param {AccountRechargeFindUniqueArgs} args - Arguments to find a AccountRecharge
   * @example
   * // Get one AccountRecharge
   * const accountRecharge = await prisma.accountRecharge.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccountRechargeFindUniqueArgs>(args: Prisma.SelectSubset<T, AccountRechargeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AccountRechargeClient<runtime.Types.Result.GetResult<Prisma.$AccountRechargePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AccountRecharge that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccountRechargeFindUniqueOrThrowArgs} args - Arguments to find a AccountRecharge
   * @example
   * // Get one AccountRecharge
   * const accountRecharge = await prisma.accountRecharge.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccountRechargeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AccountRechargeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccountRechargeClient<runtime.Types.Result.GetResult<Prisma.$AccountRechargePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AccountRecharge that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountRechargeFindFirstArgs} args - Arguments to find a AccountRecharge
   * @example
   * // Get one AccountRecharge
   * const accountRecharge = await prisma.accountRecharge.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccountRechargeFindFirstArgs>(args?: Prisma.SelectSubset<T, AccountRechargeFindFirstArgs<ExtArgs>>): Prisma.Prisma__AccountRechargeClient<runtime.Types.Result.GetResult<Prisma.$AccountRechargePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AccountRecharge that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountRechargeFindFirstOrThrowArgs} args - Arguments to find a AccountRecharge
   * @example
   * // Get one AccountRecharge
   * const accountRecharge = await prisma.accountRecharge.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccountRechargeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AccountRechargeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccountRechargeClient<runtime.Types.Result.GetResult<Prisma.$AccountRechargePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AccountRecharges that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountRechargeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AccountRecharges
   * const accountRecharges = await prisma.accountRecharge.findMany()
   * 
   * // Get first 10 AccountRecharges
   * const accountRecharges = await prisma.accountRecharge.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const accountRechargeWithIdOnly = await prisma.accountRecharge.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AccountRechargeFindManyArgs>(args?: Prisma.SelectSubset<T, AccountRechargeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountRechargePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AccountRecharge.
   * @param {AccountRechargeCreateArgs} args - Arguments to create a AccountRecharge.
   * @example
   * // Create one AccountRecharge
   * const AccountRecharge = await prisma.accountRecharge.create({
   *   data: {
   *     // ... data to create a AccountRecharge
   *   }
   * })
   * 
   */
  create<T extends AccountRechargeCreateArgs>(args: Prisma.SelectSubset<T, AccountRechargeCreateArgs<ExtArgs>>): Prisma.Prisma__AccountRechargeClient<runtime.Types.Result.GetResult<Prisma.$AccountRechargePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AccountRecharges.
   * @param {AccountRechargeCreateManyArgs} args - Arguments to create many AccountRecharges.
   * @example
   * // Create many AccountRecharges
   * const accountRecharge = await prisma.accountRecharge.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AccountRechargeCreateManyArgs>(args?: Prisma.SelectSubset<T, AccountRechargeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AccountRecharges and returns the data saved in the database.
   * @param {AccountRechargeCreateManyAndReturnArgs} args - Arguments to create many AccountRecharges.
   * @example
   * // Create many AccountRecharges
   * const accountRecharge = await prisma.accountRecharge.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AccountRecharges and only return the `id`
   * const accountRechargeWithIdOnly = await prisma.accountRecharge.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AccountRechargeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AccountRechargeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountRechargePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AccountRecharge.
   * @param {AccountRechargeDeleteArgs} args - Arguments to delete one AccountRecharge.
   * @example
   * // Delete one AccountRecharge
   * const AccountRecharge = await prisma.accountRecharge.delete({
   *   where: {
   *     // ... filter to delete one AccountRecharge
   *   }
   * })
   * 
   */
  delete<T extends AccountRechargeDeleteArgs>(args: Prisma.SelectSubset<T, AccountRechargeDeleteArgs<ExtArgs>>): Prisma.Prisma__AccountRechargeClient<runtime.Types.Result.GetResult<Prisma.$AccountRechargePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AccountRecharge.
   * @param {AccountRechargeUpdateArgs} args - Arguments to update one AccountRecharge.
   * @example
   * // Update one AccountRecharge
   * const accountRecharge = await prisma.accountRecharge.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AccountRechargeUpdateArgs>(args: Prisma.SelectSubset<T, AccountRechargeUpdateArgs<ExtArgs>>): Prisma.Prisma__AccountRechargeClient<runtime.Types.Result.GetResult<Prisma.$AccountRechargePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AccountRecharges.
   * @param {AccountRechargeDeleteManyArgs} args - Arguments to filter AccountRecharges to delete.
   * @example
   * // Delete a few AccountRecharges
   * const { count } = await prisma.accountRecharge.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AccountRechargeDeleteManyArgs>(args?: Prisma.SelectSubset<T, AccountRechargeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AccountRecharges.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountRechargeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AccountRecharges
   * const accountRecharge = await prisma.accountRecharge.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AccountRechargeUpdateManyArgs>(args: Prisma.SelectSubset<T, AccountRechargeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AccountRecharges and returns the data updated in the database.
   * @param {AccountRechargeUpdateManyAndReturnArgs} args - Arguments to update many AccountRecharges.
   * @example
   * // Update many AccountRecharges
   * const accountRecharge = await prisma.accountRecharge.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AccountRecharges and only return the `id`
   * const accountRechargeWithIdOnly = await prisma.accountRecharge.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AccountRechargeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AccountRechargeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountRechargePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AccountRecharge.
   * @param {AccountRechargeUpsertArgs} args - Arguments to update or create a AccountRecharge.
   * @example
   * // Update or create a AccountRecharge
   * const accountRecharge = await prisma.accountRecharge.upsert({
   *   create: {
   *     // ... data to create a AccountRecharge
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AccountRecharge we want to update
   *   }
   * })
   */
  upsert<T extends AccountRechargeUpsertArgs>(args: Prisma.SelectSubset<T, AccountRechargeUpsertArgs<ExtArgs>>): Prisma.Prisma__AccountRechargeClient<runtime.Types.Result.GetResult<Prisma.$AccountRechargePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AccountRecharges.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountRechargeCountArgs} args - Arguments to filter AccountRecharges to count.
   * @example
   * // Count the number of AccountRecharges
   * const count = await prisma.accountRecharge.count({
   *   where: {
   *     // ... the filter for the AccountRecharges we want to count
   *   }
   * })
  **/
  count<T extends AccountRechargeCountArgs>(
    args?: Prisma.Subset<T, AccountRechargeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AccountRechargeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AccountRecharge.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountRechargeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AccountRechargeAggregateArgs>(args: Prisma.Subset<T, AccountRechargeAggregateArgs>): Prisma.PrismaPromise<GetAccountRechargeAggregateType<T>>

  /**
   * Group by AccountRecharge.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountRechargeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AccountRechargeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccountRechargeGroupByArgs['orderBy'] }
      : { orderBy?: AccountRechargeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AccountRechargeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountRechargeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AccountRecharge model
 */
readonly fields: AccountRechargeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AccountRecharge.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccountRechargeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  business<T extends Prisma.AccountRecharge$businessArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AccountRecharge$businessArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  client<T extends Prisma.AccountRecharge$clientArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AccountRecharge$clientArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AccountRecharge model
 */
export interface AccountRechargeFieldRefs {
  readonly id: Prisma.FieldRef<"AccountRecharge", 'String'>
  readonly amount: Prisma.FieldRef<"AccountRecharge", 'Float'>
  readonly method: Prisma.FieldRef<"AccountRecharge", 'RechargeMethod'>
  readonly origin: Prisma.FieldRef<"AccountRecharge", 'Country'>
  readonly businessId: Prisma.FieldRef<"AccountRecharge", 'String'>
  readonly clientId: Prisma.FieldRef<"AccountRecharge", 'String'>
  readonly createdAt: Prisma.FieldRef<"AccountRecharge", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AccountRecharge findUnique
 */
export type AccountRechargeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountRecharge
   */
  select?: Prisma.AccountRechargeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountRecharge
   */
  omit?: Prisma.AccountRechargeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountRechargeInclude<ExtArgs> | null
  /**
   * Filter, which AccountRecharge to fetch.
   */
  where: Prisma.AccountRechargeWhereUniqueInput
}

/**
 * AccountRecharge findUniqueOrThrow
 */
export type AccountRechargeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountRecharge
   */
  select?: Prisma.AccountRechargeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountRecharge
   */
  omit?: Prisma.AccountRechargeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountRechargeInclude<ExtArgs> | null
  /**
   * Filter, which AccountRecharge to fetch.
   */
  where: Prisma.AccountRechargeWhereUniqueInput
}

/**
 * AccountRecharge findFirst
 */
export type AccountRechargeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountRecharge
   */
  select?: Prisma.AccountRechargeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountRecharge
   */
  omit?: Prisma.AccountRechargeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountRechargeInclude<ExtArgs> | null
  /**
   * Filter, which AccountRecharge to fetch.
   */
  where?: Prisma.AccountRechargeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountRecharges to fetch.
   */
  orderBy?: Prisma.AccountRechargeOrderByWithRelationInput | Prisma.AccountRechargeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AccountRecharges.
   */
  cursor?: Prisma.AccountRechargeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountRecharges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountRecharges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AccountRecharges.
   */
  distinct?: Prisma.AccountRechargeScalarFieldEnum | Prisma.AccountRechargeScalarFieldEnum[]
}

/**
 * AccountRecharge findFirstOrThrow
 */
export type AccountRechargeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountRecharge
   */
  select?: Prisma.AccountRechargeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountRecharge
   */
  omit?: Prisma.AccountRechargeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountRechargeInclude<ExtArgs> | null
  /**
   * Filter, which AccountRecharge to fetch.
   */
  where?: Prisma.AccountRechargeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountRecharges to fetch.
   */
  orderBy?: Prisma.AccountRechargeOrderByWithRelationInput | Prisma.AccountRechargeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AccountRecharges.
   */
  cursor?: Prisma.AccountRechargeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountRecharges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountRecharges.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AccountRecharges.
   */
  distinct?: Prisma.AccountRechargeScalarFieldEnum | Prisma.AccountRechargeScalarFieldEnum[]
}

/**
 * AccountRecharge findMany
 */
export type AccountRechargeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountRecharge
   */
  select?: Prisma.AccountRechargeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountRecharge
   */
  omit?: Prisma.AccountRechargeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountRechargeInclude<ExtArgs> | null
  /**
   * Filter, which AccountRecharges to fetch.
   */
  where?: Prisma.AccountRechargeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountRecharges to fetch.
   */
  orderBy?: Prisma.AccountRechargeOrderByWithRelationInput | Prisma.AccountRechargeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AccountRecharges.
   */
  cursor?: Prisma.AccountRechargeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountRecharges from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountRecharges.
   */
  skip?: number
  distinct?: Prisma.AccountRechargeScalarFieldEnum | Prisma.AccountRechargeScalarFieldEnum[]
}

/**
 * AccountRecharge create
 */
export type AccountRechargeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountRecharge
   */
  select?: Prisma.AccountRechargeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountRecharge
   */
  omit?: Prisma.AccountRechargeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountRechargeInclude<ExtArgs> | null
  /**
   * The data needed to create a AccountRecharge.
   */
  data: Prisma.XOR<Prisma.AccountRechargeCreateInput, Prisma.AccountRechargeUncheckedCreateInput>
}

/**
 * AccountRecharge createMany
 */
export type AccountRechargeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AccountRecharges.
   */
  data: Prisma.AccountRechargeCreateManyInput | Prisma.AccountRechargeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AccountRecharge createManyAndReturn
 */
export type AccountRechargeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountRecharge
   */
  select?: Prisma.AccountRechargeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AccountRecharge
   */
  omit?: Prisma.AccountRechargeOmit<ExtArgs> | null
  /**
   * The data used to create many AccountRecharges.
   */
  data: Prisma.AccountRechargeCreateManyInput | Prisma.AccountRechargeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountRechargeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AccountRecharge update
 */
export type AccountRechargeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountRecharge
   */
  select?: Prisma.AccountRechargeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountRecharge
   */
  omit?: Prisma.AccountRechargeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountRechargeInclude<ExtArgs> | null
  /**
   * The data needed to update a AccountRecharge.
   */
  data: Prisma.XOR<Prisma.AccountRechargeUpdateInput, Prisma.AccountRechargeUncheckedUpdateInput>
  /**
   * Choose, which AccountRecharge to update.
   */
  where: Prisma.AccountRechargeWhereUniqueInput
}

/**
 * AccountRecharge updateMany
 */
export type AccountRechargeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AccountRecharges.
   */
  data: Prisma.XOR<Prisma.AccountRechargeUpdateManyMutationInput, Prisma.AccountRechargeUncheckedUpdateManyInput>
  /**
   * Filter which AccountRecharges to update
   */
  where?: Prisma.AccountRechargeWhereInput
  /**
   * Limit how many AccountRecharges to update.
   */
  limit?: number
}

/**
 * AccountRecharge updateManyAndReturn
 */
export type AccountRechargeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountRecharge
   */
  select?: Prisma.AccountRechargeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AccountRecharge
   */
  omit?: Prisma.AccountRechargeOmit<ExtArgs> | null
  /**
   * The data used to update AccountRecharges.
   */
  data: Prisma.XOR<Prisma.AccountRechargeUpdateManyMutationInput, Prisma.AccountRechargeUncheckedUpdateManyInput>
  /**
   * Filter which AccountRecharges to update
   */
  where?: Prisma.AccountRechargeWhereInput
  /**
   * Limit how many AccountRecharges to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountRechargeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AccountRecharge upsert
 */
export type AccountRechargeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountRecharge
   */
  select?: Prisma.AccountRechargeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountRecharge
   */
  omit?: Prisma.AccountRechargeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountRechargeInclude<ExtArgs> | null
  /**
   * The filter to search for the AccountRecharge to update in case it exists.
   */
  where: Prisma.AccountRechargeWhereUniqueInput
  /**
   * In case the AccountRecharge found by the `where` argument doesn't exist, create a new AccountRecharge with this data.
   */
  create: Prisma.XOR<Prisma.AccountRechargeCreateInput, Prisma.AccountRechargeUncheckedCreateInput>
  /**
   * In case the AccountRecharge was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AccountRechargeUpdateInput, Prisma.AccountRechargeUncheckedUpdateInput>
}

/**
 * AccountRecharge delete
 */
export type AccountRechargeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountRecharge
   */
  select?: Prisma.AccountRechargeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountRecharge
   */
  omit?: Prisma.AccountRechargeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountRechargeInclude<ExtArgs> | null
  /**
   * Filter which AccountRecharge to delete.
   */
  where: Prisma.AccountRechargeWhereUniqueInput
}

/**
 * AccountRecharge deleteMany
 */
export type AccountRechargeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AccountRecharges to delete
   */
  where?: Prisma.AccountRechargeWhereInput
  /**
   * Limit how many AccountRecharges to delete.
   */
  limit?: number
}

/**
 * AccountRecharge.business
 */
export type AccountRecharge$businessArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Business
   */
  select?: Prisma.BusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Business
   */
  omit?: Prisma.BusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessInclude<ExtArgs> | null
  where?: Prisma.BusinessWhereInput
}

/**
 * AccountRecharge.client
 */
export type AccountRecharge$clientArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  where?: Prisma.ClientWhereInput
}

/**
 * AccountRecharge without action
 */
export type AccountRechargeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountRecharge
   */
  select?: Prisma.AccountRechargeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountRecharge
   */
  omit?: Prisma.AccountRechargeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountRechargeInclude<ExtArgs> | null
}
