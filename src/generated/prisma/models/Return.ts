
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Return` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Return
 * 
 */
export type ReturnModel = runtime.Types.Result.DefaultSelection<Prisma.$ReturnPayload>

export type AggregateReturn = {
  _count: ReturnCountAggregateOutputType | null
  _min: ReturnMinAggregateOutputType | null
  _max: ReturnMaxAggregateOutputType | null
}

export type ReturnMinAggregateOutputType = {
  id: string | null
  saleId: string | null
  reason: string | null
  status: $Enums.SaleStatus | null
  createdAt: Date | null
}

export type ReturnMaxAggregateOutputType = {
  id: string | null
  saleId: string | null
  reason: string | null
  status: $Enums.SaleStatus | null
  createdAt: Date | null
}

export type ReturnCountAggregateOutputType = {
  id: number
  saleId: number
  reason: number
  status: number
  createdAt: number
  _all: number
}


export type ReturnMinAggregateInputType = {
  id?: true
  saleId?: true
  reason?: true
  status?: true
  createdAt?: true
}

export type ReturnMaxAggregateInputType = {
  id?: true
  saleId?: true
  reason?: true
  status?: true
  createdAt?: true
}

export type ReturnCountAggregateInputType = {
  id?: true
  saleId?: true
  reason?: true
  status?: true
  createdAt?: true
  _all?: true
}

export type ReturnAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Return to aggregate.
   */
  where?: Prisma.ReturnWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Returns to fetch.
   */
  orderBy?: Prisma.ReturnOrderByWithRelationInput | Prisma.ReturnOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ReturnWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Returns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Returns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Returns
  **/
  _count?: true | ReturnCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ReturnMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ReturnMaxAggregateInputType
}

export type GetReturnAggregateType<T extends ReturnAggregateArgs> = {
      [P in keyof T & keyof AggregateReturn]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReturn[P]>
    : Prisma.GetScalarType<T[P], AggregateReturn[P]>
}




export type ReturnGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReturnWhereInput
  orderBy?: Prisma.ReturnOrderByWithAggregationInput | Prisma.ReturnOrderByWithAggregationInput[]
  by: Prisma.ReturnScalarFieldEnum[] | Prisma.ReturnScalarFieldEnum
  having?: Prisma.ReturnScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ReturnCountAggregateInputType | true
  _min?: ReturnMinAggregateInputType
  _max?: ReturnMaxAggregateInputType
}

export type ReturnGroupByOutputType = {
  id: string
  saleId: string
  reason: string | null
  status: $Enums.SaleStatus
  createdAt: Date
  _count: ReturnCountAggregateOutputType | null
  _min: ReturnMinAggregateOutputType | null
  _max: ReturnMaxAggregateOutputType | null
}

type GetReturnGroupByPayload<T extends ReturnGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ReturnGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ReturnGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ReturnGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ReturnGroupByOutputType[P]>
      }
    >
  > 



export type ReturnWhereInput = {
  AND?: Prisma.ReturnWhereInput | Prisma.ReturnWhereInput[]
  OR?: Prisma.ReturnWhereInput[]
  NOT?: Prisma.ReturnWhereInput | Prisma.ReturnWhereInput[]
  id?: Prisma.StringFilter<"Return"> | string
  saleId?: Prisma.StringFilter<"Return"> | string
  reason?: Prisma.StringNullableFilter<"Return"> | string | null
  status?: Prisma.EnumSaleStatusFilter<"Return"> | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFilter<"Return"> | Date | string
  sale?: Prisma.XOR<Prisma.SaleScalarRelationFilter, Prisma.SaleWhereInput>
}

export type ReturnOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  reason?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  sale?: Prisma.SaleOrderByWithRelationInput
}

export type ReturnWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ReturnWhereInput | Prisma.ReturnWhereInput[]
  OR?: Prisma.ReturnWhereInput[]
  NOT?: Prisma.ReturnWhereInput | Prisma.ReturnWhereInput[]
  saleId?: Prisma.StringFilter<"Return"> | string
  reason?: Prisma.StringNullableFilter<"Return"> | string | null
  status?: Prisma.EnumSaleStatusFilter<"Return"> | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFilter<"Return"> | Date | string
  sale?: Prisma.XOR<Prisma.SaleScalarRelationFilter, Prisma.SaleWhereInput>
}, "id">

export type ReturnOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  reason?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ReturnCountOrderByAggregateInput
  _max?: Prisma.ReturnMaxOrderByAggregateInput
  _min?: Prisma.ReturnMinOrderByAggregateInput
}

export type ReturnScalarWhereWithAggregatesInput = {
  AND?: Prisma.ReturnScalarWhereWithAggregatesInput | Prisma.ReturnScalarWhereWithAggregatesInput[]
  OR?: Prisma.ReturnScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ReturnScalarWhereWithAggregatesInput | Prisma.ReturnScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Return"> | string
  saleId?: Prisma.StringWithAggregatesFilter<"Return"> | string
  reason?: Prisma.StringNullableWithAggregatesFilter<"Return"> | string | null
  status?: Prisma.EnumSaleStatusWithAggregatesFilter<"Return"> | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Return"> | Date | string
}

export type ReturnCreateInput = {
  id?: string
  reason?: string | null
  status?: $Enums.SaleStatus
  createdAt?: Date | string
  sale: Prisma.SaleCreateNestedOneWithoutReturnsInput
}

export type ReturnUncheckedCreateInput = {
  id?: string
  saleId: string
  reason?: string | null
  status?: $Enums.SaleStatus
  createdAt?: Date | string
}

export type ReturnUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sale?: Prisma.SaleUpdateOneRequiredWithoutReturnsNestedInput
}

export type ReturnUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleId?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReturnCreateManyInput = {
  id?: string
  saleId: string
  reason?: string | null
  status?: $Enums.SaleStatus
  createdAt?: Date | string
}

export type ReturnUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReturnUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleId?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReturnListRelationFilter = {
  every?: Prisma.ReturnWhereInput
  some?: Prisma.ReturnWhereInput
  none?: Prisma.ReturnWhereInput
}

export type ReturnOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ReturnCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ReturnMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ReturnMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ReturnCreateNestedManyWithoutSaleInput = {
  create?: Prisma.XOR<Prisma.ReturnCreateWithoutSaleInput, Prisma.ReturnUncheckedCreateWithoutSaleInput> | Prisma.ReturnCreateWithoutSaleInput[] | Prisma.ReturnUncheckedCreateWithoutSaleInput[]
  connectOrCreate?: Prisma.ReturnCreateOrConnectWithoutSaleInput | Prisma.ReturnCreateOrConnectWithoutSaleInput[]
  createMany?: Prisma.ReturnCreateManySaleInputEnvelope
  connect?: Prisma.ReturnWhereUniqueInput | Prisma.ReturnWhereUniqueInput[]
}

export type ReturnUncheckedCreateNestedManyWithoutSaleInput = {
  create?: Prisma.XOR<Prisma.ReturnCreateWithoutSaleInput, Prisma.ReturnUncheckedCreateWithoutSaleInput> | Prisma.ReturnCreateWithoutSaleInput[] | Prisma.ReturnUncheckedCreateWithoutSaleInput[]
  connectOrCreate?: Prisma.ReturnCreateOrConnectWithoutSaleInput | Prisma.ReturnCreateOrConnectWithoutSaleInput[]
  createMany?: Prisma.ReturnCreateManySaleInputEnvelope
  connect?: Prisma.ReturnWhereUniqueInput | Prisma.ReturnWhereUniqueInput[]
}

export type ReturnUpdateManyWithoutSaleNestedInput = {
  create?: Prisma.XOR<Prisma.ReturnCreateWithoutSaleInput, Prisma.ReturnUncheckedCreateWithoutSaleInput> | Prisma.ReturnCreateWithoutSaleInput[] | Prisma.ReturnUncheckedCreateWithoutSaleInput[]
  connectOrCreate?: Prisma.ReturnCreateOrConnectWithoutSaleInput | Prisma.ReturnCreateOrConnectWithoutSaleInput[]
  upsert?: Prisma.ReturnUpsertWithWhereUniqueWithoutSaleInput | Prisma.ReturnUpsertWithWhereUniqueWithoutSaleInput[]
  createMany?: Prisma.ReturnCreateManySaleInputEnvelope
  set?: Prisma.ReturnWhereUniqueInput | Prisma.ReturnWhereUniqueInput[]
  disconnect?: Prisma.ReturnWhereUniqueInput | Prisma.ReturnWhereUniqueInput[]
  delete?: Prisma.ReturnWhereUniqueInput | Prisma.ReturnWhereUniqueInput[]
  connect?: Prisma.ReturnWhereUniqueInput | Prisma.ReturnWhereUniqueInput[]
  update?: Prisma.ReturnUpdateWithWhereUniqueWithoutSaleInput | Prisma.ReturnUpdateWithWhereUniqueWithoutSaleInput[]
  updateMany?: Prisma.ReturnUpdateManyWithWhereWithoutSaleInput | Prisma.ReturnUpdateManyWithWhereWithoutSaleInput[]
  deleteMany?: Prisma.ReturnScalarWhereInput | Prisma.ReturnScalarWhereInput[]
}

export type ReturnUncheckedUpdateManyWithoutSaleNestedInput = {
  create?: Prisma.XOR<Prisma.ReturnCreateWithoutSaleInput, Prisma.ReturnUncheckedCreateWithoutSaleInput> | Prisma.ReturnCreateWithoutSaleInput[] | Prisma.ReturnUncheckedCreateWithoutSaleInput[]
  connectOrCreate?: Prisma.ReturnCreateOrConnectWithoutSaleInput | Prisma.ReturnCreateOrConnectWithoutSaleInput[]
  upsert?: Prisma.ReturnUpsertWithWhereUniqueWithoutSaleInput | Prisma.ReturnUpsertWithWhereUniqueWithoutSaleInput[]
  createMany?: Prisma.ReturnCreateManySaleInputEnvelope
  set?: Prisma.ReturnWhereUniqueInput | Prisma.ReturnWhereUniqueInput[]
  disconnect?: Prisma.ReturnWhereUniqueInput | Prisma.ReturnWhereUniqueInput[]
  delete?: Prisma.ReturnWhereUniqueInput | Prisma.ReturnWhereUniqueInput[]
  connect?: Prisma.ReturnWhereUniqueInput | Prisma.ReturnWhereUniqueInput[]
  update?: Prisma.ReturnUpdateWithWhereUniqueWithoutSaleInput | Prisma.ReturnUpdateWithWhereUniqueWithoutSaleInput[]
  updateMany?: Prisma.ReturnUpdateManyWithWhereWithoutSaleInput | Prisma.ReturnUpdateManyWithWhereWithoutSaleInput[]
  deleteMany?: Prisma.ReturnScalarWhereInput | Prisma.ReturnScalarWhereInput[]
}

export type ReturnCreateWithoutSaleInput = {
  id?: string
  reason?: string | null
  status?: $Enums.SaleStatus
  createdAt?: Date | string
}

export type ReturnUncheckedCreateWithoutSaleInput = {
  id?: string
  reason?: string | null
  status?: $Enums.SaleStatus
  createdAt?: Date | string
}

export type ReturnCreateOrConnectWithoutSaleInput = {
  where: Prisma.ReturnWhereUniqueInput
  create: Prisma.XOR<Prisma.ReturnCreateWithoutSaleInput, Prisma.ReturnUncheckedCreateWithoutSaleInput>
}

export type ReturnCreateManySaleInputEnvelope = {
  data: Prisma.ReturnCreateManySaleInput | Prisma.ReturnCreateManySaleInput[]
  skipDuplicates?: boolean
}

export type ReturnUpsertWithWhereUniqueWithoutSaleInput = {
  where: Prisma.ReturnWhereUniqueInput
  update: Prisma.XOR<Prisma.ReturnUpdateWithoutSaleInput, Prisma.ReturnUncheckedUpdateWithoutSaleInput>
  create: Prisma.XOR<Prisma.ReturnCreateWithoutSaleInput, Prisma.ReturnUncheckedCreateWithoutSaleInput>
}

export type ReturnUpdateWithWhereUniqueWithoutSaleInput = {
  where: Prisma.ReturnWhereUniqueInput
  data: Prisma.XOR<Prisma.ReturnUpdateWithoutSaleInput, Prisma.ReturnUncheckedUpdateWithoutSaleInput>
}

export type ReturnUpdateManyWithWhereWithoutSaleInput = {
  where: Prisma.ReturnScalarWhereInput
  data: Prisma.XOR<Prisma.ReturnUpdateManyMutationInput, Prisma.ReturnUncheckedUpdateManyWithoutSaleInput>
}

export type ReturnScalarWhereInput = {
  AND?: Prisma.ReturnScalarWhereInput | Prisma.ReturnScalarWhereInput[]
  OR?: Prisma.ReturnScalarWhereInput[]
  NOT?: Prisma.ReturnScalarWhereInput | Prisma.ReturnScalarWhereInput[]
  id?: Prisma.StringFilter<"Return"> | string
  saleId?: Prisma.StringFilter<"Return"> | string
  reason?: Prisma.StringNullableFilter<"Return"> | string | null
  status?: Prisma.EnumSaleStatusFilter<"Return"> | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFilter<"Return"> | Date | string
}

export type ReturnCreateManySaleInput = {
  id?: string
  reason?: string | null
  status?: $Enums.SaleStatus
  createdAt?: Date | string
}

export type ReturnUpdateWithoutSaleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReturnUncheckedUpdateWithoutSaleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReturnUncheckedUpdateManyWithoutSaleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumSaleStatusFieldUpdateOperationsInput | $Enums.SaleStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ReturnSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  saleId?: boolean
  reason?: boolean
  status?: boolean
  createdAt?: boolean
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["return"]>

export type ReturnSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  saleId?: boolean
  reason?: boolean
  status?: boolean
  createdAt?: boolean
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["return"]>

export type ReturnSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  saleId?: boolean
  reason?: boolean
  status?: boolean
  createdAt?: boolean
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["return"]>

export type ReturnSelectScalar = {
  id?: boolean
  saleId?: boolean
  reason?: boolean
  status?: boolean
  createdAt?: boolean
}

export type ReturnOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "saleId" | "reason" | "status" | "createdAt", ExtArgs["result"]["return"]>
export type ReturnInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
}
export type ReturnIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
}
export type ReturnIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
}

export type $ReturnPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Return"
  objects: {
    sale: Prisma.$SalePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    saleId: string
    reason: string | null
    status: $Enums.SaleStatus
    createdAt: Date
  }, ExtArgs["result"]["return"]>
  composites: {}
}

export type ReturnGetPayload<S extends boolean | null | undefined | ReturnDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ReturnPayload, S>

export type ReturnCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ReturnFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ReturnCountAggregateInputType | true
  }

export interface ReturnDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Return'], meta: { name: 'Return' } }
  /**
   * Find zero or one Return that matches the filter.
   * @param {ReturnFindUniqueArgs} args - Arguments to find a Return
   * @example
   * // Get one Return
   * const return = await prisma.return.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReturnFindUniqueArgs>(args: Prisma.SelectSubset<T, ReturnFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ReturnClient<runtime.Types.Result.GetResult<Prisma.$ReturnPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Return that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReturnFindUniqueOrThrowArgs} args - Arguments to find a Return
   * @example
   * // Get one Return
   * const return = await prisma.return.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReturnFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ReturnFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ReturnClient<runtime.Types.Result.GetResult<Prisma.$ReturnPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Return that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReturnFindFirstArgs} args - Arguments to find a Return
   * @example
   * // Get one Return
   * const return = await prisma.return.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReturnFindFirstArgs>(args?: Prisma.SelectSubset<T, ReturnFindFirstArgs<ExtArgs>>): Prisma.Prisma__ReturnClient<runtime.Types.Result.GetResult<Prisma.$ReturnPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Return that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReturnFindFirstOrThrowArgs} args - Arguments to find a Return
   * @example
   * // Get one Return
   * const return = await prisma.return.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReturnFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ReturnFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ReturnClient<runtime.Types.Result.GetResult<Prisma.$ReturnPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Returns that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReturnFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Returns
   * const returns = await prisma.return.findMany()
   * 
   * // Get first 10 Returns
   * const returns = await prisma.return.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const returnWithIdOnly = await prisma.return.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ReturnFindManyArgs>(args?: Prisma.SelectSubset<T, ReturnFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReturnPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Return.
   * @param {ReturnCreateArgs} args - Arguments to create a Return.
   * @example
   * // Create one Return
   * const Return = await prisma.return.create({
   *   data: {
   *     // ... data to create a Return
   *   }
   * })
   * 
   */
  create<T extends ReturnCreateArgs>(args: Prisma.SelectSubset<T, ReturnCreateArgs<ExtArgs>>): Prisma.Prisma__ReturnClient<runtime.Types.Result.GetResult<Prisma.$ReturnPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Returns.
   * @param {ReturnCreateManyArgs} args - Arguments to create many Returns.
   * @example
   * // Create many Returns
   * const return = await prisma.return.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ReturnCreateManyArgs>(args?: Prisma.SelectSubset<T, ReturnCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Returns and returns the data saved in the database.
   * @param {ReturnCreateManyAndReturnArgs} args - Arguments to create many Returns.
   * @example
   * // Create many Returns
   * const return = await prisma.return.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Returns and only return the `id`
   * const returnWithIdOnly = await prisma.return.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ReturnCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ReturnCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReturnPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Return.
   * @param {ReturnDeleteArgs} args - Arguments to delete one Return.
   * @example
   * // Delete one Return
   * const Return = await prisma.return.delete({
   *   where: {
   *     // ... filter to delete one Return
   *   }
   * })
   * 
   */
  delete<T extends ReturnDeleteArgs>(args: Prisma.SelectSubset<T, ReturnDeleteArgs<ExtArgs>>): Prisma.Prisma__ReturnClient<runtime.Types.Result.GetResult<Prisma.$ReturnPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Return.
   * @param {ReturnUpdateArgs} args - Arguments to update one Return.
   * @example
   * // Update one Return
   * const return = await prisma.return.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ReturnUpdateArgs>(args: Prisma.SelectSubset<T, ReturnUpdateArgs<ExtArgs>>): Prisma.Prisma__ReturnClient<runtime.Types.Result.GetResult<Prisma.$ReturnPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Returns.
   * @param {ReturnDeleteManyArgs} args - Arguments to filter Returns to delete.
   * @example
   * // Delete a few Returns
   * const { count } = await prisma.return.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ReturnDeleteManyArgs>(args?: Prisma.SelectSubset<T, ReturnDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Returns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReturnUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Returns
   * const return = await prisma.return.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ReturnUpdateManyArgs>(args: Prisma.SelectSubset<T, ReturnUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Returns and returns the data updated in the database.
   * @param {ReturnUpdateManyAndReturnArgs} args - Arguments to update many Returns.
   * @example
   * // Update many Returns
   * const return = await prisma.return.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Returns and only return the `id`
   * const returnWithIdOnly = await prisma.return.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ReturnUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ReturnUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReturnPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Return.
   * @param {ReturnUpsertArgs} args - Arguments to update or create a Return.
   * @example
   * // Update or create a Return
   * const return = await prisma.return.upsert({
   *   create: {
   *     // ... data to create a Return
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Return we want to update
   *   }
   * })
   */
  upsert<T extends ReturnUpsertArgs>(args: Prisma.SelectSubset<T, ReturnUpsertArgs<ExtArgs>>): Prisma.Prisma__ReturnClient<runtime.Types.Result.GetResult<Prisma.$ReturnPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Returns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReturnCountArgs} args - Arguments to filter Returns to count.
   * @example
   * // Count the number of Returns
   * const count = await prisma.return.count({
   *   where: {
   *     // ... the filter for the Returns we want to count
   *   }
   * })
  **/
  count<T extends ReturnCountArgs>(
    args?: Prisma.Subset<T, ReturnCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ReturnCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Return.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReturnAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ReturnAggregateArgs>(args: Prisma.Subset<T, ReturnAggregateArgs>): Prisma.PrismaPromise<GetReturnAggregateType<T>>

  /**
   * Group by Return.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReturnGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ReturnGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReturnGroupByArgs['orderBy'] }
      : { orderBy?: ReturnGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ReturnGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReturnGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Return model
 */
readonly fields: ReturnFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Return.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReturnClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  sale<T extends Prisma.SaleDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SaleDefaultArgs<ExtArgs>>): Prisma.Prisma__SaleClient<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Return model
 */
export interface ReturnFieldRefs {
  readonly id: Prisma.FieldRef<"Return", 'String'>
  readonly saleId: Prisma.FieldRef<"Return", 'String'>
  readonly reason: Prisma.FieldRef<"Return", 'String'>
  readonly status: Prisma.FieldRef<"Return", 'SaleStatus'>
  readonly createdAt: Prisma.FieldRef<"Return", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Return findUnique
 */
export type ReturnFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Return
   */
  select?: Prisma.ReturnSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Return
   */
  omit?: Prisma.ReturnOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReturnInclude<ExtArgs> | null
  /**
   * Filter, which Return to fetch.
   */
  where: Prisma.ReturnWhereUniqueInput
}

/**
 * Return findUniqueOrThrow
 */
export type ReturnFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Return
   */
  select?: Prisma.ReturnSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Return
   */
  omit?: Prisma.ReturnOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReturnInclude<ExtArgs> | null
  /**
   * Filter, which Return to fetch.
   */
  where: Prisma.ReturnWhereUniqueInput
}

/**
 * Return findFirst
 */
export type ReturnFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Return
   */
  select?: Prisma.ReturnSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Return
   */
  omit?: Prisma.ReturnOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReturnInclude<ExtArgs> | null
  /**
   * Filter, which Return to fetch.
   */
  where?: Prisma.ReturnWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Returns to fetch.
   */
  orderBy?: Prisma.ReturnOrderByWithRelationInput | Prisma.ReturnOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Returns.
   */
  cursor?: Prisma.ReturnWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Returns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Returns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Returns.
   */
  distinct?: Prisma.ReturnScalarFieldEnum | Prisma.ReturnScalarFieldEnum[]
}

/**
 * Return findFirstOrThrow
 */
export type ReturnFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Return
   */
  select?: Prisma.ReturnSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Return
   */
  omit?: Prisma.ReturnOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReturnInclude<ExtArgs> | null
  /**
   * Filter, which Return to fetch.
   */
  where?: Prisma.ReturnWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Returns to fetch.
   */
  orderBy?: Prisma.ReturnOrderByWithRelationInput | Prisma.ReturnOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Returns.
   */
  cursor?: Prisma.ReturnWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Returns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Returns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Returns.
   */
  distinct?: Prisma.ReturnScalarFieldEnum | Prisma.ReturnScalarFieldEnum[]
}

/**
 * Return findMany
 */
export type ReturnFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Return
   */
  select?: Prisma.ReturnSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Return
   */
  omit?: Prisma.ReturnOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReturnInclude<ExtArgs> | null
  /**
   * Filter, which Returns to fetch.
   */
  where?: Prisma.ReturnWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Returns to fetch.
   */
  orderBy?: Prisma.ReturnOrderByWithRelationInput | Prisma.ReturnOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Returns.
   */
  cursor?: Prisma.ReturnWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Returns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Returns.
   */
  skip?: number
  distinct?: Prisma.ReturnScalarFieldEnum | Prisma.ReturnScalarFieldEnum[]
}

/**
 * Return create
 */
export type ReturnCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Return
   */
  select?: Prisma.ReturnSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Return
   */
  omit?: Prisma.ReturnOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReturnInclude<ExtArgs> | null
  /**
   * The data needed to create a Return.
   */
  data: Prisma.XOR<Prisma.ReturnCreateInput, Prisma.ReturnUncheckedCreateInput>
}

/**
 * Return createMany
 */
export type ReturnCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Returns.
   */
  data: Prisma.ReturnCreateManyInput | Prisma.ReturnCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Return createManyAndReturn
 */
export type ReturnCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Return
   */
  select?: Prisma.ReturnSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Return
   */
  omit?: Prisma.ReturnOmit<ExtArgs> | null
  /**
   * The data used to create many Returns.
   */
  data: Prisma.ReturnCreateManyInput | Prisma.ReturnCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReturnIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Return update
 */
export type ReturnUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Return
   */
  select?: Prisma.ReturnSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Return
   */
  omit?: Prisma.ReturnOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReturnInclude<ExtArgs> | null
  /**
   * The data needed to update a Return.
   */
  data: Prisma.XOR<Prisma.ReturnUpdateInput, Prisma.ReturnUncheckedUpdateInput>
  /**
   * Choose, which Return to update.
   */
  where: Prisma.ReturnWhereUniqueInput
}

/**
 * Return updateMany
 */
export type ReturnUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Returns.
   */
  data: Prisma.XOR<Prisma.ReturnUpdateManyMutationInput, Prisma.ReturnUncheckedUpdateManyInput>
  /**
   * Filter which Returns to update
   */
  where?: Prisma.ReturnWhereInput
  /**
   * Limit how many Returns to update.
   */
  limit?: number
}

/**
 * Return updateManyAndReturn
 */
export type ReturnUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Return
   */
  select?: Prisma.ReturnSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Return
   */
  omit?: Prisma.ReturnOmit<ExtArgs> | null
  /**
   * The data used to update Returns.
   */
  data: Prisma.XOR<Prisma.ReturnUpdateManyMutationInput, Prisma.ReturnUncheckedUpdateManyInput>
  /**
   * Filter which Returns to update
   */
  where?: Prisma.ReturnWhereInput
  /**
   * Limit how many Returns to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReturnIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Return upsert
 */
export type ReturnUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Return
   */
  select?: Prisma.ReturnSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Return
   */
  omit?: Prisma.ReturnOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReturnInclude<ExtArgs> | null
  /**
   * The filter to search for the Return to update in case it exists.
   */
  where: Prisma.ReturnWhereUniqueInput
  /**
   * In case the Return found by the `where` argument doesn't exist, create a new Return with this data.
   */
  create: Prisma.XOR<Prisma.ReturnCreateInput, Prisma.ReturnUncheckedCreateInput>
  /**
   * In case the Return was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ReturnUpdateInput, Prisma.ReturnUncheckedUpdateInput>
}

/**
 * Return delete
 */
export type ReturnDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Return
   */
  select?: Prisma.ReturnSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Return
   */
  omit?: Prisma.ReturnOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReturnInclude<ExtArgs> | null
  /**
   * Filter which Return to delete.
   */
  where: Prisma.ReturnWhereUniqueInput
}

/**
 * Return deleteMany
 */
export type ReturnDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Returns to delete
   */
  where?: Prisma.ReturnWhereInput
  /**
   * Limit how many Returns to delete.
   */
  limit?: number
}

/**
 * Return without action
 */
export type ReturnDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Return
   */
  select?: Prisma.ReturnSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Return
   */
  omit?: Prisma.ReturnOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReturnInclude<ExtArgs> | null
}
