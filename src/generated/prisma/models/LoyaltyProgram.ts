
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `LoyaltyProgram` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model LoyaltyProgram
 * 
 */
export type LoyaltyProgramModel = runtime.Types.Result.DefaultSelection<Prisma.$LoyaltyProgramPayload>

export type AggregateLoyaltyProgram = {
  _count: LoyaltyProgramCountAggregateOutputType | null
  _avg: LoyaltyProgramAvgAggregateOutputType | null
  _sum: LoyaltyProgramSumAggregateOutputType | null
  _min: LoyaltyProgramMinAggregateOutputType | null
  _max: LoyaltyProgramMaxAggregateOutputType | null
}

export type LoyaltyProgramAvgAggregateOutputType = {
  pointsPerPurchase: number | null
}

export type LoyaltyProgramSumAggregateOutputType = {
  pointsPerPurchase: number | null
}

export type LoyaltyProgramMinAggregateOutputType = {
  id: string | null
  businessId: string | null
  name: string | null
  pointsPerPurchase: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type LoyaltyProgramMaxAggregateOutputType = {
  id: string | null
  businessId: string | null
  name: string | null
  pointsPerPurchase: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type LoyaltyProgramCountAggregateOutputType = {
  id: number
  businessId: number
  name: number
  pointsPerPurchase: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type LoyaltyProgramAvgAggregateInputType = {
  pointsPerPurchase?: true
}

export type LoyaltyProgramSumAggregateInputType = {
  pointsPerPurchase?: true
}

export type LoyaltyProgramMinAggregateInputType = {
  id?: true
  businessId?: true
  name?: true
  pointsPerPurchase?: true
  createdAt?: true
  updatedAt?: true
}

export type LoyaltyProgramMaxAggregateInputType = {
  id?: true
  businessId?: true
  name?: true
  pointsPerPurchase?: true
  createdAt?: true
  updatedAt?: true
}

export type LoyaltyProgramCountAggregateInputType = {
  id?: true
  businessId?: true
  name?: true
  pointsPerPurchase?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type LoyaltyProgramAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LoyaltyProgram to aggregate.
   */
  where?: Prisma.LoyaltyProgramWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LoyaltyPrograms to fetch.
   */
  orderBy?: Prisma.LoyaltyProgramOrderByWithRelationInput | Prisma.LoyaltyProgramOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LoyaltyProgramWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LoyaltyPrograms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LoyaltyPrograms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned LoyaltyPrograms
  **/
  _count?: true | LoyaltyProgramCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LoyaltyProgramAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LoyaltyProgramSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LoyaltyProgramMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LoyaltyProgramMaxAggregateInputType
}

export type GetLoyaltyProgramAggregateType<T extends LoyaltyProgramAggregateArgs> = {
      [P in keyof T & keyof AggregateLoyaltyProgram]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLoyaltyProgram[P]>
    : Prisma.GetScalarType<T[P], AggregateLoyaltyProgram[P]>
}




export type LoyaltyProgramGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LoyaltyProgramWhereInput
  orderBy?: Prisma.LoyaltyProgramOrderByWithAggregationInput | Prisma.LoyaltyProgramOrderByWithAggregationInput[]
  by: Prisma.LoyaltyProgramScalarFieldEnum[] | Prisma.LoyaltyProgramScalarFieldEnum
  having?: Prisma.LoyaltyProgramScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LoyaltyProgramCountAggregateInputType | true
  _avg?: LoyaltyProgramAvgAggregateInputType
  _sum?: LoyaltyProgramSumAggregateInputType
  _min?: LoyaltyProgramMinAggregateInputType
  _max?: LoyaltyProgramMaxAggregateInputType
}

export type LoyaltyProgramGroupByOutputType = {
  id: string
  businessId: string
  name: string
  pointsPerPurchase: number
  createdAt: Date
  updatedAt: Date
  _count: LoyaltyProgramCountAggregateOutputType | null
  _avg: LoyaltyProgramAvgAggregateOutputType | null
  _sum: LoyaltyProgramSumAggregateOutputType | null
  _min: LoyaltyProgramMinAggregateOutputType | null
  _max: LoyaltyProgramMaxAggregateOutputType | null
}

type GetLoyaltyProgramGroupByPayload<T extends LoyaltyProgramGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LoyaltyProgramGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LoyaltyProgramGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LoyaltyProgramGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LoyaltyProgramGroupByOutputType[P]>
      }
    >
  > 



export type LoyaltyProgramWhereInput = {
  AND?: Prisma.LoyaltyProgramWhereInput | Prisma.LoyaltyProgramWhereInput[]
  OR?: Prisma.LoyaltyProgramWhereInput[]
  NOT?: Prisma.LoyaltyProgramWhereInput | Prisma.LoyaltyProgramWhereInput[]
  id?: Prisma.StringFilter<"LoyaltyProgram"> | string
  businessId?: Prisma.StringFilter<"LoyaltyProgram"> | string
  name?: Prisma.StringFilter<"LoyaltyProgram"> | string
  pointsPerPurchase?: Prisma.FloatFilter<"LoyaltyProgram"> | number
  createdAt?: Prisma.DateTimeFilter<"LoyaltyProgram"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"LoyaltyProgram"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
  pointsTransactions?: Prisma.PointsTransactionListRelationFilter
}

export type LoyaltyProgramOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  pointsPerPurchase?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  business?: Prisma.BusinessOrderByWithRelationInput
  pointsTransactions?: Prisma.PointsTransactionOrderByRelationAggregateInput
}

export type LoyaltyProgramWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.LoyaltyProgramWhereInput | Prisma.LoyaltyProgramWhereInput[]
  OR?: Prisma.LoyaltyProgramWhereInput[]
  NOT?: Prisma.LoyaltyProgramWhereInput | Prisma.LoyaltyProgramWhereInput[]
  businessId?: Prisma.StringFilter<"LoyaltyProgram"> | string
  name?: Prisma.StringFilter<"LoyaltyProgram"> | string
  pointsPerPurchase?: Prisma.FloatFilter<"LoyaltyProgram"> | number
  createdAt?: Prisma.DateTimeFilter<"LoyaltyProgram"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"LoyaltyProgram"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
  pointsTransactions?: Prisma.PointsTransactionListRelationFilter
}, "id">

export type LoyaltyProgramOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  pointsPerPurchase?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.LoyaltyProgramCountOrderByAggregateInput
  _avg?: Prisma.LoyaltyProgramAvgOrderByAggregateInput
  _max?: Prisma.LoyaltyProgramMaxOrderByAggregateInput
  _min?: Prisma.LoyaltyProgramMinOrderByAggregateInput
  _sum?: Prisma.LoyaltyProgramSumOrderByAggregateInput
}

export type LoyaltyProgramScalarWhereWithAggregatesInput = {
  AND?: Prisma.LoyaltyProgramScalarWhereWithAggregatesInput | Prisma.LoyaltyProgramScalarWhereWithAggregatesInput[]
  OR?: Prisma.LoyaltyProgramScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LoyaltyProgramScalarWhereWithAggregatesInput | Prisma.LoyaltyProgramScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"LoyaltyProgram"> | string
  businessId?: Prisma.StringWithAggregatesFilter<"LoyaltyProgram"> | string
  name?: Prisma.StringWithAggregatesFilter<"LoyaltyProgram"> | string
  pointsPerPurchase?: Prisma.FloatWithAggregatesFilter<"LoyaltyProgram"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"LoyaltyProgram"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"LoyaltyProgram"> | Date | string
}

export type LoyaltyProgramCreateInput = {
  id?: string
  name: string
  pointsPerPurchase: number
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutLoyaltyProgramsInput
  pointsTransactions?: Prisma.PointsTransactionCreateNestedManyWithoutLoyaltyProgramInput
}

export type LoyaltyProgramUncheckedCreateInput = {
  id?: string
  businessId: string
  name: string
  pointsPerPurchase: number
  createdAt?: Date | string
  updatedAt?: Date | string
  pointsTransactions?: Prisma.PointsTransactionUncheckedCreateNestedManyWithoutLoyaltyProgramInput
}

export type LoyaltyProgramUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pointsPerPurchase?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutLoyaltyProgramsNestedInput
  pointsTransactions?: Prisma.PointsTransactionUpdateManyWithoutLoyaltyProgramNestedInput
}

export type LoyaltyProgramUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pointsPerPurchase?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pointsTransactions?: Prisma.PointsTransactionUncheckedUpdateManyWithoutLoyaltyProgramNestedInput
}

export type LoyaltyProgramCreateManyInput = {
  id?: string
  businessId: string
  name: string
  pointsPerPurchase: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LoyaltyProgramUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pointsPerPurchase?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LoyaltyProgramUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pointsPerPurchase?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LoyaltyProgramListRelationFilter = {
  every?: Prisma.LoyaltyProgramWhereInput
  some?: Prisma.LoyaltyProgramWhereInput
  none?: Prisma.LoyaltyProgramWhereInput
}

export type LoyaltyProgramOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type LoyaltyProgramCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  pointsPerPurchase?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LoyaltyProgramAvgOrderByAggregateInput = {
  pointsPerPurchase?: Prisma.SortOrder
}

export type LoyaltyProgramMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  pointsPerPurchase?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LoyaltyProgramMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  pointsPerPurchase?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LoyaltyProgramSumOrderByAggregateInput = {
  pointsPerPurchase?: Prisma.SortOrder
}

export type LoyaltyProgramScalarRelationFilter = {
  is?: Prisma.LoyaltyProgramWhereInput
  isNot?: Prisma.LoyaltyProgramWhereInput
}

export type LoyaltyProgramCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.LoyaltyProgramCreateWithoutBusinessInput, Prisma.LoyaltyProgramUncheckedCreateWithoutBusinessInput> | Prisma.LoyaltyProgramCreateWithoutBusinessInput[] | Prisma.LoyaltyProgramUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.LoyaltyProgramCreateOrConnectWithoutBusinessInput | Prisma.LoyaltyProgramCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.LoyaltyProgramCreateManyBusinessInputEnvelope
  connect?: Prisma.LoyaltyProgramWhereUniqueInput | Prisma.LoyaltyProgramWhereUniqueInput[]
}

export type LoyaltyProgramUncheckedCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.LoyaltyProgramCreateWithoutBusinessInput, Prisma.LoyaltyProgramUncheckedCreateWithoutBusinessInput> | Prisma.LoyaltyProgramCreateWithoutBusinessInput[] | Prisma.LoyaltyProgramUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.LoyaltyProgramCreateOrConnectWithoutBusinessInput | Prisma.LoyaltyProgramCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.LoyaltyProgramCreateManyBusinessInputEnvelope
  connect?: Prisma.LoyaltyProgramWhereUniqueInput | Prisma.LoyaltyProgramWhereUniqueInput[]
}

export type LoyaltyProgramUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.LoyaltyProgramCreateWithoutBusinessInput, Prisma.LoyaltyProgramUncheckedCreateWithoutBusinessInput> | Prisma.LoyaltyProgramCreateWithoutBusinessInput[] | Prisma.LoyaltyProgramUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.LoyaltyProgramCreateOrConnectWithoutBusinessInput | Prisma.LoyaltyProgramCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.LoyaltyProgramUpsertWithWhereUniqueWithoutBusinessInput | Prisma.LoyaltyProgramUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.LoyaltyProgramCreateManyBusinessInputEnvelope
  set?: Prisma.LoyaltyProgramWhereUniqueInput | Prisma.LoyaltyProgramWhereUniqueInput[]
  disconnect?: Prisma.LoyaltyProgramWhereUniqueInput | Prisma.LoyaltyProgramWhereUniqueInput[]
  delete?: Prisma.LoyaltyProgramWhereUniqueInput | Prisma.LoyaltyProgramWhereUniqueInput[]
  connect?: Prisma.LoyaltyProgramWhereUniqueInput | Prisma.LoyaltyProgramWhereUniqueInput[]
  update?: Prisma.LoyaltyProgramUpdateWithWhereUniqueWithoutBusinessInput | Prisma.LoyaltyProgramUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.LoyaltyProgramUpdateManyWithWhereWithoutBusinessInput | Prisma.LoyaltyProgramUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.LoyaltyProgramScalarWhereInput | Prisma.LoyaltyProgramScalarWhereInput[]
}

export type LoyaltyProgramUncheckedUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.LoyaltyProgramCreateWithoutBusinessInput, Prisma.LoyaltyProgramUncheckedCreateWithoutBusinessInput> | Prisma.LoyaltyProgramCreateWithoutBusinessInput[] | Prisma.LoyaltyProgramUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.LoyaltyProgramCreateOrConnectWithoutBusinessInput | Prisma.LoyaltyProgramCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.LoyaltyProgramUpsertWithWhereUniqueWithoutBusinessInput | Prisma.LoyaltyProgramUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.LoyaltyProgramCreateManyBusinessInputEnvelope
  set?: Prisma.LoyaltyProgramWhereUniqueInput | Prisma.LoyaltyProgramWhereUniqueInput[]
  disconnect?: Prisma.LoyaltyProgramWhereUniqueInput | Prisma.LoyaltyProgramWhereUniqueInput[]
  delete?: Prisma.LoyaltyProgramWhereUniqueInput | Prisma.LoyaltyProgramWhereUniqueInput[]
  connect?: Prisma.LoyaltyProgramWhereUniqueInput | Prisma.LoyaltyProgramWhereUniqueInput[]
  update?: Prisma.LoyaltyProgramUpdateWithWhereUniqueWithoutBusinessInput | Prisma.LoyaltyProgramUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.LoyaltyProgramUpdateManyWithWhereWithoutBusinessInput | Prisma.LoyaltyProgramUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.LoyaltyProgramScalarWhereInput | Prisma.LoyaltyProgramScalarWhereInput[]
}

export type LoyaltyProgramCreateNestedOneWithoutPointsTransactionsInput = {
  create?: Prisma.XOR<Prisma.LoyaltyProgramCreateWithoutPointsTransactionsInput, Prisma.LoyaltyProgramUncheckedCreateWithoutPointsTransactionsInput>
  connectOrCreate?: Prisma.LoyaltyProgramCreateOrConnectWithoutPointsTransactionsInput
  connect?: Prisma.LoyaltyProgramWhereUniqueInput
}

export type LoyaltyProgramUpdateOneRequiredWithoutPointsTransactionsNestedInput = {
  create?: Prisma.XOR<Prisma.LoyaltyProgramCreateWithoutPointsTransactionsInput, Prisma.LoyaltyProgramUncheckedCreateWithoutPointsTransactionsInput>
  connectOrCreate?: Prisma.LoyaltyProgramCreateOrConnectWithoutPointsTransactionsInput
  upsert?: Prisma.LoyaltyProgramUpsertWithoutPointsTransactionsInput
  connect?: Prisma.LoyaltyProgramWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LoyaltyProgramUpdateToOneWithWhereWithoutPointsTransactionsInput, Prisma.LoyaltyProgramUpdateWithoutPointsTransactionsInput>, Prisma.LoyaltyProgramUncheckedUpdateWithoutPointsTransactionsInput>
}

export type LoyaltyProgramCreateWithoutBusinessInput = {
  id?: string
  name: string
  pointsPerPurchase: number
  createdAt?: Date | string
  updatedAt?: Date | string
  pointsTransactions?: Prisma.PointsTransactionCreateNestedManyWithoutLoyaltyProgramInput
}

export type LoyaltyProgramUncheckedCreateWithoutBusinessInput = {
  id?: string
  name: string
  pointsPerPurchase: number
  createdAt?: Date | string
  updatedAt?: Date | string
  pointsTransactions?: Prisma.PointsTransactionUncheckedCreateNestedManyWithoutLoyaltyProgramInput
}

export type LoyaltyProgramCreateOrConnectWithoutBusinessInput = {
  where: Prisma.LoyaltyProgramWhereUniqueInput
  create: Prisma.XOR<Prisma.LoyaltyProgramCreateWithoutBusinessInput, Prisma.LoyaltyProgramUncheckedCreateWithoutBusinessInput>
}

export type LoyaltyProgramCreateManyBusinessInputEnvelope = {
  data: Prisma.LoyaltyProgramCreateManyBusinessInput | Prisma.LoyaltyProgramCreateManyBusinessInput[]
  skipDuplicates?: boolean
}

export type LoyaltyProgramUpsertWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.LoyaltyProgramWhereUniqueInput
  update: Prisma.XOR<Prisma.LoyaltyProgramUpdateWithoutBusinessInput, Prisma.LoyaltyProgramUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.LoyaltyProgramCreateWithoutBusinessInput, Prisma.LoyaltyProgramUncheckedCreateWithoutBusinessInput>
}

export type LoyaltyProgramUpdateWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.LoyaltyProgramWhereUniqueInput
  data: Prisma.XOR<Prisma.LoyaltyProgramUpdateWithoutBusinessInput, Prisma.LoyaltyProgramUncheckedUpdateWithoutBusinessInput>
}

export type LoyaltyProgramUpdateManyWithWhereWithoutBusinessInput = {
  where: Prisma.LoyaltyProgramScalarWhereInput
  data: Prisma.XOR<Prisma.LoyaltyProgramUpdateManyMutationInput, Prisma.LoyaltyProgramUncheckedUpdateManyWithoutBusinessInput>
}

export type LoyaltyProgramScalarWhereInput = {
  AND?: Prisma.LoyaltyProgramScalarWhereInput | Prisma.LoyaltyProgramScalarWhereInput[]
  OR?: Prisma.LoyaltyProgramScalarWhereInput[]
  NOT?: Prisma.LoyaltyProgramScalarWhereInput | Prisma.LoyaltyProgramScalarWhereInput[]
  id?: Prisma.StringFilter<"LoyaltyProgram"> | string
  businessId?: Prisma.StringFilter<"LoyaltyProgram"> | string
  name?: Prisma.StringFilter<"LoyaltyProgram"> | string
  pointsPerPurchase?: Prisma.FloatFilter<"LoyaltyProgram"> | number
  createdAt?: Prisma.DateTimeFilter<"LoyaltyProgram"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"LoyaltyProgram"> | Date | string
}

export type LoyaltyProgramCreateWithoutPointsTransactionsInput = {
  id?: string
  name: string
  pointsPerPurchase: number
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutLoyaltyProgramsInput
}

export type LoyaltyProgramUncheckedCreateWithoutPointsTransactionsInput = {
  id?: string
  businessId: string
  name: string
  pointsPerPurchase: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LoyaltyProgramCreateOrConnectWithoutPointsTransactionsInput = {
  where: Prisma.LoyaltyProgramWhereUniqueInput
  create: Prisma.XOR<Prisma.LoyaltyProgramCreateWithoutPointsTransactionsInput, Prisma.LoyaltyProgramUncheckedCreateWithoutPointsTransactionsInput>
}

export type LoyaltyProgramUpsertWithoutPointsTransactionsInput = {
  update: Prisma.XOR<Prisma.LoyaltyProgramUpdateWithoutPointsTransactionsInput, Prisma.LoyaltyProgramUncheckedUpdateWithoutPointsTransactionsInput>
  create: Prisma.XOR<Prisma.LoyaltyProgramCreateWithoutPointsTransactionsInput, Prisma.LoyaltyProgramUncheckedCreateWithoutPointsTransactionsInput>
  where?: Prisma.LoyaltyProgramWhereInput
}

export type LoyaltyProgramUpdateToOneWithWhereWithoutPointsTransactionsInput = {
  where?: Prisma.LoyaltyProgramWhereInput
  data: Prisma.XOR<Prisma.LoyaltyProgramUpdateWithoutPointsTransactionsInput, Prisma.LoyaltyProgramUncheckedUpdateWithoutPointsTransactionsInput>
}

export type LoyaltyProgramUpdateWithoutPointsTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pointsPerPurchase?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutLoyaltyProgramsNestedInput
}

export type LoyaltyProgramUncheckedUpdateWithoutPointsTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pointsPerPurchase?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LoyaltyProgramCreateManyBusinessInput = {
  id?: string
  name: string
  pointsPerPurchase: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LoyaltyProgramUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pointsPerPurchase?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pointsTransactions?: Prisma.PointsTransactionUpdateManyWithoutLoyaltyProgramNestedInput
}

export type LoyaltyProgramUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pointsPerPurchase?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pointsTransactions?: Prisma.PointsTransactionUncheckedUpdateManyWithoutLoyaltyProgramNestedInput
}

export type LoyaltyProgramUncheckedUpdateManyWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pointsPerPurchase?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type LoyaltyProgramCountOutputType
 */

export type LoyaltyProgramCountOutputType = {
  pointsTransactions: number
}

export type LoyaltyProgramCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  pointsTransactions?: boolean | LoyaltyProgramCountOutputTypeCountPointsTransactionsArgs
}

/**
 * LoyaltyProgramCountOutputType without action
 */
export type LoyaltyProgramCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgramCountOutputType
   */
  select?: Prisma.LoyaltyProgramCountOutputTypeSelect<ExtArgs> | null
}

/**
 * LoyaltyProgramCountOutputType without action
 */
export type LoyaltyProgramCountOutputTypeCountPointsTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PointsTransactionWhereInput
}


export type LoyaltyProgramSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  name?: boolean
  pointsPerPurchase?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  pointsTransactions?: boolean | Prisma.LoyaltyProgram$pointsTransactionsArgs<ExtArgs>
  _count?: boolean | Prisma.LoyaltyProgramCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["loyaltyProgram"]>

export type LoyaltyProgramSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  name?: boolean
  pointsPerPurchase?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["loyaltyProgram"]>

export type LoyaltyProgramSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  name?: boolean
  pointsPerPurchase?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["loyaltyProgram"]>

export type LoyaltyProgramSelectScalar = {
  id?: boolean
  businessId?: boolean
  name?: boolean
  pointsPerPurchase?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type LoyaltyProgramOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "businessId" | "name" | "pointsPerPurchase" | "createdAt" | "updatedAt", ExtArgs["result"]["loyaltyProgram"]>
export type LoyaltyProgramInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  pointsTransactions?: boolean | Prisma.LoyaltyProgram$pointsTransactionsArgs<ExtArgs>
  _count?: boolean | Prisma.LoyaltyProgramCountOutputTypeDefaultArgs<ExtArgs>
}
export type LoyaltyProgramIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}
export type LoyaltyProgramIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}

export type $LoyaltyProgramPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "LoyaltyProgram"
  objects: {
    business: Prisma.$BusinessPayload<ExtArgs>
    pointsTransactions: Prisma.$PointsTransactionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    businessId: string
    name: string
    pointsPerPurchase: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["loyaltyProgram"]>
  composites: {}
}

export type LoyaltyProgramGetPayload<S extends boolean | null | undefined | LoyaltyProgramDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LoyaltyProgramPayload, S>

export type LoyaltyProgramCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LoyaltyProgramFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LoyaltyProgramCountAggregateInputType | true
  }

export interface LoyaltyProgramDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LoyaltyProgram'], meta: { name: 'LoyaltyProgram' } }
  /**
   * Find zero or one LoyaltyProgram that matches the filter.
   * @param {LoyaltyProgramFindUniqueArgs} args - Arguments to find a LoyaltyProgram
   * @example
   * // Get one LoyaltyProgram
   * const loyaltyProgram = await prisma.loyaltyProgram.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LoyaltyProgramFindUniqueArgs>(args: Prisma.SelectSubset<T, LoyaltyProgramFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LoyaltyProgramClient<runtime.Types.Result.GetResult<Prisma.$LoyaltyProgramPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one LoyaltyProgram that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LoyaltyProgramFindUniqueOrThrowArgs} args - Arguments to find a LoyaltyProgram
   * @example
   * // Get one LoyaltyProgram
   * const loyaltyProgram = await prisma.loyaltyProgram.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LoyaltyProgramFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LoyaltyProgramFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LoyaltyProgramClient<runtime.Types.Result.GetResult<Prisma.$LoyaltyProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LoyaltyProgram that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoyaltyProgramFindFirstArgs} args - Arguments to find a LoyaltyProgram
   * @example
   * // Get one LoyaltyProgram
   * const loyaltyProgram = await prisma.loyaltyProgram.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LoyaltyProgramFindFirstArgs>(args?: Prisma.SelectSubset<T, LoyaltyProgramFindFirstArgs<ExtArgs>>): Prisma.Prisma__LoyaltyProgramClient<runtime.Types.Result.GetResult<Prisma.$LoyaltyProgramPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LoyaltyProgram that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoyaltyProgramFindFirstOrThrowArgs} args - Arguments to find a LoyaltyProgram
   * @example
   * // Get one LoyaltyProgram
   * const loyaltyProgram = await prisma.loyaltyProgram.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LoyaltyProgramFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LoyaltyProgramFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LoyaltyProgramClient<runtime.Types.Result.GetResult<Prisma.$LoyaltyProgramPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more LoyaltyPrograms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoyaltyProgramFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LoyaltyPrograms
   * const loyaltyPrograms = await prisma.loyaltyProgram.findMany()
   * 
   * // Get first 10 LoyaltyPrograms
   * const loyaltyPrograms = await prisma.loyaltyProgram.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const loyaltyProgramWithIdOnly = await prisma.loyaltyProgram.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LoyaltyProgramFindManyArgs>(args?: Prisma.SelectSubset<T, LoyaltyProgramFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LoyaltyProgramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a LoyaltyProgram.
   * @param {LoyaltyProgramCreateArgs} args - Arguments to create a LoyaltyProgram.
   * @example
   * // Create one LoyaltyProgram
   * const LoyaltyProgram = await prisma.loyaltyProgram.create({
   *   data: {
   *     // ... data to create a LoyaltyProgram
   *   }
   * })
   * 
   */
  create<T extends LoyaltyProgramCreateArgs>(args: Prisma.SelectSubset<T, LoyaltyProgramCreateArgs<ExtArgs>>): Prisma.Prisma__LoyaltyProgramClient<runtime.Types.Result.GetResult<Prisma.$LoyaltyProgramPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many LoyaltyPrograms.
   * @param {LoyaltyProgramCreateManyArgs} args - Arguments to create many LoyaltyPrograms.
   * @example
   * // Create many LoyaltyPrograms
   * const loyaltyProgram = await prisma.loyaltyProgram.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LoyaltyProgramCreateManyArgs>(args?: Prisma.SelectSubset<T, LoyaltyProgramCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many LoyaltyPrograms and returns the data saved in the database.
   * @param {LoyaltyProgramCreateManyAndReturnArgs} args - Arguments to create many LoyaltyPrograms.
   * @example
   * // Create many LoyaltyPrograms
   * const loyaltyProgram = await prisma.loyaltyProgram.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many LoyaltyPrograms and only return the `id`
   * const loyaltyProgramWithIdOnly = await prisma.loyaltyProgram.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LoyaltyProgramCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LoyaltyProgramCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LoyaltyProgramPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a LoyaltyProgram.
   * @param {LoyaltyProgramDeleteArgs} args - Arguments to delete one LoyaltyProgram.
   * @example
   * // Delete one LoyaltyProgram
   * const LoyaltyProgram = await prisma.loyaltyProgram.delete({
   *   where: {
   *     // ... filter to delete one LoyaltyProgram
   *   }
   * })
   * 
   */
  delete<T extends LoyaltyProgramDeleteArgs>(args: Prisma.SelectSubset<T, LoyaltyProgramDeleteArgs<ExtArgs>>): Prisma.Prisma__LoyaltyProgramClient<runtime.Types.Result.GetResult<Prisma.$LoyaltyProgramPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one LoyaltyProgram.
   * @param {LoyaltyProgramUpdateArgs} args - Arguments to update one LoyaltyProgram.
   * @example
   * // Update one LoyaltyProgram
   * const loyaltyProgram = await prisma.loyaltyProgram.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LoyaltyProgramUpdateArgs>(args: Prisma.SelectSubset<T, LoyaltyProgramUpdateArgs<ExtArgs>>): Prisma.Prisma__LoyaltyProgramClient<runtime.Types.Result.GetResult<Prisma.$LoyaltyProgramPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more LoyaltyPrograms.
   * @param {LoyaltyProgramDeleteManyArgs} args - Arguments to filter LoyaltyPrograms to delete.
   * @example
   * // Delete a few LoyaltyPrograms
   * const { count } = await prisma.loyaltyProgram.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LoyaltyProgramDeleteManyArgs>(args?: Prisma.SelectSubset<T, LoyaltyProgramDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LoyaltyPrograms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoyaltyProgramUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LoyaltyPrograms
   * const loyaltyProgram = await prisma.loyaltyProgram.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LoyaltyProgramUpdateManyArgs>(args: Prisma.SelectSubset<T, LoyaltyProgramUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LoyaltyPrograms and returns the data updated in the database.
   * @param {LoyaltyProgramUpdateManyAndReturnArgs} args - Arguments to update many LoyaltyPrograms.
   * @example
   * // Update many LoyaltyPrograms
   * const loyaltyProgram = await prisma.loyaltyProgram.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more LoyaltyPrograms and only return the `id`
   * const loyaltyProgramWithIdOnly = await prisma.loyaltyProgram.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LoyaltyProgramUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LoyaltyProgramUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LoyaltyProgramPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one LoyaltyProgram.
   * @param {LoyaltyProgramUpsertArgs} args - Arguments to update or create a LoyaltyProgram.
   * @example
   * // Update or create a LoyaltyProgram
   * const loyaltyProgram = await prisma.loyaltyProgram.upsert({
   *   create: {
   *     // ... data to create a LoyaltyProgram
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LoyaltyProgram we want to update
   *   }
   * })
   */
  upsert<T extends LoyaltyProgramUpsertArgs>(args: Prisma.SelectSubset<T, LoyaltyProgramUpsertArgs<ExtArgs>>): Prisma.Prisma__LoyaltyProgramClient<runtime.Types.Result.GetResult<Prisma.$LoyaltyProgramPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of LoyaltyPrograms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoyaltyProgramCountArgs} args - Arguments to filter LoyaltyPrograms to count.
   * @example
   * // Count the number of LoyaltyPrograms
   * const count = await prisma.loyaltyProgram.count({
   *   where: {
   *     // ... the filter for the LoyaltyPrograms we want to count
   *   }
   * })
  **/
  count<T extends LoyaltyProgramCountArgs>(
    args?: Prisma.Subset<T, LoyaltyProgramCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LoyaltyProgramCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a LoyaltyProgram.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoyaltyProgramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LoyaltyProgramAggregateArgs>(args: Prisma.Subset<T, LoyaltyProgramAggregateArgs>): Prisma.PrismaPromise<GetLoyaltyProgramAggregateType<T>>

  /**
   * Group by LoyaltyProgram.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoyaltyProgramGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LoyaltyProgramGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LoyaltyProgramGroupByArgs['orderBy'] }
      : { orderBy?: LoyaltyProgramGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LoyaltyProgramGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoyaltyProgramGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the LoyaltyProgram model
 */
readonly fields: LoyaltyProgramFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LoyaltyProgram.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LoyaltyProgramClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  business<T extends Prisma.BusinessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BusinessDefaultArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  pointsTransactions<T extends Prisma.LoyaltyProgram$pointsTransactionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LoyaltyProgram$pointsTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PointsTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the LoyaltyProgram model
 */
export interface LoyaltyProgramFieldRefs {
  readonly id: Prisma.FieldRef<"LoyaltyProgram", 'String'>
  readonly businessId: Prisma.FieldRef<"LoyaltyProgram", 'String'>
  readonly name: Prisma.FieldRef<"LoyaltyProgram", 'String'>
  readonly pointsPerPurchase: Prisma.FieldRef<"LoyaltyProgram", 'Float'>
  readonly createdAt: Prisma.FieldRef<"LoyaltyProgram", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"LoyaltyProgram", 'DateTime'>
}
    

// Custom InputTypes
/**
 * LoyaltyProgram findUnique
 */
export type LoyaltyProgramFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgram
   */
  select?: Prisma.LoyaltyProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LoyaltyProgram
   */
  omit?: Prisma.LoyaltyProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoyaltyProgramInclude<ExtArgs> | null
  /**
   * Filter, which LoyaltyProgram to fetch.
   */
  where: Prisma.LoyaltyProgramWhereUniqueInput
}

/**
 * LoyaltyProgram findUniqueOrThrow
 */
export type LoyaltyProgramFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgram
   */
  select?: Prisma.LoyaltyProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LoyaltyProgram
   */
  omit?: Prisma.LoyaltyProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoyaltyProgramInclude<ExtArgs> | null
  /**
   * Filter, which LoyaltyProgram to fetch.
   */
  where: Prisma.LoyaltyProgramWhereUniqueInput
}

/**
 * LoyaltyProgram findFirst
 */
export type LoyaltyProgramFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgram
   */
  select?: Prisma.LoyaltyProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LoyaltyProgram
   */
  omit?: Prisma.LoyaltyProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoyaltyProgramInclude<ExtArgs> | null
  /**
   * Filter, which LoyaltyProgram to fetch.
   */
  where?: Prisma.LoyaltyProgramWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LoyaltyPrograms to fetch.
   */
  orderBy?: Prisma.LoyaltyProgramOrderByWithRelationInput | Prisma.LoyaltyProgramOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LoyaltyPrograms.
   */
  cursor?: Prisma.LoyaltyProgramWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LoyaltyPrograms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LoyaltyPrograms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LoyaltyPrograms.
   */
  distinct?: Prisma.LoyaltyProgramScalarFieldEnum | Prisma.LoyaltyProgramScalarFieldEnum[]
}

/**
 * LoyaltyProgram findFirstOrThrow
 */
export type LoyaltyProgramFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgram
   */
  select?: Prisma.LoyaltyProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LoyaltyProgram
   */
  omit?: Prisma.LoyaltyProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoyaltyProgramInclude<ExtArgs> | null
  /**
   * Filter, which LoyaltyProgram to fetch.
   */
  where?: Prisma.LoyaltyProgramWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LoyaltyPrograms to fetch.
   */
  orderBy?: Prisma.LoyaltyProgramOrderByWithRelationInput | Prisma.LoyaltyProgramOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LoyaltyPrograms.
   */
  cursor?: Prisma.LoyaltyProgramWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LoyaltyPrograms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LoyaltyPrograms.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LoyaltyPrograms.
   */
  distinct?: Prisma.LoyaltyProgramScalarFieldEnum | Prisma.LoyaltyProgramScalarFieldEnum[]
}

/**
 * LoyaltyProgram findMany
 */
export type LoyaltyProgramFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgram
   */
  select?: Prisma.LoyaltyProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LoyaltyProgram
   */
  omit?: Prisma.LoyaltyProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoyaltyProgramInclude<ExtArgs> | null
  /**
   * Filter, which LoyaltyPrograms to fetch.
   */
  where?: Prisma.LoyaltyProgramWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LoyaltyPrograms to fetch.
   */
  orderBy?: Prisma.LoyaltyProgramOrderByWithRelationInput | Prisma.LoyaltyProgramOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing LoyaltyPrograms.
   */
  cursor?: Prisma.LoyaltyProgramWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LoyaltyPrograms from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LoyaltyPrograms.
   */
  skip?: number
  distinct?: Prisma.LoyaltyProgramScalarFieldEnum | Prisma.LoyaltyProgramScalarFieldEnum[]
}

/**
 * LoyaltyProgram create
 */
export type LoyaltyProgramCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgram
   */
  select?: Prisma.LoyaltyProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LoyaltyProgram
   */
  omit?: Prisma.LoyaltyProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoyaltyProgramInclude<ExtArgs> | null
  /**
   * The data needed to create a LoyaltyProgram.
   */
  data: Prisma.XOR<Prisma.LoyaltyProgramCreateInput, Prisma.LoyaltyProgramUncheckedCreateInput>
}

/**
 * LoyaltyProgram createMany
 */
export type LoyaltyProgramCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many LoyaltyPrograms.
   */
  data: Prisma.LoyaltyProgramCreateManyInput | Prisma.LoyaltyProgramCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LoyaltyProgram createManyAndReturn
 */
export type LoyaltyProgramCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgram
   */
  select?: Prisma.LoyaltyProgramSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LoyaltyProgram
   */
  omit?: Prisma.LoyaltyProgramOmit<ExtArgs> | null
  /**
   * The data used to create many LoyaltyPrograms.
   */
  data: Prisma.LoyaltyProgramCreateManyInput | Prisma.LoyaltyProgramCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoyaltyProgramIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * LoyaltyProgram update
 */
export type LoyaltyProgramUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgram
   */
  select?: Prisma.LoyaltyProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LoyaltyProgram
   */
  omit?: Prisma.LoyaltyProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoyaltyProgramInclude<ExtArgs> | null
  /**
   * The data needed to update a LoyaltyProgram.
   */
  data: Prisma.XOR<Prisma.LoyaltyProgramUpdateInput, Prisma.LoyaltyProgramUncheckedUpdateInput>
  /**
   * Choose, which LoyaltyProgram to update.
   */
  where: Prisma.LoyaltyProgramWhereUniqueInput
}

/**
 * LoyaltyProgram updateMany
 */
export type LoyaltyProgramUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update LoyaltyPrograms.
   */
  data: Prisma.XOR<Prisma.LoyaltyProgramUpdateManyMutationInput, Prisma.LoyaltyProgramUncheckedUpdateManyInput>
  /**
   * Filter which LoyaltyPrograms to update
   */
  where?: Prisma.LoyaltyProgramWhereInput
  /**
   * Limit how many LoyaltyPrograms to update.
   */
  limit?: number
}

/**
 * LoyaltyProgram updateManyAndReturn
 */
export type LoyaltyProgramUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgram
   */
  select?: Prisma.LoyaltyProgramSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LoyaltyProgram
   */
  omit?: Prisma.LoyaltyProgramOmit<ExtArgs> | null
  /**
   * The data used to update LoyaltyPrograms.
   */
  data: Prisma.XOR<Prisma.LoyaltyProgramUpdateManyMutationInput, Prisma.LoyaltyProgramUncheckedUpdateManyInput>
  /**
   * Filter which LoyaltyPrograms to update
   */
  where?: Prisma.LoyaltyProgramWhereInput
  /**
   * Limit how many LoyaltyPrograms to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoyaltyProgramIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * LoyaltyProgram upsert
 */
export type LoyaltyProgramUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgram
   */
  select?: Prisma.LoyaltyProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LoyaltyProgram
   */
  omit?: Prisma.LoyaltyProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoyaltyProgramInclude<ExtArgs> | null
  /**
   * The filter to search for the LoyaltyProgram to update in case it exists.
   */
  where: Prisma.LoyaltyProgramWhereUniqueInput
  /**
   * In case the LoyaltyProgram found by the `where` argument doesn't exist, create a new LoyaltyProgram with this data.
   */
  create: Prisma.XOR<Prisma.LoyaltyProgramCreateInput, Prisma.LoyaltyProgramUncheckedCreateInput>
  /**
   * In case the LoyaltyProgram was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LoyaltyProgramUpdateInput, Prisma.LoyaltyProgramUncheckedUpdateInput>
}

/**
 * LoyaltyProgram delete
 */
export type LoyaltyProgramDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgram
   */
  select?: Prisma.LoyaltyProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LoyaltyProgram
   */
  omit?: Prisma.LoyaltyProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoyaltyProgramInclude<ExtArgs> | null
  /**
   * Filter which LoyaltyProgram to delete.
   */
  where: Prisma.LoyaltyProgramWhereUniqueInput
}

/**
 * LoyaltyProgram deleteMany
 */
export type LoyaltyProgramDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LoyaltyPrograms to delete
   */
  where?: Prisma.LoyaltyProgramWhereInput
  /**
   * Limit how many LoyaltyPrograms to delete.
   */
  limit?: number
}

/**
 * LoyaltyProgram.pointsTransactions
 */
export type LoyaltyProgram$pointsTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PointsTransaction
   */
  select?: Prisma.PointsTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PointsTransaction
   */
  omit?: Prisma.PointsTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PointsTransactionInclude<ExtArgs> | null
  where?: Prisma.PointsTransactionWhereInput
  orderBy?: Prisma.PointsTransactionOrderByWithRelationInput | Prisma.PointsTransactionOrderByWithRelationInput[]
  cursor?: Prisma.PointsTransactionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PointsTransactionScalarFieldEnum | Prisma.PointsTransactionScalarFieldEnum[]
}

/**
 * LoyaltyProgram without action
 */
export type LoyaltyProgramDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LoyaltyProgram
   */
  select?: Prisma.LoyaltyProgramSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LoyaltyProgram
   */
  omit?: Prisma.LoyaltyProgramOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoyaltyProgramInclude<ExtArgs> | null
}
