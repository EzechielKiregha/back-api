
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `SaleProduct` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SaleProduct
 * 
 */
export type SaleProductModel = runtime.Types.Result.DefaultSelection<Prisma.$SaleProductPayload>

export type AggregateSaleProduct = {
  _count: SaleProductCountAggregateOutputType | null
  _avg: SaleProductAvgAggregateOutputType | null
  _sum: SaleProductSumAggregateOutputType | null
  _min: SaleProductMinAggregateOutputType | null
  _max: SaleProductMaxAggregateOutputType | null
}

export type SaleProductAvgAggregateOutputType = {
  quantity: number | null
  price: number | null
}

export type SaleProductSumAggregateOutputType = {
  quantity: number | null
  price: number | null
}

export type SaleProductMinAggregateOutputType = {
  id: string | null
  saleId: string | null
  productId: string | null
  quantity: number | null
  price: number | null
  createdAt: Date | null
}

export type SaleProductMaxAggregateOutputType = {
  id: string | null
  saleId: string | null
  productId: string | null
  quantity: number | null
  price: number | null
  createdAt: Date | null
}

export type SaleProductCountAggregateOutputType = {
  id: number
  saleId: number
  productId: number
  quantity: number
  price: number
  modifiers: number
  createdAt: number
  _all: number
}


export type SaleProductAvgAggregateInputType = {
  quantity?: true
  price?: true
}

export type SaleProductSumAggregateInputType = {
  quantity?: true
  price?: true
}

export type SaleProductMinAggregateInputType = {
  id?: true
  saleId?: true
  productId?: true
  quantity?: true
  price?: true
  createdAt?: true
}

export type SaleProductMaxAggregateInputType = {
  id?: true
  saleId?: true
  productId?: true
  quantity?: true
  price?: true
  createdAt?: true
}

export type SaleProductCountAggregateInputType = {
  id?: true
  saleId?: true
  productId?: true
  quantity?: true
  price?: true
  modifiers?: true
  createdAt?: true
  _all?: true
}

export type SaleProductAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SaleProduct to aggregate.
   */
  where?: Prisma.SaleProductWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SaleProducts to fetch.
   */
  orderBy?: Prisma.SaleProductOrderByWithRelationInput | Prisma.SaleProductOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SaleProductWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SaleProducts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SaleProducts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SaleProducts
  **/
  _count?: true | SaleProductCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SaleProductAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SaleProductSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SaleProductMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SaleProductMaxAggregateInputType
}

export type GetSaleProductAggregateType<T extends SaleProductAggregateArgs> = {
      [P in keyof T & keyof AggregateSaleProduct]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSaleProduct[P]>
    : Prisma.GetScalarType<T[P], AggregateSaleProduct[P]>
}




export type SaleProductGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SaleProductWhereInput
  orderBy?: Prisma.SaleProductOrderByWithAggregationInput | Prisma.SaleProductOrderByWithAggregationInput[]
  by: Prisma.SaleProductScalarFieldEnum[] | Prisma.SaleProductScalarFieldEnum
  having?: Prisma.SaleProductScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SaleProductCountAggregateInputType | true
  _avg?: SaleProductAvgAggregateInputType
  _sum?: SaleProductSumAggregateInputType
  _min?: SaleProductMinAggregateInputType
  _max?: SaleProductMaxAggregateInputType
}

export type SaleProductGroupByOutputType = {
  id: string
  saleId: string
  productId: string
  quantity: number
  price: number
  modifiers: runtime.JsonValue | null
  createdAt: Date
  _count: SaleProductCountAggregateOutputType | null
  _avg: SaleProductAvgAggregateOutputType | null
  _sum: SaleProductSumAggregateOutputType | null
  _min: SaleProductMinAggregateOutputType | null
  _max: SaleProductMaxAggregateOutputType | null
}

type GetSaleProductGroupByPayload<T extends SaleProductGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SaleProductGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SaleProductGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SaleProductGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SaleProductGroupByOutputType[P]>
      }
    >
  > 



export type SaleProductWhereInput = {
  AND?: Prisma.SaleProductWhereInput | Prisma.SaleProductWhereInput[]
  OR?: Prisma.SaleProductWhereInput[]
  NOT?: Prisma.SaleProductWhereInput | Prisma.SaleProductWhereInput[]
  id?: Prisma.StringFilter<"SaleProduct"> | string
  saleId?: Prisma.StringFilter<"SaleProduct"> | string
  productId?: Prisma.StringFilter<"SaleProduct"> | string
  quantity?: Prisma.IntFilter<"SaleProduct"> | number
  price?: Prisma.FloatFilter<"SaleProduct"> | number
  modifiers?: Prisma.JsonNullableFilter<"SaleProduct">
  createdAt?: Prisma.DateTimeFilter<"SaleProduct"> | Date | string
  sale?: Prisma.XOR<Prisma.SaleScalarRelationFilter, Prisma.SaleWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type SaleProductOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
  modifiers?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  sale?: Prisma.SaleOrderByWithRelationInput
  product?: Prisma.ProductOrderByWithRelationInput
}

export type SaleProductWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.SaleProductWhereInput | Prisma.SaleProductWhereInput[]
  OR?: Prisma.SaleProductWhereInput[]
  NOT?: Prisma.SaleProductWhereInput | Prisma.SaleProductWhereInput[]
  saleId?: Prisma.StringFilter<"SaleProduct"> | string
  productId?: Prisma.StringFilter<"SaleProduct"> | string
  quantity?: Prisma.IntFilter<"SaleProduct"> | number
  price?: Prisma.FloatFilter<"SaleProduct"> | number
  modifiers?: Prisma.JsonNullableFilter<"SaleProduct">
  createdAt?: Prisma.DateTimeFilter<"SaleProduct"> | Date | string
  sale?: Prisma.XOR<Prisma.SaleScalarRelationFilter, Prisma.SaleWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type SaleProductOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
  modifiers?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.SaleProductCountOrderByAggregateInput
  _avg?: Prisma.SaleProductAvgOrderByAggregateInput
  _max?: Prisma.SaleProductMaxOrderByAggregateInput
  _min?: Prisma.SaleProductMinOrderByAggregateInput
  _sum?: Prisma.SaleProductSumOrderByAggregateInput
}

export type SaleProductScalarWhereWithAggregatesInput = {
  AND?: Prisma.SaleProductScalarWhereWithAggregatesInput | Prisma.SaleProductScalarWhereWithAggregatesInput[]
  OR?: Prisma.SaleProductScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SaleProductScalarWhereWithAggregatesInput | Prisma.SaleProductScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SaleProduct"> | string
  saleId?: Prisma.StringWithAggregatesFilter<"SaleProduct"> | string
  productId?: Prisma.StringWithAggregatesFilter<"SaleProduct"> | string
  quantity?: Prisma.IntWithAggregatesFilter<"SaleProduct"> | number
  price?: Prisma.FloatWithAggregatesFilter<"SaleProduct"> | number
  modifiers?: Prisma.JsonNullableWithAggregatesFilter<"SaleProduct">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SaleProduct"> | Date | string
}

export type SaleProductCreateInput = {
  id?: string
  quantity?: number
  price: number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  sale: Prisma.SaleCreateNestedOneWithoutSaleProductsInput
  product: Prisma.ProductCreateNestedOneWithoutSaleProductInput
}

export type SaleProductUncheckedCreateInput = {
  id?: string
  saleId: string
  productId: string
  quantity?: number
  price: number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type SaleProductUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sale?: Prisma.SaleUpdateOneRequiredWithoutSaleProductsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutSaleProductNestedInput
}

export type SaleProductUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SaleProductCreateManyInput = {
  id?: string
  saleId: string
  productId: string
  quantity?: number
  price: number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type SaleProductUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SaleProductUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SaleProductListRelationFilter = {
  every?: Prisma.SaleProductWhereInput
  some?: Prisma.SaleProductWhereInput
  none?: Prisma.SaleProductWhereInput
}

export type SaleProductOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SaleProductCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
  modifiers?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SaleProductAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type SaleProductMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SaleProductMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  saleId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SaleProductSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type SaleProductCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.SaleProductCreateWithoutProductInput, Prisma.SaleProductUncheckedCreateWithoutProductInput> | Prisma.SaleProductCreateWithoutProductInput[] | Prisma.SaleProductUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.SaleProductCreateOrConnectWithoutProductInput | Prisma.SaleProductCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.SaleProductCreateManyProductInputEnvelope
  connect?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
}

export type SaleProductUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.SaleProductCreateWithoutProductInput, Prisma.SaleProductUncheckedCreateWithoutProductInput> | Prisma.SaleProductCreateWithoutProductInput[] | Prisma.SaleProductUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.SaleProductCreateOrConnectWithoutProductInput | Prisma.SaleProductCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.SaleProductCreateManyProductInputEnvelope
  connect?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
}

export type SaleProductUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.SaleProductCreateWithoutProductInput, Prisma.SaleProductUncheckedCreateWithoutProductInput> | Prisma.SaleProductCreateWithoutProductInput[] | Prisma.SaleProductUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.SaleProductCreateOrConnectWithoutProductInput | Prisma.SaleProductCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.SaleProductUpsertWithWhereUniqueWithoutProductInput | Prisma.SaleProductUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.SaleProductCreateManyProductInputEnvelope
  set?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  disconnect?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  delete?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  connect?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  update?: Prisma.SaleProductUpdateWithWhereUniqueWithoutProductInput | Prisma.SaleProductUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.SaleProductUpdateManyWithWhereWithoutProductInput | Prisma.SaleProductUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.SaleProductScalarWhereInput | Prisma.SaleProductScalarWhereInput[]
}

export type SaleProductUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.SaleProductCreateWithoutProductInput, Prisma.SaleProductUncheckedCreateWithoutProductInput> | Prisma.SaleProductCreateWithoutProductInput[] | Prisma.SaleProductUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.SaleProductCreateOrConnectWithoutProductInput | Prisma.SaleProductCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.SaleProductUpsertWithWhereUniqueWithoutProductInput | Prisma.SaleProductUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.SaleProductCreateManyProductInputEnvelope
  set?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  disconnect?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  delete?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  connect?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  update?: Prisma.SaleProductUpdateWithWhereUniqueWithoutProductInput | Prisma.SaleProductUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.SaleProductUpdateManyWithWhereWithoutProductInput | Prisma.SaleProductUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.SaleProductScalarWhereInput | Prisma.SaleProductScalarWhereInput[]
}

export type SaleProductCreateNestedManyWithoutSaleInput = {
  create?: Prisma.XOR<Prisma.SaleProductCreateWithoutSaleInput, Prisma.SaleProductUncheckedCreateWithoutSaleInput> | Prisma.SaleProductCreateWithoutSaleInput[] | Prisma.SaleProductUncheckedCreateWithoutSaleInput[]
  connectOrCreate?: Prisma.SaleProductCreateOrConnectWithoutSaleInput | Prisma.SaleProductCreateOrConnectWithoutSaleInput[]
  createMany?: Prisma.SaleProductCreateManySaleInputEnvelope
  connect?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
}

export type SaleProductUncheckedCreateNestedManyWithoutSaleInput = {
  create?: Prisma.XOR<Prisma.SaleProductCreateWithoutSaleInput, Prisma.SaleProductUncheckedCreateWithoutSaleInput> | Prisma.SaleProductCreateWithoutSaleInput[] | Prisma.SaleProductUncheckedCreateWithoutSaleInput[]
  connectOrCreate?: Prisma.SaleProductCreateOrConnectWithoutSaleInput | Prisma.SaleProductCreateOrConnectWithoutSaleInput[]
  createMany?: Prisma.SaleProductCreateManySaleInputEnvelope
  connect?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
}

export type SaleProductUpdateManyWithoutSaleNestedInput = {
  create?: Prisma.XOR<Prisma.SaleProductCreateWithoutSaleInput, Prisma.SaleProductUncheckedCreateWithoutSaleInput> | Prisma.SaleProductCreateWithoutSaleInput[] | Prisma.SaleProductUncheckedCreateWithoutSaleInput[]
  connectOrCreate?: Prisma.SaleProductCreateOrConnectWithoutSaleInput | Prisma.SaleProductCreateOrConnectWithoutSaleInput[]
  upsert?: Prisma.SaleProductUpsertWithWhereUniqueWithoutSaleInput | Prisma.SaleProductUpsertWithWhereUniqueWithoutSaleInput[]
  createMany?: Prisma.SaleProductCreateManySaleInputEnvelope
  set?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  disconnect?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  delete?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  connect?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  update?: Prisma.SaleProductUpdateWithWhereUniqueWithoutSaleInput | Prisma.SaleProductUpdateWithWhereUniqueWithoutSaleInput[]
  updateMany?: Prisma.SaleProductUpdateManyWithWhereWithoutSaleInput | Prisma.SaleProductUpdateManyWithWhereWithoutSaleInput[]
  deleteMany?: Prisma.SaleProductScalarWhereInput | Prisma.SaleProductScalarWhereInput[]
}

export type SaleProductUncheckedUpdateManyWithoutSaleNestedInput = {
  create?: Prisma.XOR<Prisma.SaleProductCreateWithoutSaleInput, Prisma.SaleProductUncheckedCreateWithoutSaleInput> | Prisma.SaleProductCreateWithoutSaleInput[] | Prisma.SaleProductUncheckedCreateWithoutSaleInput[]
  connectOrCreate?: Prisma.SaleProductCreateOrConnectWithoutSaleInput | Prisma.SaleProductCreateOrConnectWithoutSaleInput[]
  upsert?: Prisma.SaleProductUpsertWithWhereUniqueWithoutSaleInput | Prisma.SaleProductUpsertWithWhereUniqueWithoutSaleInput[]
  createMany?: Prisma.SaleProductCreateManySaleInputEnvelope
  set?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  disconnect?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  delete?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  connect?: Prisma.SaleProductWhereUniqueInput | Prisma.SaleProductWhereUniqueInput[]
  update?: Prisma.SaleProductUpdateWithWhereUniqueWithoutSaleInput | Prisma.SaleProductUpdateWithWhereUniqueWithoutSaleInput[]
  updateMany?: Prisma.SaleProductUpdateManyWithWhereWithoutSaleInput | Prisma.SaleProductUpdateManyWithWhereWithoutSaleInput[]
  deleteMany?: Prisma.SaleProductScalarWhereInput | Prisma.SaleProductScalarWhereInput[]
}

export type SaleProductCreateWithoutProductInput = {
  id?: string
  quantity?: number
  price: number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  sale: Prisma.SaleCreateNestedOneWithoutSaleProductsInput
}

export type SaleProductUncheckedCreateWithoutProductInput = {
  id?: string
  saleId: string
  quantity?: number
  price: number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type SaleProductCreateOrConnectWithoutProductInput = {
  where: Prisma.SaleProductWhereUniqueInput
  create: Prisma.XOR<Prisma.SaleProductCreateWithoutProductInput, Prisma.SaleProductUncheckedCreateWithoutProductInput>
}

export type SaleProductCreateManyProductInputEnvelope = {
  data: Prisma.SaleProductCreateManyProductInput | Prisma.SaleProductCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type SaleProductUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.SaleProductWhereUniqueInput
  update: Prisma.XOR<Prisma.SaleProductUpdateWithoutProductInput, Prisma.SaleProductUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.SaleProductCreateWithoutProductInput, Prisma.SaleProductUncheckedCreateWithoutProductInput>
}

export type SaleProductUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.SaleProductWhereUniqueInput
  data: Prisma.XOR<Prisma.SaleProductUpdateWithoutProductInput, Prisma.SaleProductUncheckedUpdateWithoutProductInput>
}

export type SaleProductUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.SaleProductScalarWhereInput
  data: Prisma.XOR<Prisma.SaleProductUpdateManyMutationInput, Prisma.SaleProductUncheckedUpdateManyWithoutProductInput>
}

export type SaleProductScalarWhereInput = {
  AND?: Prisma.SaleProductScalarWhereInput | Prisma.SaleProductScalarWhereInput[]
  OR?: Prisma.SaleProductScalarWhereInput[]
  NOT?: Prisma.SaleProductScalarWhereInput | Prisma.SaleProductScalarWhereInput[]
  id?: Prisma.StringFilter<"SaleProduct"> | string
  saleId?: Prisma.StringFilter<"SaleProduct"> | string
  productId?: Prisma.StringFilter<"SaleProduct"> | string
  quantity?: Prisma.IntFilter<"SaleProduct"> | number
  price?: Prisma.FloatFilter<"SaleProduct"> | number
  modifiers?: Prisma.JsonNullableFilter<"SaleProduct">
  createdAt?: Prisma.DateTimeFilter<"SaleProduct"> | Date | string
}

export type SaleProductCreateWithoutSaleInput = {
  id?: string
  quantity?: number
  price: number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutSaleProductInput
}

export type SaleProductUncheckedCreateWithoutSaleInput = {
  id?: string
  productId: string
  quantity?: number
  price: number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type SaleProductCreateOrConnectWithoutSaleInput = {
  where: Prisma.SaleProductWhereUniqueInput
  create: Prisma.XOR<Prisma.SaleProductCreateWithoutSaleInput, Prisma.SaleProductUncheckedCreateWithoutSaleInput>
}

export type SaleProductCreateManySaleInputEnvelope = {
  data: Prisma.SaleProductCreateManySaleInput | Prisma.SaleProductCreateManySaleInput[]
  skipDuplicates?: boolean
}

export type SaleProductUpsertWithWhereUniqueWithoutSaleInput = {
  where: Prisma.SaleProductWhereUniqueInput
  update: Prisma.XOR<Prisma.SaleProductUpdateWithoutSaleInput, Prisma.SaleProductUncheckedUpdateWithoutSaleInput>
  create: Prisma.XOR<Prisma.SaleProductCreateWithoutSaleInput, Prisma.SaleProductUncheckedCreateWithoutSaleInput>
}

export type SaleProductUpdateWithWhereUniqueWithoutSaleInput = {
  where: Prisma.SaleProductWhereUniqueInput
  data: Prisma.XOR<Prisma.SaleProductUpdateWithoutSaleInput, Prisma.SaleProductUncheckedUpdateWithoutSaleInput>
}

export type SaleProductUpdateManyWithWhereWithoutSaleInput = {
  where: Prisma.SaleProductScalarWhereInput
  data: Prisma.XOR<Prisma.SaleProductUpdateManyMutationInput, Prisma.SaleProductUncheckedUpdateManyWithoutSaleInput>
}

export type SaleProductCreateManyProductInput = {
  id?: string
  saleId: string
  quantity?: number
  price: number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type SaleProductUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sale?: Prisma.SaleUpdateOneRequiredWithoutSaleProductsNestedInput
}

export type SaleProductUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SaleProductUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  saleId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SaleProductCreateManySaleInput = {
  id?: string
  productId: string
  quantity?: number
  price: number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type SaleProductUpdateWithoutSaleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutSaleProductNestedInput
}

export type SaleProductUncheckedUpdateWithoutSaleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SaleProductUncheckedUpdateManyWithoutSaleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  modifiers?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type SaleProductSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  saleId?: boolean
  productId?: boolean
  quantity?: boolean
  price?: boolean
  modifiers?: boolean
  createdAt?: boolean
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["saleProduct"]>

export type SaleProductSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  saleId?: boolean
  productId?: boolean
  quantity?: boolean
  price?: boolean
  modifiers?: boolean
  createdAt?: boolean
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["saleProduct"]>

export type SaleProductSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  saleId?: boolean
  productId?: boolean
  quantity?: boolean
  price?: boolean
  modifiers?: boolean
  createdAt?: boolean
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["saleProduct"]>

export type SaleProductSelectScalar = {
  id?: boolean
  saleId?: boolean
  productId?: boolean
  quantity?: boolean
  price?: boolean
  modifiers?: boolean
  createdAt?: boolean
}

export type SaleProductOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "saleId" | "productId" | "quantity" | "price" | "modifiers" | "createdAt", ExtArgs["result"]["saleProduct"]>
export type SaleProductInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type SaleProductIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type SaleProductIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sale?: boolean | Prisma.SaleDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $SaleProductPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SaleProduct"
  objects: {
    sale: Prisma.$SalePayload<ExtArgs>
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    saleId: string
    productId: string
    quantity: number
    price: number
    modifiers: runtime.JsonValue | null
    createdAt: Date
  }, ExtArgs["result"]["saleProduct"]>
  composites: {}
}

export type SaleProductGetPayload<S extends boolean | null | undefined | SaleProductDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SaleProductPayload, S>

export type SaleProductCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SaleProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SaleProductCountAggregateInputType | true
  }

export interface SaleProductDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SaleProduct'], meta: { name: 'SaleProduct' } }
  /**
   * Find zero or one SaleProduct that matches the filter.
   * @param {SaleProductFindUniqueArgs} args - Arguments to find a SaleProduct
   * @example
   * // Get one SaleProduct
   * const saleProduct = await prisma.saleProduct.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SaleProductFindUniqueArgs>(args: Prisma.SelectSubset<T, SaleProductFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SaleProductClient<runtime.Types.Result.GetResult<Prisma.$SaleProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SaleProduct that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SaleProductFindUniqueOrThrowArgs} args - Arguments to find a SaleProduct
   * @example
   * // Get one SaleProduct
   * const saleProduct = await prisma.saleProduct.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SaleProductFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SaleProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SaleProductClient<runtime.Types.Result.GetResult<Prisma.$SaleProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SaleProduct that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleProductFindFirstArgs} args - Arguments to find a SaleProduct
   * @example
   * // Get one SaleProduct
   * const saleProduct = await prisma.saleProduct.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SaleProductFindFirstArgs>(args?: Prisma.SelectSubset<T, SaleProductFindFirstArgs<ExtArgs>>): Prisma.Prisma__SaleProductClient<runtime.Types.Result.GetResult<Prisma.$SaleProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SaleProduct that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleProductFindFirstOrThrowArgs} args - Arguments to find a SaleProduct
   * @example
   * // Get one SaleProduct
   * const saleProduct = await prisma.saleProduct.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SaleProductFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SaleProductFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SaleProductClient<runtime.Types.Result.GetResult<Prisma.$SaleProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SaleProducts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleProductFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SaleProducts
   * const saleProducts = await prisma.saleProduct.findMany()
   * 
   * // Get first 10 SaleProducts
   * const saleProducts = await prisma.saleProduct.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const saleProductWithIdOnly = await prisma.saleProduct.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SaleProductFindManyArgs>(args?: Prisma.SelectSubset<T, SaleProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SaleProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SaleProduct.
   * @param {SaleProductCreateArgs} args - Arguments to create a SaleProduct.
   * @example
   * // Create one SaleProduct
   * const SaleProduct = await prisma.saleProduct.create({
   *   data: {
   *     // ... data to create a SaleProduct
   *   }
   * })
   * 
   */
  create<T extends SaleProductCreateArgs>(args: Prisma.SelectSubset<T, SaleProductCreateArgs<ExtArgs>>): Prisma.Prisma__SaleProductClient<runtime.Types.Result.GetResult<Prisma.$SaleProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SaleProducts.
   * @param {SaleProductCreateManyArgs} args - Arguments to create many SaleProducts.
   * @example
   * // Create many SaleProducts
   * const saleProduct = await prisma.saleProduct.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SaleProductCreateManyArgs>(args?: Prisma.SelectSubset<T, SaleProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SaleProducts and returns the data saved in the database.
   * @param {SaleProductCreateManyAndReturnArgs} args - Arguments to create many SaleProducts.
   * @example
   * // Create many SaleProducts
   * const saleProduct = await prisma.saleProduct.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SaleProducts and only return the `id`
   * const saleProductWithIdOnly = await prisma.saleProduct.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SaleProductCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SaleProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SaleProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SaleProduct.
   * @param {SaleProductDeleteArgs} args - Arguments to delete one SaleProduct.
   * @example
   * // Delete one SaleProduct
   * const SaleProduct = await prisma.saleProduct.delete({
   *   where: {
   *     // ... filter to delete one SaleProduct
   *   }
   * })
   * 
   */
  delete<T extends SaleProductDeleteArgs>(args: Prisma.SelectSubset<T, SaleProductDeleteArgs<ExtArgs>>): Prisma.Prisma__SaleProductClient<runtime.Types.Result.GetResult<Prisma.$SaleProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SaleProduct.
   * @param {SaleProductUpdateArgs} args - Arguments to update one SaleProduct.
   * @example
   * // Update one SaleProduct
   * const saleProduct = await prisma.saleProduct.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SaleProductUpdateArgs>(args: Prisma.SelectSubset<T, SaleProductUpdateArgs<ExtArgs>>): Prisma.Prisma__SaleProductClient<runtime.Types.Result.GetResult<Prisma.$SaleProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SaleProducts.
   * @param {SaleProductDeleteManyArgs} args - Arguments to filter SaleProducts to delete.
   * @example
   * // Delete a few SaleProducts
   * const { count } = await prisma.saleProduct.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SaleProductDeleteManyArgs>(args?: Prisma.SelectSubset<T, SaleProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SaleProducts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleProductUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SaleProducts
   * const saleProduct = await prisma.saleProduct.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SaleProductUpdateManyArgs>(args: Prisma.SelectSubset<T, SaleProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SaleProducts and returns the data updated in the database.
   * @param {SaleProductUpdateManyAndReturnArgs} args - Arguments to update many SaleProducts.
   * @example
   * // Update many SaleProducts
   * const saleProduct = await prisma.saleProduct.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SaleProducts and only return the `id`
   * const saleProductWithIdOnly = await prisma.saleProduct.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SaleProductUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SaleProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SaleProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SaleProduct.
   * @param {SaleProductUpsertArgs} args - Arguments to update or create a SaleProduct.
   * @example
   * // Update or create a SaleProduct
   * const saleProduct = await prisma.saleProduct.upsert({
   *   create: {
   *     // ... data to create a SaleProduct
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SaleProduct we want to update
   *   }
   * })
   */
  upsert<T extends SaleProductUpsertArgs>(args: Prisma.SelectSubset<T, SaleProductUpsertArgs<ExtArgs>>): Prisma.Prisma__SaleProductClient<runtime.Types.Result.GetResult<Prisma.$SaleProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SaleProducts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleProductCountArgs} args - Arguments to filter SaleProducts to count.
   * @example
   * // Count the number of SaleProducts
   * const count = await prisma.saleProduct.count({
   *   where: {
   *     // ... the filter for the SaleProducts we want to count
   *   }
   * })
  **/
  count<T extends SaleProductCountArgs>(
    args?: Prisma.Subset<T, SaleProductCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SaleProductCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SaleProduct.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SaleProductAggregateArgs>(args: Prisma.Subset<T, SaleProductAggregateArgs>): Prisma.PrismaPromise<GetSaleProductAggregateType<T>>

  /**
   * Group by SaleProduct.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaleProductGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SaleProductGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SaleProductGroupByArgs['orderBy'] }
      : { orderBy?: SaleProductGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SaleProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SaleProduct model
 */
readonly fields: SaleProductFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SaleProduct.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SaleProductClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  sale<T extends Prisma.SaleDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SaleDefaultArgs<ExtArgs>>): Prisma.Prisma__SaleClient<runtime.Types.Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SaleProduct model
 */
export interface SaleProductFieldRefs {
  readonly id: Prisma.FieldRef<"SaleProduct", 'String'>
  readonly saleId: Prisma.FieldRef<"SaleProduct", 'String'>
  readonly productId: Prisma.FieldRef<"SaleProduct", 'String'>
  readonly quantity: Prisma.FieldRef<"SaleProduct", 'Int'>
  readonly price: Prisma.FieldRef<"SaleProduct", 'Float'>
  readonly modifiers: Prisma.FieldRef<"SaleProduct", 'Json'>
  readonly createdAt: Prisma.FieldRef<"SaleProduct", 'DateTime'>
}
    

// Custom InputTypes
/**
 * SaleProduct findUnique
 */
export type SaleProductFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleProduct
   */
  select?: Prisma.SaleProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleProduct
   */
  omit?: Prisma.SaleProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleProductInclude<ExtArgs> | null
  /**
   * Filter, which SaleProduct to fetch.
   */
  where: Prisma.SaleProductWhereUniqueInput
}

/**
 * SaleProduct findUniqueOrThrow
 */
export type SaleProductFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleProduct
   */
  select?: Prisma.SaleProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleProduct
   */
  omit?: Prisma.SaleProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleProductInclude<ExtArgs> | null
  /**
   * Filter, which SaleProduct to fetch.
   */
  where: Prisma.SaleProductWhereUniqueInput
}

/**
 * SaleProduct findFirst
 */
export type SaleProductFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleProduct
   */
  select?: Prisma.SaleProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleProduct
   */
  omit?: Prisma.SaleProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleProductInclude<ExtArgs> | null
  /**
   * Filter, which SaleProduct to fetch.
   */
  where?: Prisma.SaleProductWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SaleProducts to fetch.
   */
  orderBy?: Prisma.SaleProductOrderByWithRelationInput | Prisma.SaleProductOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SaleProducts.
   */
  cursor?: Prisma.SaleProductWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SaleProducts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SaleProducts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SaleProducts.
   */
  distinct?: Prisma.SaleProductScalarFieldEnum | Prisma.SaleProductScalarFieldEnum[]
}

/**
 * SaleProduct findFirstOrThrow
 */
export type SaleProductFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleProduct
   */
  select?: Prisma.SaleProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleProduct
   */
  omit?: Prisma.SaleProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleProductInclude<ExtArgs> | null
  /**
   * Filter, which SaleProduct to fetch.
   */
  where?: Prisma.SaleProductWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SaleProducts to fetch.
   */
  orderBy?: Prisma.SaleProductOrderByWithRelationInput | Prisma.SaleProductOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SaleProducts.
   */
  cursor?: Prisma.SaleProductWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SaleProducts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SaleProducts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SaleProducts.
   */
  distinct?: Prisma.SaleProductScalarFieldEnum | Prisma.SaleProductScalarFieldEnum[]
}

/**
 * SaleProduct findMany
 */
export type SaleProductFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleProduct
   */
  select?: Prisma.SaleProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleProduct
   */
  omit?: Prisma.SaleProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleProductInclude<ExtArgs> | null
  /**
   * Filter, which SaleProducts to fetch.
   */
  where?: Prisma.SaleProductWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SaleProducts to fetch.
   */
  orderBy?: Prisma.SaleProductOrderByWithRelationInput | Prisma.SaleProductOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SaleProducts.
   */
  cursor?: Prisma.SaleProductWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SaleProducts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SaleProducts.
   */
  skip?: number
  distinct?: Prisma.SaleProductScalarFieldEnum | Prisma.SaleProductScalarFieldEnum[]
}

/**
 * SaleProduct create
 */
export type SaleProductCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleProduct
   */
  select?: Prisma.SaleProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleProduct
   */
  omit?: Prisma.SaleProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleProductInclude<ExtArgs> | null
  /**
   * The data needed to create a SaleProduct.
   */
  data: Prisma.XOR<Prisma.SaleProductCreateInput, Prisma.SaleProductUncheckedCreateInput>
}

/**
 * SaleProduct createMany
 */
export type SaleProductCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SaleProducts.
   */
  data: Prisma.SaleProductCreateManyInput | Prisma.SaleProductCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SaleProduct createManyAndReturn
 */
export type SaleProductCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleProduct
   */
  select?: Prisma.SaleProductSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SaleProduct
   */
  omit?: Prisma.SaleProductOmit<ExtArgs> | null
  /**
   * The data used to create many SaleProducts.
   */
  data: Prisma.SaleProductCreateManyInput | Prisma.SaleProductCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleProductIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SaleProduct update
 */
export type SaleProductUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleProduct
   */
  select?: Prisma.SaleProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleProduct
   */
  omit?: Prisma.SaleProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleProductInclude<ExtArgs> | null
  /**
   * The data needed to update a SaleProduct.
   */
  data: Prisma.XOR<Prisma.SaleProductUpdateInput, Prisma.SaleProductUncheckedUpdateInput>
  /**
   * Choose, which SaleProduct to update.
   */
  where: Prisma.SaleProductWhereUniqueInput
}

/**
 * SaleProduct updateMany
 */
export type SaleProductUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SaleProducts.
   */
  data: Prisma.XOR<Prisma.SaleProductUpdateManyMutationInput, Prisma.SaleProductUncheckedUpdateManyInput>
  /**
   * Filter which SaleProducts to update
   */
  where?: Prisma.SaleProductWhereInput
  /**
   * Limit how many SaleProducts to update.
   */
  limit?: number
}

/**
 * SaleProduct updateManyAndReturn
 */
export type SaleProductUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleProduct
   */
  select?: Prisma.SaleProductSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SaleProduct
   */
  omit?: Prisma.SaleProductOmit<ExtArgs> | null
  /**
   * The data used to update SaleProducts.
   */
  data: Prisma.XOR<Prisma.SaleProductUpdateManyMutationInput, Prisma.SaleProductUncheckedUpdateManyInput>
  /**
   * Filter which SaleProducts to update
   */
  where?: Prisma.SaleProductWhereInput
  /**
   * Limit how many SaleProducts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleProductIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SaleProduct upsert
 */
export type SaleProductUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleProduct
   */
  select?: Prisma.SaleProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleProduct
   */
  omit?: Prisma.SaleProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleProductInclude<ExtArgs> | null
  /**
   * The filter to search for the SaleProduct to update in case it exists.
   */
  where: Prisma.SaleProductWhereUniqueInput
  /**
   * In case the SaleProduct found by the `where` argument doesn't exist, create a new SaleProduct with this data.
   */
  create: Prisma.XOR<Prisma.SaleProductCreateInput, Prisma.SaleProductUncheckedCreateInput>
  /**
   * In case the SaleProduct was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SaleProductUpdateInput, Prisma.SaleProductUncheckedUpdateInput>
}

/**
 * SaleProduct delete
 */
export type SaleProductDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleProduct
   */
  select?: Prisma.SaleProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleProduct
   */
  omit?: Prisma.SaleProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleProductInclude<ExtArgs> | null
  /**
   * Filter which SaleProduct to delete.
   */
  where: Prisma.SaleProductWhereUniqueInput
}

/**
 * SaleProduct deleteMany
 */
export type SaleProductDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SaleProducts to delete
   */
  where?: Prisma.SaleProductWhereInput
  /**
   * Limit how many SaleProducts to delete.
   */
  limit?: number
}

/**
 * SaleProduct without action
 */
export type SaleProductDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SaleProduct
   */
  select?: Prisma.SaleProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SaleProduct
   */
  omit?: Prisma.SaleProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SaleProductInclude<ExtArgs> | null
}
