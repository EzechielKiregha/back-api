
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ChatParticipant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ChatParticipant
 * 
 */
export type ChatParticipantModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatParticipantPayload>

export type AggregateChatParticipant = {
  _count: ChatParticipantCountAggregateOutputType | null
  _min: ChatParticipantMinAggregateOutputType | null
  _max: ChatParticipantMaxAggregateOutputType | null
}

export type ChatParticipantMinAggregateOutputType = {
  id: string | null
  chatId: string | null
  clientId: string | null
  businessId: string | null
  workerId: string | null
  createdAt: Date | null
}

export type ChatParticipantMaxAggregateOutputType = {
  id: string | null
  chatId: string | null
  clientId: string | null
  businessId: string | null
  workerId: string | null
  createdAt: Date | null
}

export type ChatParticipantCountAggregateOutputType = {
  id: number
  chatId: number
  clientId: number
  businessId: number
  workerId: number
  createdAt: number
  _all: number
}


export type ChatParticipantMinAggregateInputType = {
  id?: true
  chatId?: true
  clientId?: true
  businessId?: true
  workerId?: true
  createdAt?: true
}

export type ChatParticipantMaxAggregateInputType = {
  id?: true
  chatId?: true
  clientId?: true
  businessId?: true
  workerId?: true
  createdAt?: true
}

export type ChatParticipantCountAggregateInputType = {
  id?: true
  chatId?: true
  clientId?: true
  businessId?: true
  workerId?: true
  createdAt?: true
  _all?: true
}

export type ChatParticipantAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatParticipant to aggregate.
   */
  where?: Prisma.ChatParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatParticipants to fetch.
   */
  orderBy?: Prisma.ChatParticipantOrderByWithRelationInput | Prisma.ChatParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChatParticipants
  **/
  _count?: true | ChatParticipantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatParticipantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatParticipantMaxAggregateInputType
}

export type GetChatParticipantAggregateType<T extends ChatParticipantAggregateArgs> = {
      [P in keyof T & keyof AggregateChatParticipant]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChatParticipant[P]>
    : Prisma.GetScalarType<T[P], AggregateChatParticipant[P]>
}




export type ChatParticipantGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatParticipantWhereInput
  orderBy?: Prisma.ChatParticipantOrderByWithAggregationInput | Prisma.ChatParticipantOrderByWithAggregationInput[]
  by: Prisma.ChatParticipantScalarFieldEnum[] | Prisma.ChatParticipantScalarFieldEnum
  having?: Prisma.ChatParticipantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatParticipantCountAggregateInputType | true
  _min?: ChatParticipantMinAggregateInputType
  _max?: ChatParticipantMaxAggregateInputType
}

export type ChatParticipantGroupByOutputType = {
  id: string
  chatId: string
  clientId: string | null
  businessId: string | null
  workerId: string | null
  createdAt: Date
  _count: ChatParticipantCountAggregateOutputType | null
  _min: ChatParticipantMinAggregateOutputType | null
  _max: ChatParticipantMaxAggregateOutputType | null
}

type GetChatParticipantGroupByPayload<T extends ChatParticipantGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatParticipantGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatParticipantGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatParticipantGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatParticipantGroupByOutputType[P]>
      }
    >
  > 



export type ChatParticipantWhereInput = {
  AND?: Prisma.ChatParticipantWhereInput | Prisma.ChatParticipantWhereInput[]
  OR?: Prisma.ChatParticipantWhereInput[]
  NOT?: Prisma.ChatParticipantWhereInput | Prisma.ChatParticipantWhereInput[]
  id?: Prisma.StringFilter<"ChatParticipant"> | string
  chatId?: Prisma.StringFilter<"ChatParticipant"> | string
  clientId?: Prisma.StringNullableFilter<"ChatParticipant"> | string | null
  businessId?: Prisma.StringNullableFilter<"ChatParticipant"> | string | null
  workerId?: Prisma.StringNullableFilter<"ChatParticipant"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatParticipant"> | Date | string
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
  client?: Prisma.XOR<Prisma.ClientNullableScalarRelationFilter, Prisma.ClientWhereInput> | null
  business?: Prisma.XOR<Prisma.BusinessNullableScalarRelationFilter, Prisma.BusinessWhereInput> | null
  worker?: Prisma.XOR<Prisma.WorkerNullableScalarRelationFilter, Prisma.WorkerWhereInput> | null
}

export type ChatParticipantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  clientId?: Prisma.SortOrderInput | Prisma.SortOrder
  businessId?: Prisma.SortOrderInput | Prisma.SortOrder
  workerId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  chat?: Prisma.ChatOrderByWithRelationInput
  client?: Prisma.ClientOrderByWithRelationInput
  business?: Prisma.BusinessOrderByWithRelationInput
  worker?: Prisma.WorkerOrderByWithRelationInput
}

export type ChatParticipantWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ChatParticipantWhereInput | Prisma.ChatParticipantWhereInput[]
  OR?: Prisma.ChatParticipantWhereInput[]
  NOT?: Prisma.ChatParticipantWhereInput | Prisma.ChatParticipantWhereInput[]
  chatId?: Prisma.StringFilter<"ChatParticipant"> | string
  clientId?: Prisma.StringNullableFilter<"ChatParticipant"> | string | null
  businessId?: Prisma.StringNullableFilter<"ChatParticipant"> | string | null
  workerId?: Prisma.StringNullableFilter<"ChatParticipant"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatParticipant"> | Date | string
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
  client?: Prisma.XOR<Prisma.ClientNullableScalarRelationFilter, Prisma.ClientWhereInput> | null
  business?: Prisma.XOR<Prisma.BusinessNullableScalarRelationFilter, Prisma.BusinessWhereInput> | null
  worker?: Prisma.XOR<Prisma.WorkerNullableScalarRelationFilter, Prisma.WorkerWhereInput> | null
}, "id">

export type ChatParticipantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  clientId?: Prisma.SortOrderInput | Prisma.SortOrder
  businessId?: Prisma.SortOrderInput | Prisma.SortOrder
  workerId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ChatParticipantCountOrderByAggregateInput
  _max?: Prisma.ChatParticipantMaxOrderByAggregateInput
  _min?: Prisma.ChatParticipantMinOrderByAggregateInput
}

export type ChatParticipantScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatParticipantScalarWhereWithAggregatesInput | Prisma.ChatParticipantScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatParticipantScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatParticipantScalarWhereWithAggregatesInput | Prisma.ChatParticipantScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ChatParticipant"> | string
  chatId?: Prisma.StringWithAggregatesFilter<"ChatParticipant"> | string
  clientId?: Prisma.StringNullableWithAggregatesFilter<"ChatParticipant"> | string | null
  businessId?: Prisma.StringNullableWithAggregatesFilter<"ChatParticipant"> | string | null
  workerId?: Prisma.StringNullableWithAggregatesFilter<"ChatParticipant"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ChatParticipant"> | Date | string
}

export type ChatParticipantCreateInput = {
  id?: string
  createdAt?: Date | string
  chat: Prisma.ChatCreateNestedOneWithoutParticipantsInput
  client?: Prisma.ClientCreateNestedOneWithoutChatParticipantsInput
  business?: Prisma.BusinessCreateNestedOneWithoutChatParticipantsInput
  worker?: Prisma.WorkerCreateNestedOneWithoutChatParticipantsInput
}

export type ChatParticipantUncheckedCreateInput = {
  id?: string
  chatId: string
  clientId?: string | null
  businessId?: string | null
  workerId?: string | null
  createdAt?: Date | string
}

export type ChatParticipantUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chat?: Prisma.ChatUpdateOneRequiredWithoutParticipantsNestedInput
  client?: Prisma.ClientUpdateOneWithoutChatParticipantsNestedInput
  business?: Prisma.BusinessUpdateOneWithoutChatParticipantsNestedInput
  worker?: Prisma.WorkerUpdateOneWithoutChatParticipantsNestedInput
}

export type ChatParticipantUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatParticipantCreateManyInput = {
  id?: string
  chatId: string
  clientId?: string | null
  businessId?: string | null
  workerId?: string | null
  createdAt?: Date | string
}

export type ChatParticipantUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatParticipantUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatParticipantListRelationFilter = {
  every?: Prisma.ChatParticipantWhereInput
  some?: Prisma.ChatParticipantWhereInput
  none?: Prisma.ChatParticipantWhereInput
}

export type ChatParticipantOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChatParticipantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ChatParticipantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ChatParticipantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ChatParticipantCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutBusinessInput, Prisma.ChatParticipantUncheckedCreateWithoutBusinessInput> | Prisma.ChatParticipantCreateWithoutBusinessInput[] | Prisma.ChatParticipantUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutBusinessInput | Prisma.ChatParticipantCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.ChatParticipantCreateManyBusinessInputEnvelope
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
}

export type ChatParticipantUncheckedCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutBusinessInput, Prisma.ChatParticipantUncheckedCreateWithoutBusinessInput> | Prisma.ChatParticipantCreateWithoutBusinessInput[] | Prisma.ChatParticipantUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutBusinessInput | Prisma.ChatParticipantCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.ChatParticipantCreateManyBusinessInputEnvelope
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
}

export type ChatParticipantUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutBusinessInput, Prisma.ChatParticipantUncheckedCreateWithoutBusinessInput> | Prisma.ChatParticipantCreateWithoutBusinessInput[] | Prisma.ChatParticipantUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutBusinessInput | Prisma.ChatParticipantCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.ChatParticipantUpsertWithWhereUniqueWithoutBusinessInput | Prisma.ChatParticipantUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.ChatParticipantCreateManyBusinessInputEnvelope
  set?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  delete?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  update?: Prisma.ChatParticipantUpdateWithWhereUniqueWithoutBusinessInput | Prisma.ChatParticipantUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.ChatParticipantUpdateManyWithWhereWithoutBusinessInput | Prisma.ChatParticipantUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.ChatParticipantScalarWhereInput | Prisma.ChatParticipantScalarWhereInput[]
}

export type ChatParticipantUncheckedUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutBusinessInput, Prisma.ChatParticipantUncheckedCreateWithoutBusinessInput> | Prisma.ChatParticipantCreateWithoutBusinessInput[] | Prisma.ChatParticipantUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutBusinessInput | Prisma.ChatParticipantCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.ChatParticipantUpsertWithWhereUniqueWithoutBusinessInput | Prisma.ChatParticipantUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.ChatParticipantCreateManyBusinessInputEnvelope
  set?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  delete?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  update?: Prisma.ChatParticipantUpdateWithWhereUniqueWithoutBusinessInput | Prisma.ChatParticipantUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.ChatParticipantUpdateManyWithWhereWithoutBusinessInput | Prisma.ChatParticipantUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.ChatParticipantScalarWhereInput | Prisma.ChatParticipantScalarWhereInput[]
}

export type ChatParticipantCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutClientInput, Prisma.ChatParticipantUncheckedCreateWithoutClientInput> | Prisma.ChatParticipantCreateWithoutClientInput[] | Prisma.ChatParticipantUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutClientInput | Prisma.ChatParticipantCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.ChatParticipantCreateManyClientInputEnvelope
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
}

export type ChatParticipantUncheckedCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutClientInput, Prisma.ChatParticipantUncheckedCreateWithoutClientInput> | Prisma.ChatParticipantCreateWithoutClientInput[] | Prisma.ChatParticipantUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutClientInput | Prisma.ChatParticipantCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.ChatParticipantCreateManyClientInputEnvelope
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
}

export type ChatParticipantUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutClientInput, Prisma.ChatParticipantUncheckedCreateWithoutClientInput> | Prisma.ChatParticipantCreateWithoutClientInput[] | Prisma.ChatParticipantUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutClientInput | Prisma.ChatParticipantCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.ChatParticipantUpsertWithWhereUniqueWithoutClientInput | Prisma.ChatParticipantUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.ChatParticipantCreateManyClientInputEnvelope
  set?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  delete?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  update?: Prisma.ChatParticipantUpdateWithWhereUniqueWithoutClientInput | Prisma.ChatParticipantUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.ChatParticipantUpdateManyWithWhereWithoutClientInput | Prisma.ChatParticipantUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.ChatParticipantScalarWhereInput | Prisma.ChatParticipantScalarWhereInput[]
}

export type ChatParticipantUncheckedUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutClientInput, Prisma.ChatParticipantUncheckedCreateWithoutClientInput> | Prisma.ChatParticipantCreateWithoutClientInput[] | Prisma.ChatParticipantUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutClientInput | Prisma.ChatParticipantCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.ChatParticipantUpsertWithWhereUniqueWithoutClientInput | Prisma.ChatParticipantUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.ChatParticipantCreateManyClientInputEnvelope
  set?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  delete?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  update?: Prisma.ChatParticipantUpdateWithWhereUniqueWithoutClientInput | Prisma.ChatParticipantUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.ChatParticipantUpdateManyWithWhereWithoutClientInput | Prisma.ChatParticipantUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.ChatParticipantScalarWhereInput | Prisma.ChatParticipantScalarWhereInput[]
}

export type ChatParticipantCreateNestedManyWithoutWorkerInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutWorkerInput, Prisma.ChatParticipantUncheckedCreateWithoutWorkerInput> | Prisma.ChatParticipantCreateWithoutWorkerInput[] | Prisma.ChatParticipantUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutWorkerInput | Prisma.ChatParticipantCreateOrConnectWithoutWorkerInput[]
  createMany?: Prisma.ChatParticipantCreateManyWorkerInputEnvelope
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
}

export type ChatParticipantUncheckedCreateNestedManyWithoutWorkerInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutWorkerInput, Prisma.ChatParticipantUncheckedCreateWithoutWorkerInput> | Prisma.ChatParticipantCreateWithoutWorkerInput[] | Prisma.ChatParticipantUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutWorkerInput | Prisma.ChatParticipantCreateOrConnectWithoutWorkerInput[]
  createMany?: Prisma.ChatParticipantCreateManyWorkerInputEnvelope
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
}

export type ChatParticipantUpdateManyWithoutWorkerNestedInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutWorkerInput, Prisma.ChatParticipantUncheckedCreateWithoutWorkerInput> | Prisma.ChatParticipantCreateWithoutWorkerInput[] | Prisma.ChatParticipantUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutWorkerInput | Prisma.ChatParticipantCreateOrConnectWithoutWorkerInput[]
  upsert?: Prisma.ChatParticipantUpsertWithWhereUniqueWithoutWorkerInput | Prisma.ChatParticipantUpsertWithWhereUniqueWithoutWorkerInput[]
  createMany?: Prisma.ChatParticipantCreateManyWorkerInputEnvelope
  set?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  delete?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  update?: Prisma.ChatParticipantUpdateWithWhereUniqueWithoutWorkerInput | Prisma.ChatParticipantUpdateWithWhereUniqueWithoutWorkerInput[]
  updateMany?: Prisma.ChatParticipantUpdateManyWithWhereWithoutWorkerInput | Prisma.ChatParticipantUpdateManyWithWhereWithoutWorkerInput[]
  deleteMany?: Prisma.ChatParticipantScalarWhereInput | Prisma.ChatParticipantScalarWhereInput[]
}

export type ChatParticipantUncheckedUpdateManyWithoutWorkerNestedInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutWorkerInput, Prisma.ChatParticipantUncheckedCreateWithoutWorkerInput> | Prisma.ChatParticipantCreateWithoutWorkerInput[] | Prisma.ChatParticipantUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutWorkerInput | Prisma.ChatParticipantCreateOrConnectWithoutWorkerInput[]
  upsert?: Prisma.ChatParticipantUpsertWithWhereUniqueWithoutWorkerInput | Prisma.ChatParticipantUpsertWithWhereUniqueWithoutWorkerInput[]
  createMany?: Prisma.ChatParticipantCreateManyWorkerInputEnvelope
  set?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  delete?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  update?: Prisma.ChatParticipantUpdateWithWhereUniqueWithoutWorkerInput | Prisma.ChatParticipantUpdateWithWhereUniqueWithoutWorkerInput[]
  updateMany?: Prisma.ChatParticipantUpdateManyWithWhereWithoutWorkerInput | Prisma.ChatParticipantUpdateManyWithWhereWithoutWorkerInput[]
  deleteMany?: Prisma.ChatParticipantScalarWhereInput | Prisma.ChatParticipantScalarWhereInput[]
}

export type ChatParticipantCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutChatInput, Prisma.ChatParticipantUncheckedCreateWithoutChatInput> | Prisma.ChatParticipantCreateWithoutChatInput[] | Prisma.ChatParticipantUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutChatInput | Prisma.ChatParticipantCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.ChatParticipantCreateManyChatInputEnvelope
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
}

export type ChatParticipantUncheckedCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutChatInput, Prisma.ChatParticipantUncheckedCreateWithoutChatInput> | Prisma.ChatParticipantCreateWithoutChatInput[] | Prisma.ChatParticipantUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutChatInput | Prisma.ChatParticipantCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.ChatParticipantCreateManyChatInputEnvelope
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
}

export type ChatParticipantUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutChatInput, Prisma.ChatParticipantUncheckedCreateWithoutChatInput> | Prisma.ChatParticipantCreateWithoutChatInput[] | Prisma.ChatParticipantUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutChatInput | Prisma.ChatParticipantCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.ChatParticipantUpsertWithWhereUniqueWithoutChatInput | Prisma.ChatParticipantUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.ChatParticipantCreateManyChatInputEnvelope
  set?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  delete?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  update?: Prisma.ChatParticipantUpdateWithWhereUniqueWithoutChatInput | Prisma.ChatParticipantUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.ChatParticipantUpdateManyWithWhereWithoutChatInput | Prisma.ChatParticipantUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.ChatParticipantScalarWhereInput | Prisma.ChatParticipantScalarWhereInput[]
}

export type ChatParticipantUncheckedUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.ChatParticipantCreateWithoutChatInput, Prisma.ChatParticipantUncheckedCreateWithoutChatInput> | Prisma.ChatParticipantCreateWithoutChatInput[] | Prisma.ChatParticipantUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.ChatParticipantCreateOrConnectWithoutChatInput | Prisma.ChatParticipantCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.ChatParticipantUpsertWithWhereUniqueWithoutChatInput | Prisma.ChatParticipantUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.ChatParticipantCreateManyChatInputEnvelope
  set?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  disconnect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  delete?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  connect?: Prisma.ChatParticipantWhereUniqueInput | Prisma.ChatParticipantWhereUniqueInput[]
  update?: Prisma.ChatParticipantUpdateWithWhereUniqueWithoutChatInput | Prisma.ChatParticipantUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.ChatParticipantUpdateManyWithWhereWithoutChatInput | Prisma.ChatParticipantUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.ChatParticipantScalarWhereInput | Prisma.ChatParticipantScalarWhereInput[]
}

export type ChatParticipantCreateWithoutBusinessInput = {
  id?: string
  createdAt?: Date | string
  chat: Prisma.ChatCreateNestedOneWithoutParticipantsInput
  client?: Prisma.ClientCreateNestedOneWithoutChatParticipantsInput
  worker?: Prisma.WorkerCreateNestedOneWithoutChatParticipantsInput
}

export type ChatParticipantUncheckedCreateWithoutBusinessInput = {
  id?: string
  chatId: string
  clientId?: string | null
  workerId?: string | null
  createdAt?: Date | string
}

export type ChatParticipantCreateOrConnectWithoutBusinessInput = {
  where: Prisma.ChatParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatParticipantCreateWithoutBusinessInput, Prisma.ChatParticipantUncheckedCreateWithoutBusinessInput>
}

export type ChatParticipantCreateManyBusinessInputEnvelope = {
  data: Prisma.ChatParticipantCreateManyBusinessInput | Prisma.ChatParticipantCreateManyBusinessInput[]
  skipDuplicates?: boolean
}

export type ChatParticipantUpsertWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.ChatParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatParticipantUpdateWithoutBusinessInput, Prisma.ChatParticipantUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.ChatParticipantCreateWithoutBusinessInput, Prisma.ChatParticipantUncheckedCreateWithoutBusinessInput>
}

export type ChatParticipantUpdateWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.ChatParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatParticipantUpdateWithoutBusinessInput, Prisma.ChatParticipantUncheckedUpdateWithoutBusinessInput>
}

export type ChatParticipantUpdateManyWithWhereWithoutBusinessInput = {
  where: Prisma.ChatParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.ChatParticipantUpdateManyMutationInput, Prisma.ChatParticipantUncheckedUpdateManyWithoutBusinessInput>
}

export type ChatParticipantScalarWhereInput = {
  AND?: Prisma.ChatParticipantScalarWhereInput | Prisma.ChatParticipantScalarWhereInput[]
  OR?: Prisma.ChatParticipantScalarWhereInput[]
  NOT?: Prisma.ChatParticipantScalarWhereInput | Prisma.ChatParticipantScalarWhereInput[]
  id?: Prisma.StringFilter<"ChatParticipant"> | string
  chatId?: Prisma.StringFilter<"ChatParticipant"> | string
  clientId?: Prisma.StringNullableFilter<"ChatParticipant"> | string | null
  businessId?: Prisma.StringNullableFilter<"ChatParticipant"> | string | null
  workerId?: Prisma.StringNullableFilter<"ChatParticipant"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatParticipant"> | Date | string
}

export type ChatParticipantCreateWithoutClientInput = {
  id?: string
  createdAt?: Date | string
  chat: Prisma.ChatCreateNestedOneWithoutParticipantsInput
  business?: Prisma.BusinessCreateNestedOneWithoutChatParticipantsInput
  worker?: Prisma.WorkerCreateNestedOneWithoutChatParticipantsInput
}

export type ChatParticipantUncheckedCreateWithoutClientInput = {
  id?: string
  chatId: string
  businessId?: string | null
  workerId?: string | null
  createdAt?: Date | string
}

export type ChatParticipantCreateOrConnectWithoutClientInput = {
  where: Prisma.ChatParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatParticipantCreateWithoutClientInput, Prisma.ChatParticipantUncheckedCreateWithoutClientInput>
}

export type ChatParticipantCreateManyClientInputEnvelope = {
  data: Prisma.ChatParticipantCreateManyClientInput | Prisma.ChatParticipantCreateManyClientInput[]
  skipDuplicates?: boolean
}

export type ChatParticipantUpsertWithWhereUniqueWithoutClientInput = {
  where: Prisma.ChatParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatParticipantUpdateWithoutClientInput, Prisma.ChatParticipantUncheckedUpdateWithoutClientInput>
  create: Prisma.XOR<Prisma.ChatParticipantCreateWithoutClientInput, Prisma.ChatParticipantUncheckedCreateWithoutClientInput>
}

export type ChatParticipantUpdateWithWhereUniqueWithoutClientInput = {
  where: Prisma.ChatParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatParticipantUpdateWithoutClientInput, Prisma.ChatParticipantUncheckedUpdateWithoutClientInput>
}

export type ChatParticipantUpdateManyWithWhereWithoutClientInput = {
  where: Prisma.ChatParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.ChatParticipantUpdateManyMutationInput, Prisma.ChatParticipantUncheckedUpdateManyWithoutClientInput>
}

export type ChatParticipantCreateWithoutWorkerInput = {
  id?: string
  createdAt?: Date | string
  chat: Prisma.ChatCreateNestedOneWithoutParticipantsInput
  client?: Prisma.ClientCreateNestedOneWithoutChatParticipantsInput
  business?: Prisma.BusinessCreateNestedOneWithoutChatParticipantsInput
}

export type ChatParticipantUncheckedCreateWithoutWorkerInput = {
  id?: string
  chatId: string
  clientId?: string | null
  businessId?: string | null
  createdAt?: Date | string
}

export type ChatParticipantCreateOrConnectWithoutWorkerInput = {
  where: Prisma.ChatParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatParticipantCreateWithoutWorkerInput, Prisma.ChatParticipantUncheckedCreateWithoutWorkerInput>
}

export type ChatParticipantCreateManyWorkerInputEnvelope = {
  data: Prisma.ChatParticipantCreateManyWorkerInput | Prisma.ChatParticipantCreateManyWorkerInput[]
  skipDuplicates?: boolean
}

export type ChatParticipantUpsertWithWhereUniqueWithoutWorkerInput = {
  where: Prisma.ChatParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatParticipantUpdateWithoutWorkerInput, Prisma.ChatParticipantUncheckedUpdateWithoutWorkerInput>
  create: Prisma.XOR<Prisma.ChatParticipantCreateWithoutWorkerInput, Prisma.ChatParticipantUncheckedCreateWithoutWorkerInput>
}

export type ChatParticipantUpdateWithWhereUniqueWithoutWorkerInput = {
  where: Prisma.ChatParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatParticipantUpdateWithoutWorkerInput, Prisma.ChatParticipantUncheckedUpdateWithoutWorkerInput>
}

export type ChatParticipantUpdateManyWithWhereWithoutWorkerInput = {
  where: Prisma.ChatParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.ChatParticipantUpdateManyMutationInput, Prisma.ChatParticipantUncheckedUpdateManyWithoutWorkerInput>
}

export type ChatParticipantCreateWithoutChatInput = {
  id?: string
  createdAt?: Date | string
  client?: Prisma.ClientCreateNestedOneWithoutChatParticipantsInput
  business?: Prisma.BusinessCreateNestedOneWithoutChatParticipantsInput
  worker?: Prisma.WorkerCreateNestedOneWithoutChatParticipantsInput
}

export type ChatParticipantUncheckedCreateWithoutChatInput = {
  id?: string
  clientId?: string | null
  businessId?: string | null
  workerId?: string | null
  createdAt?: Date | string
}

export type ChatParticipantCreateOrConnectWithoutChatInput = {
  where: Prisma.ChatParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatParticipantCreateWithoutChatInput, Prisma.ChatParticipantUncheckedCreateWithoutChatInput>
}

export type ChatParticipantCreateManyChatInputEnvelope = {
  data: Prisma.ChatParticipantCreateManyChatInput | Prisma.ChatParticipantCreateManyChatInput[]
  skipDuplicates?: boolean
}

export type ChatParticipantUpsertWithWhereUniqueWithoutChatInput = {
  where: Prisma.ChatParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatParticipantUpdateWithoutChatInput, Prisma.ChatParticipantUncheckedUpdateWithoutChatInput>
  create: Prisma.XOR<Prisma.ChatParticipantCreateWithoutChatInput, Prisma.ChatParticipantUncheckedCreateWithoutChatInput>
}

export type ChatParticipantUpdateWithWhereUniqueWithoutChatInput = {
  where: Prisma.ChatParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatParticipantUpdateWithoutChatInput, Prisma.ChatParticipantUncheckedUpdateWithoutChatInput>
}

export type ChatParticipantUpdateManyWithWhereWithoutChatInput = {
  where: Prisma.ChatParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.ChatParticipantUpdateManyMutationInput, Prisma.ChatParticipantUncheckedUpdateManyWithoutChatInput>
}

export type ChatParticipantCreateManyBusinessInput = {
  id?: string
  chatId: string
  clientId?: string | null
  workerId?: string | null
  createdAt?: Date | string
}

export type ChatParticipantUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chat?: Prisma.ChatUpdateOneRequiredWithoutParticipantsNestedInput
  client?: Prisma.ClientUpdateOneWithoutChatParticipantsNestedInput
  worker?: Prisma.WorkerUpdateOneWithoutChatParticipantsNestedInput
}

export type ChatParticipantUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatParticipantUncheckedUpdateManyWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatParticipantCreateManyClientInput = {
  id?: string
  chatId: string
  businessId?: string | null
  workerId?: string | null
  createdAt?: Date | string
}

export type ChatParticipantUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chat?: Prisma.ChatUpdateOneRequiredWithoutParticipantsNestedInput
  business?: Prisma.BusinessUpdateOneWithoutChatParticipantsNestedInput
  worker?: Prisma.WorkerUpdateOneWithoutChatParticipantsNestedInput
}

export type ChatParticipantUncheckedUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatParticipantUncheckedUpdateManyWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatParticipantCreateManyWorkerInput = {
  id?: string
  chatId: string
  clientId?: string | null
  businessId?: string | null
  createdAt?: Date | string
}

export type ChatParticipantUpdateWithoutWorkerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chat?: Prisma.ChatUpdateOneRequiredWithoutParticipantsNestedInput
  client?: Prisma.ClientUpdateOneWithoutChatParticipantsNestedInput
  business?: Prisma.BusinessUpdateOneWithoutChatParticipantsNestedInput
}

export type ChatParticipantUncheckedUpdateWithoutWorkerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatParticipantUncheckedUpdateManyWithoutWorkerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatParticipantCreateManyChatInput = {
  id?: string
  clientId?: string | null
  businessId?: string | null
  workerId?: string | null
  createdAt?: Date | string
}

export type ChatParticipantUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneWithoutChatParticipantsNestedInput
  business?: Prisma.BusinessUpdateOneWithoutChatParticipantsNestedInput
  worker?: Prisma.WorkerUpdateOneWithoutChatParticipantsNestedInput
}

export type ChatParticipantUncheckedUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatParticipantUncheckedUpdateManyWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ChatParticipantSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  clientId?: boolean
  businessId?: boolean
  workerId?: boolean
  createdAt?: boolean
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  client?: boolean | Prisma.ChatParticipant$clientArgs<ExtArgs>
  business?: boolean | Prisma.ChatParticipant$businessArgs<ExtArgs>
  worker?: boolean | Prisma.ChatParticipant$workerArgs<ExtArgs>
}, ExtArgs["result"]["chatParticipant"]>

export type ChatParticipantSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  clientId?: boolean
  businessId?: boolean
  workerId?: boolean
  createdAt?: boolean
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  client?: boolean | Prisma.ChatParticipant$clientArgs<ExtArgs>
  business?: boolean | Prisma.ChatParticipant$businessArgs<ExtArgs>
  worker?: boolean | Prisma.ChatParticipant$workerArgs<ExtArgs>
}, ExtArgs["result"]["chatParticipant"]>

export type ChatParticipantSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatId?: boolean
  clientId?: boolean
  businessId?: boolean
  workerId?: boolean
  createdAt?: boolean
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  client?: boolean | Prisma.ChatParticipant$clientArgs<ExtArgs>
  business?: boolean | Prisma.ChatParticipant$businessArgs<ExtArgs>
  worker?: boolean | Prisma.ChatParticipant$workerArgs<ExtArgs>
}, ExtArgs["result"]["chatParticipant"]>

export type ChatParticipantSelectScalar = {
  id?: boolean
  chatId?: boolean
  clientId?: boolean
  businessId?: boolean
  workerId?: boolean
  createdAt?: boolean
}

export type ChatParticipantOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "chatId" | "clientId" | "businessId" | "workerId" | "createdAt", ExtArgs["result"]["chatParticipant"]>
export type ChatParticipantInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  client?: boolean | Prisma.ChatParticipant$clientArgs<ExtArgs>
  business?: boolean | Prisma.ChatParticipant$businessArgs<ExtArgs>
  worker?: boolean | Prisma.ChatParticipant$workerArgs<ExtArgs>
}
export type ChatParticipantIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  client?: boolean | Prisma.ChatParticipant$clientArgs<ExtArgs>
  business?: boolean | Prisma.ChatParticipant$businessArgs<ExtArgs>
  worker?: boolean | Prisma.ChatParticipant$workerArgs<ExtArgs>
}
export type ChatParticipantIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  client?: boolean | Prisma.ChatParticipant$clientArgs<ExtArgs>
  business?: boolean | Prisma.ChatParticipant$businessArgs<ExtArgs>
  worker?: boolean | Prisma.ChatParticipant$workerArgs<ExtArgs>
}

export type $ChatParticipantPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChatParticipant"
  objects: {
    chat: Prisma.$ChatPayload<ExtArgs>
    client: Prisma.$ClientPayload<ExtArgs> | null
    business: Prisma.$BusinessPayload<ExtArgs> | null
    worker: Prisma.$WorkerPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    chatId: string
    clientId: string | null
    businessId: string | null
    workerId: string | null
    createdAt: Date
  }, ExtArgs["result"]["chatParticipant"]>
  composites: {}
}

export type ChatParticipantGetPayload<S extends boolean | null | undefined | ChatParticipantDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatParticipantPayload, S>

export type ChatParticipantCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatParticipantCountAggregateInputType | true
  }

export interface ChatParticipantDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatParticipant'], meta: { name: 'ChatParticipant' } }
  /**
   * Find zero or one ChatParticipant that matches the filter.
   * @param {ChatParticipantFindUniqueArgs} args - Arguments to find a ChatParticipant
   * @example
   * // Get one ChatParticipant
   * const chatParticipant = await prisma.chatParticipant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatParticipantFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatParticipantFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChatParticipant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatParticipantFindUniqueOrThrowArgs} args - Arguments to find a ChatParticipant
   * @example
   * // Get one ChatParticipant
   * const chatParticipant = await prisma.chatParticipant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatParticipantFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatParticipant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatParticipantFindFirstArgs} args - Arguments to find a ChatParticipant
   * @example
   * // Get one ChatParticipant
   * const chatParticipant = await prisma.chatParticipant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatParticipantFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatParticipantFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatParticipant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatParticipantFindFirstOrThrowArgs} args - Arguments to find a ChatParticipant
   * @example
   * // Get one ChatParticipant
   * const chatParticipant = await prisma.chatParticipant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatParticipantFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChatParticipants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChatParticipants
   * const chatParticipants = await prisma.chatParticipant.findMany()
   * 
   * // Get first 10 ChatParticipants
   * const chatParticipants = await prisma.chatParticipant.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatParticipantWithIdOnly = await prisma.chatParticipant.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatParticipantFindManyArgs>(args?: Prisma.SelectSubset<T, ChatParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChatParticipant.
   * @param {ChatParticipantCreateArgs} args - Arguments to create a ChatParticipant.
   * @example
   * // Create one ChatParticipant
   * const ChatParticipant = await prisma.chatParticipant.create({
   *   data: {
   *     // ... data to create a ChatParticipant
   *   }
   * })
   * 
   */
  create<T extends ChatParticipantCreateArgs>(args: Prisma.SelectSubset<T, ChatParticipantCreateArgs<ExtArgs>>): Prisma.Prisma__ChatParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChatParticipants.
   * @param {ChatParticipantCreateManyArgs} args - Arguments to create many ChatParticipants.
   * @example
   * // Create many ChatParticipants
   * const chatParticipant = await prisma.chatParticipant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChatParticipantCreateManyArgs>(args?: Prisma.SelectSubset<T, ChatParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ChatParticipants and returns the data saved in the database.
   * @param {ChatParticipantCreateManyAndReturnArgs} args - Arguments to create many ChatParticipants.
   * @example
   * // Create many ChatParticipants
   * const chatParticipant = await prisma.chatParticipant.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ChatParticipants and only return the `id`
   * const chatParticipantWithIdOnly = await prisma.chatParticipant.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChatParticipantCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChatParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ChatParticipant.
   * @param {ChatParticipantDeleteArgs} args - Arguments to delete one ChatParticipant.
   * @example
   * // Delete one ChatParticipant
   * const ChatParticipant = await prisma.chatParticipant.delete({
   *   where: {
   *     // ... filter to delete one ChatParticipant
   *   }
   * })
   * 
   */
  delete<T extends ChatParticipantDeleteArgs>(args: Prisma.SelectSubset<T, ChatParticipantDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChatParticipant.
   * @param {ChatParticipantUpdateArgs} args - Arguments to update one ChatParticipant.
   * @example
   * // Update one ChatParticipant
   * const chatParticipant = await prisma.chatParticipant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatParticipantUpdateArgs>(args: Prisma.SelectSubset<T, ChatParticipantUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChatParticipants.
   * @param {ChatParticipantDeleteManyArgs} args - Arguments to filter ChatParticipants to delete.
   * @example
   * // Delete a few ChatParticipants
   * const { count } = await prisma.chatParticipant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatParticipantDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatParticipantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChatParticipants
   * const chatParticipant = await prisma.chatParticipant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatParticipantUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatParticipants and returns the data updated in the database.
   * @param {ChatParticipantUpdateManyAndReturnArgs} args - Arguments to update many ChatParticipants.
   * @example
   * // Update many ChatParticipants
   * const chatParticipant = await prisma.chatParticipant.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ChatParticipants and only return the `id`
   * const chatParticipantWithIdOnly = await prisma.chatParticipant.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChatParticipantUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChatParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ChatParticipant.
   * @param {ChatParticipantUpsertArgs} args - Arguments to update or create a ChatParticipant.
   * @example
   * // Update or create a ChatParticipant
   * const chatParticipant = await prisma.chatParticipant.upsert({
   *   create: {
   *     // ... data to create a ChatParticipant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChatParticipant we want to update
   *   }
   * })
   */
  upsert<T extends ChatParticipantUpsertArgs>(args: Prisma.SelectSubset<T, ChatParticipantUpsertArgs<ExtArgs>>): Prisma.Prisma__ChatParticipantClient<runtime.Types.Result.GetResult<Prisma.$ChatParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChatParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatParticipantCountArgs} args - Arguments to filter ChatParticipants to count.
   * @example
   * // Count the number of ChatParticipants
   * const count = await prisma.chatParticipant.count({
   *   where: {
   *     // ... the filter for the ChatParticipants we want to count
   *   }
   * })
  **/
  count<T extends ChatParticipantCountArgs>(
    args?: Prisma.Subset<T, ChatParticipantCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatParticipantCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChatParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatParticipantAggregateArgs>(args: Prisma.Subset<T, ChatParticipantAggregateArgs>): Prisma.PrismaPromise<GetChatParticipantAggregateType<T>>

  /**
   * Group by ChatParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatParticipantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatParticipantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatParticipantGroupByArgs['orderBy'] }
      : { orderBy?: ChatParticipantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChatParticipant model
 */
readonly fields: ChatParticipantFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChatParticipant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatParticipantClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  chat<T extends Prisma.ChatDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatDefaultArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  client<T extends Prisma.ChatParticipant$clientArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatParticipant$clientArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  business<T extends Prisma.ChatParticipant$businessArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatParticipant$businessArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  worker<T extends Prisma.ChatParticipant$workerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatParticipant$workerArgs<ExtArgs>>): Prisma.Prisma__WorkerClient<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChatParticipant model
 */
export interface ChatParticipantFieldRefs {
  readonly id: Prisma.FieldRef<"ChatParticipant", 'String'>
  readonly chatId: Prisma.FieldRef<"ChatParticipant", 'String'>
  readonly clientId: Prisma.FieldRef<"ChatParticipant", 'String'>
  readonly businessId: Prisma.FieldRef<"ChatParticipant", 'String'>
  readonly workerId: Prisma.FieldRef<"ChatParticipant", 'String'>
  readonly createdAt: Prisma.FieldRef<"ChatParticipant", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ChatParticipant findUnique
 */
export type ChatParticipantFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatParticipant
   */
  select?: Prisma.ChatParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatParticipant
   */
  omit?: Prisma.ChatParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ChatParticipant to fetch.
   */
  where: Prisma.ChatParticipantWhereUniqueInput
}

/**
 * ChatParticipant findUniqueOrThrow
 */
export type ChatParticipantFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatParticipant
   */
  select?: Prisma.ChatParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatParticipant
   */
  omit?: Prisma.ChatParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ChatParticipant to fetch.
   */
  where: Prisma.ChatParticipantWhereUniqueInput
}

/**
 * ChatParticipant findFirst
 */
export type ChatParticipantFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatParticipant
   */
  select?: Prisma.ChatParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatParticipant
   */
  omit?: Prisma.ChatParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ChatParticipant to fetch.
   */
  where?: Prisma.ChatParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatParticipants to fetch.
   */
  orderBy?: Prisma.ChatParticipantOrderByWithRelationInput | Prisma.ChatParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatParticipants.
   */
  cursor?: Prisma.ChatParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatParticipants.
   */
  distinct?: Prisma.ChatParticipantScalarFieldEnum | Prisma.ChatParticipantScalarFieldEnum[]
}

/**
 * ChatParticipant findFirstOrThrow
 */
export type ChatParticipantFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatParticipant
   */
  select?: Prisma.ChatParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatParticipant
   */
  omit?: Prisma.ChatParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ChatParticipant to fetch.
   */
  where?: Prisma.ChatParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatParticipants to fetch.
   */
  orderBy?: Prisma.ChatParticipantOrderByWithRelationInput | Prisma.ChatParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatParticipants.
   */
  cursor?: Prisma.ChatParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatParticipants.
   */
  distinct?: Prisma.ChatParticipantScalarFieldEnum | Prisma.ChatParticipantScalarFieldEnum[]
}

/**
 * ChatParticipant findMany
 */
export type ChatParticipantFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatParticipant
   */
  select?: Prisma.ChatParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatParticipant
   */
  omit?: Prisma.ChatParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatParticipantInclude<ExtArgs> | null
  /**
   * Filter, which ChatParticipants to fetch.
   */
  where?: Prisma.ChatParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatParticipants to fetch.
   */
  orderBy?: Prisma.ChatParticipantOrderByWithRelationInput | Prisma.ChatParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChatParticipants.
   */
  cursor?: Prisma.ChatParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatParticipants.
   */
  skip?: number
  distinct?: Prisma.ChatParticipantScalarFieldEnum | Prisma.ChatParticipantScalarFieldEnum[]
}

/**
 * ChatParticipant create
 */
export type ChatParticipantCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatParticipant
   */
  select?: Prisma.ChatParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatParticipant
   */
  omit?: Prisma.ChatParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatParticipantInclude<ExtArgs> | null
  /**
   * The data needed to create a ChatParticipant.
   */
  data: Prisma.XOR<Prisma.ChatParticipantCreateInput, Prisma.ChatParticipantUncheckedCreateInput>
}

/**
 * ChatParticipant createMany
 */
export type ChatParticipantCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChatParticipants.
   */
  data: Prisma.ChatParticipantCreateManyInput | Prisma.ChatParticipantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ChatParticipant createManyAndReturn
 */
export type ChatParticipantCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatParticipant
   */
  select?: Prisma.ChatParticipantSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatParticipant
   */
  omit?: Prisma.ChatParticipantOmit<ExtArgs> | null
  /**
   * The data used to create many ChatParticipants.
   */
  data: Prisma.ChatParticipantCreateManyInput | Prisma.ChatParticipantCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatParticipantIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ChatParticipant update
 */
export type ChatParticipantUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatParticipant
   */
  select?: Prisma.ChatParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatParticipant
   */
  omit?: Prisma.ChatParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatParticipantInclude<ExtArgs> | null
  /**
   * The data needed to update a ChatParticipant.
   */
  data: Prisma.XOR<Prisma.ChatParticipantUpdateInput, Prisma.ChatParticipantUncheckedUpdateInput>
  /**
   * Choose, which ChatParticipant to update.
   */
  where: Prisma.ChatParticipantWhereUniqueInput
}

/**
 * ChatParticipant updateMany
 */
export type ChatParticipantUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChatParticipants.
   */
  data: Prisma.XOR<Prisma.ChatParticipantUpdateManyMutationInput, Prisma.ChatParticipantUncheckedUpdateManyInput>
  /**
   * Filter which ChatParticipants to update
   */
  where?: Prisma.ChatParticipantWhereInput
  /**
   * Limit how many ChatParticipants to update.
   */
  limit?: number
}

/**
 * ChatParticipant updateManyAndReturn
 */
export type ChatParticipantUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatParticipant
   */
  select?: Prisma.ChatParticipantSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatParticipant
   */
  omit?: Prisma.ChatParticipantOmit<ExtArgs> | null
  /**
   * The data used to update ChatParticipants.
   */
  data: Prisma.XOR<Prisma.ChatParticipantUpdateManyMutationInput, Prisma.ChatParticipantUncheckedUpdateManyInput>
  /**
   * Filter which ChatParticipants to update
   */
  where?: Prisma.ChatParticipantWhereInput
  /**
   * Limit how many ChatParticipants to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ChatParticipant upsert
 */
export type ChatParticipantUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatParticipant
   */
  select?: Prisma.ChatParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatParticipant
   */
  omit?: Prisma.ChatParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatParticipantInclude<ExtArgs> | null
  /**
   * The filter to search for the ChatParticipant to update in case it exists.
   */
  where: Prisma.ChatParticipantWhereUniqueInput
  /**
   * In case the ChatParticipant found by the `where` argument doesn't exist, create a new ChatParticipant with this data.
   */
  create: Prisma.XOR<Prisma.ChatParticipantCreateInput, Prisma.ChatParticipantUncheckedCreateInput>
  /**
   * In case the ChatParticipant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatParticipantUpdateInput, Prisma.ChatParticipantUncheckedUpdateInput>
}

/**
 * ChatParticipant delete
 */
export type ChatParticipantDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatParticipant
   */
  select?: Prisma.ChatParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatParticipant
   */
  omit?: Prisma.ChatParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatParticipantInclude<ExtArgs> | null
  /**
   * Filter which ChatParticipant to delete.
   */
  where: Prisma.ChatParticipantWhereUniqueInput
}

/**
 * ChatParticipant deleteMany
 */
export type ChatParticipantDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatParticipants to delete
   */
  where?: Prisma.ChatParticipantWhereInput
  /**
   * Limit how many ChatParticipants to delete.
   */
  limit?: number
}

/**
 * ChatParticipant.client
 */
export type ChatParticipant$clientArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  where?: Prisma.ClientWhereInput
}

/**
 * ChatParticipant.business
 */
export type ChatParticipant$businessArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Business
   */
  select?: Prisma.BusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Business
   */
  omit?: Prisma.BusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessInclude<ExtArgs> | null
  where?: Prisma.BusinessWhereInput
}

/**
 * ChatParticipant.worker
 */
export type ChatParticipant$workerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerInclude<ExtArgs> | null
  where?: Prisma.WorkerWhereInput
}

/**
 * ChatParticipant without action
 */
export type ChatParticipantDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatParticipant
   */
  select?: Prisma.ChatParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatParticipant
   */
  omit?: Prisma.ChatParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatParticipantInclude<ExtArgs> | null
}
