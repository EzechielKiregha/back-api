
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TokenTransaction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TokenTransaction
 * 
 */
export type TokenTransactionModel = runtime.Types.Result.DefaultSelection<Prisma.$TokenTransactionPayload>

export type AggregateTokenTransaction = {
  _count: TokenTransactionCountAggregateOutputType | null
  _avg: TokenTransactionAvgAggregateOutputType | null
  _sum: TokenTransactionSumAggregateOutputType | null
  _min: TokenTransactionMinAggregateOutputType | null
  _max: TokenTransactionMaxAggregateOutputType | null
}

export type TokenTransactionAvgAggregateOutputType = {
  amount: number | null
}

export type TokenTransactionSumAggregateOutputType = {
  amount: number | null
}

export type TokenTransactionMinAggregateOutputType = {
  id: string | null
  businessId: string | null
  reOwnedProductId: string | null
  amount: number | null
  type: string | null
  createdAt: Date | null
}

export type TokenTransactionMaxAggregateOutputType = {
  id: string | null
  businessId: string | null
  reOwnedProductId: string | null
  amount: number | null
  type: string | null
  createdAt: Date | null
}

export type TokenTransactionCountAggregateOutputType = {
  id: number
  businessId: number
  reOwnedProductId: number
  amount: number
  type: number
  createdAt: number
  _all: number
}


export type TokenTransactionAvgAggregateInputType = {
  amount?: true
}

export type TokenTransactionSumAggregateInputType = {
  amount?: true
}

export type TokenTransactionMinAggregateInputType = {
  id?: true
  businessId?: true
  reOwnedProductId?: true
  amount?: true
  type?: true
  createdAt?: true
}

export type TokenTransactionMaxAggregateInputType = {
  id?: true
  businessId?: true
  reOwnedProductId?: true
  amount?: true
  type?: true
  createdAt?: true
}

export type TokenTransactionCountAggregateInputType = {
  id?: true
  businessId?: true
  reOwnedProductId?: true
  amount?: true
  type?: true
  createdAt?: true
  _all?: true
}

export type TokenTransactionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TokenTransaction to aggregate.
   */
  where?: Prisma.TokenTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TokenTransactions to fetch.
   */
  orderBy?: Prisma.TokenTransactionOrderByWithRelationInput | Prisma.TokenTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TokenTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TokenTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TokenTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TokenTransactions
  **/
  _count?: true | TokenTransactionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TokenTransactionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TokenTransactionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TokenTransactionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TokenTransactionMaxAggregateInputType
}

export type GetTokenTransactionAggregateType<T extends TokenTransactionAggregateArgs> = {
      [P in keyof T & keyof AggregateTokenTransaction]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTokenTransaction[P]>
    : Prisma.GetScalarType<T[P], AggregateTokenTransaction[P]>
}




export type TokenTransactionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TokenTransactionWhereInput
  orderBy?: Prisma.TokenTransactionOrderByWithAggregationInput | Prisma.TokenTransactionOrderByWithAggregationInput[]
  by: Prisma.TokenTransactionScalarFieldEnum[] | Prisma.TokenTransactionScalarFieldEnum
  having?: Prisma.TokenTransactionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TokenTransactionCountAggregateInputType | true
  _avg?: TokenTransactionAvgAggregateInputType
  _sum?: TokenTransactionSumAggregateInputType
  _min?: TokenTransactionMinAggregateInputType
  _max?: TokenTransactionMaxAggregateInputType
}

export type TokenTransactionGroupByOutputType = {
  id: string
  businessId: string
  reOwnedProductId: string | null
  amount: number
  type: string
  createdAt: Date
  _count: TokenTransactionCountAggregateOutputType | null
  _avg: TokenTransactionAvgAggregateOutputType | null
  _sum: TokenTransactionSumAggregateOutputType | null
  _min: TokenTransactionMinAggregateOutputType | null
  _max: TokenTransactionMaxAggregateOutputType | null
}

type GetTokenTransactionGroupByPayload<T extends TokenTransactionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TokenTransactionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TokenTransactionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TokenTransactionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TokenTransactionGroupByOutputType[P]>
      }
    >
  > 



export type TokenTransactionWhereInput = {
  AND?: Prisma.TokenTransactionWhereInput | Prisma.TokenTransactionWhereInput[]
  OR?: Prisma.TokenTransactionWhereInput[]
  NOT?: Prisma.TokenTransactionWhereInput | Prisma.TokenTransactionWhereInput[]
  id?: Prisma.StringFilter<"TokenTransaction"> | string
  businessId?: Prisma.StringFilter<"TokenTransaction"> | string
  reOwnedProductId?: Prisma.StringNullableFilter<"TokenTransaction"> | string | null
  amount?: Prisma.FloatFilter<"TokenTransaction"> | number
  type?: Prisma.StringFilter<"TokenTransaction"> | string
  createdAt?: Prisma.DateTimeFilter<"TokenTransaction"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
  reOwnedProduct?: Prisma.XOR<Prisma.ReOwnedProductNullableScalarRelationFilter, Prisma.ReOwnedProductWhereInput> | null
}

export type TokenTransactionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  reOwnedProductId?: Prisma.SortOrderInput | Prisma.SortOrder
  amount?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  business?: Prisma.BusinessOrderByWithRelationInput
  reOwnedProduct?: Prisma.ReOwnedProductOrderByWithRelationInput
}

export type TokenTransactionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TokenTransactionWhereInput | Prisma.TokenTransactionWhereInput[]
  OR?: Prisma.TokenTransactionWhereInput[]
  NOT?: Prisma.TokenTransactionWhereInput | Prisma.TokenTransactionWhereInput[]
  businessId?: Prisma.StringFilter<"TokenTransaction"> | string
  reOwnedProductId?: Prisma.StringNullableFilter<"TokenTransaction"> | string | null
  amount?: Prisma.FloatFilter<"TokenTransaction"> | number
  type?: Prisma.StringFilter<"TokenTransaction"> | string
  createdAt?: Prisma.DateTimeFilter<"TokenTransaction"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
  reOwnedProduct?: Prisma.XOR<Prisma.ReOwnedProductNullableScalarRelationFilter, Prisma.ReOwnedProductWhereInput> | null
}, "id">

export type TokenTransactionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  reOwnedProductId?: Prisma.SortOrderInput | Prisma.SortOrder
  amount?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.TokenTransactionCountOrderByAggregateInput
  _avg?: Prisma.TokenTransactionAvgOrderByAggregateInput
  _max?: Prisma.TokenTransactionMaxOrderByAggregateInput
  _min?: Prisma.TokenTransactionMinOrderByAggregateInput
  _sum?: Prisma.TokenTransactionSumOrderByAggregateInput
}

export type TokenTransactionScalarWhereWithAggregatesInput = {
  AND?: Prisma.TokenTransactionScalarWhereWithAggregatesInput | Prisma.TokenTransactionScalarWhereWithAggregatesInput[]
  OR?: Prisma.TokenTransactionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TokenTransactionScalarWhereWithAggregatesInput | Prisma.TokenTransactionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TokenTransaction"> | string
  businessId?: Prisma.StringWithAggregatesFilter<"TokenTransaction"> | string
  reOwnedProductId?: Prisma.StringNullableWithAggregatesFilter<"TokenTransaction"> | string | null
  amount?: Prisma.FloatWithAggregatesFilter<"TokenTransaction"> | number
  type?: Prisma.StringWithAggregatesFilter<"TokenTransaction"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TokenTransaction"> | Date | string
}

export type TokenTransactionCreateInput = {
  id?: string
  amount: number
  type: string
  createdAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutTokenTransactionsInput
  reOwnedProduct?: Prisma.ReOwnedProductCreateNestedOneWithoutTokenTransactionsInput
}

export type TokenTransactionUncheckedCreateInput = {
  id?: string
  businessId: string
  reOwnedProductId?: string | null
  amount: number
  type: string
  createdAt?: Date | string
}

export type TokenTransactionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutTokenTransactionsNestedInput
  reOwnedProduct?: Prisma.ReOwnedProductUpdateOneWithoutTokenTransactionsNestedInput
}

export type TokenTransactionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  reOwnedProductId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TokenTransactionCreateManyInput = {
  id?: string
  businessId: string
  reOwnedProductId?: string | null
  amount: number
  type: string
  createdAt?: Date | string
}

export type TokenTransactionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TokenTransactionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  reOwnedProductId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TokenTransactionListRelationFilter = {
  every?: Prisma.TokenTransactionWhereInput
  some?: Prisma.TokenTransactionWhereInput
  none?: Prisma.TokenTransactionWhereInput
}

export type TokenTransactionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TokenTransactionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  reOwnedProductId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TokenTransactionAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type TokenTransactionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  reOwnedProductId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TokenTransactionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  reOwnedProductId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TokenTransactionSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type TokenTransactionCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.TokenTransactionCreateWithoutBusinessInput, Prisma.TokenTransactionUncheckedCreateWithoutBusinessInput> | Prisma.TokenTransactionCreateWithoutBusinessInput[] | Prisma.TokenTransactionUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.TokenTransactionCreateOrConnectWithoutBusinessInput | Prisma.TokenTransactionCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.TokenTransactionCreateManyBusinessInputEnvelope
  connect?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
}

export type TokenTransactionUncheckedCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.TokenTransactionCreateWithoutBusinessInput, Prisma.TokenTransactionUncheckedCreateWithoutBusinessInput> | Prisma.TokenTransactionCreateWithoutBusinessInput[] | Prisma.TokenTransactionUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.TokenTransactionCreateOrConnectWithoutBusinessInput | Prisma.TokenTransactionCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.TokenTransactionCreateManyBusinessInputEnvelope
  connect?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
}

export type TokenTransactionUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.TokenTransactionCreateWithoutBusinessInput, Prisma.TokenTransactionUncheckedCreateWithoutBusinessInput> | Prisma.TokenTransactionCreateWithoutBusinessInput[] | Prisma.TokenTransactionUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.TokenTransactionCreateOrConnectWithoutBusinessInput | Prisma.TokenTransactionCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.TokenTransactionUpsertWithWhereUniqueWithoutBusinessInput | Prisma.TokenTransactionUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.TokenTransactionCreateManyBusinessInputEnvelope
  set?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  disconnect?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  delete?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  connect?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  update?: Prisma.TokenTransactionUpdateWithWhereUniqueWithoutBusinessInput | Prisma.TokenTransactionUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.TokenTransactionUpdateManyWithWhereWithoutBusinessInput | Prisma.TokenTransactionUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.TokenTransactionScalarWhereInput | Prisma.TokenTransactionScalarWhereInput[]
}

export type TokenTransactionUncheckedUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.TokenTransactionCreateWithoutBusinessInput, Prisma.TokenTransactionUncheckedCreateWithoutBusinessInput> | Prisma.TokenTransactionCreateWithoutBusinessInput[] | Prisma.TokenTransactionUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.TokenTransactionCreateOrConnectWithoutBusinessInput | Prisma.TokenTransactionCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.TokenTransactionUpsertWithWhereUniqueWithoutBusinessInput | Prisma.TokenTransactionUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.TokenTransactionCreateManyBusinessInputEnvelope
  set?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  disconnect?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  delete?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  connect?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  update?: Prisma.TokenTransactionUpdateWithWhereUniqueWithoutBusinessInput | Prisma.TokenTransactionUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.TokenTransactionUpdateManyWithWhereWithoutBusinessInput | Prisma.TokenTransactionUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.TokenTransactionScalarWhereInput | Prisma.TokenTransactionScalarWhereInput[]
}

export type TokenTransactionCreateNestedManyWithoutReOwnedProductInput = {
  create?: Prisma.XOR<Prisma.TokenTransactionCreateWithoutReOwnedProductInput, Prisma.TokenTransactionUncheckedCreateWithoutReOwnedProductInput> | Prisma.TokenTransactionCreateWithoutReOwnedProductInput[] | Prisma.TokenTransactionUncheckedCreateWithoutReOwnedProductInput[]
  connectOrCreate?: Prisma.TokenTransactionCreateOrConnectWithoutReOwnedProductInput | Prisma.TokenTransactionCreateOrConnectWithoutReOwnedProductInput[]
  createMany?: Prisma.TokenTransactionCreateManyReOwnedProductInputEnvelope
  connect?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
}

export type TokenTransactionUncheckedCreateNestedManyWithoutReOwnedProductInput = {
  create?: Prisma.XOR<Prisma.TokenTransactionCreateWithoutReOwnedProductInput, Prisma.TokenTransactionUncheckedCreateWithoutReOwnedProductInput> | Prisma.TokenTransactionCreateWithoutReOwnedProductInput[] | Prisma.TokenTransactionUncheckedCreateWithoutReOwnedProductInput[]
  connectOrCreate?: Prisma.TokenTransactionCreateOrConnectWithoutReOwnedProductInput | Prisma.TokenTransactionCreateOrConnectWithoutReOwnedProductInput[]
  createMany?: Prisma.TokenTransactionCreateManyReOwnedProductInputEnvelope
  connect?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
}

export type TokenTransactionUpdateManyWithoutReOwnedProductNestedInput = {
  create?: Prisma.XOR<Prisma.TokenTransactionCreateWithoutReOwnedProductInput, Prisma.TokenTransactionUncheckedCreateWithoutReOwnedProductInput> | Prisma.TokenTransactionCreateWithoutReOwnedProductInput[] | Prisma.TokenTransactionUncheckedCreateWithoutReOwnedProductInput[]
  connectOrCreate?: Prisma.TokenTransactionCreateOrConnectWithoutReOwnedProductInput | Prisma.TokenTransactionCreateOrConnectWithoutReOwnedProductInput[]
  upsert?: Prisma.TokenTransactionUpsertWithWhereUniqueWithoutReOwnedProductInput | Prisma.TokenTransactionUpsertWithWhereUniqueWithoutReOwnedProductInput[]
  createMany?: Prisma.TokenTransactionCreateManyReOwnedProductInputEnvelope
  set?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  disconnect?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  delete?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  connect?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  update?: Prisma.TokenTransactionUpdateWithWhereUniqueWithoutReOwnedProductInput | Prisma.TokenTransactionUpdateWithWhereUniqueWithoutReOwnedProductInput[]
  updateMany?: Prisma.TokenTransactionUpdateManyWithWhereWithoutReOwnedProductInput | Prisma.TokenTransactionUpdateManyWithWhereWithoutReOwnedProductInput[]
  deleteMany?: Prisma.TokenTransactionScalarWhereInput | Prisma.TokenTransactionScalarWhereInput[]
}

export type TokenTransactionUncheckedUpdateManyWithoutReOwnedProductNestedInput = {
  create?: Prisma.XOR<Prisma.TokenTransactionCreateWithoutReOwnedProductInput, Prisma.TokenTransactionUncheckedCreateWithoutReOwnedProductInput> | Prisma.TokenTransactionCreateWithoutReOwnedProductInput[] | Prisma.TokenTransactionUncheckedCreateWithoutReOwnedProductInput[]
  connectOrCreate?: Prisma.TokenTransactionCreateOrConnectWithoutReOwnedProductInput | Prisma.TokenTransactionCreateOrConnectWithoutReOwnedProductInput[]
  upsert?: Prisma.TokenTransactionUpsertWithWhereUniqueWithoutReOwnedProductInput | Prisma.TokenTransactionUpsertWithWhereUniqueWithoutReOwnedProductInput[]
  createMany?: Prisma.TokenTransactionCreateManyReOwnedProductInputEnvelope
  set?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  disconnect?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  delete?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  connect?: Prisma.TokenTransactionWhereUniqueInput | Prisma.TokenTransactionWhereUniqueInput[]
  update?: Prisma.TokenTransactionUpdateWithWhereUniqueWithoutReOwnedProductInput | Prisma.TokenTransactionUpdateWithWhereUniqueWithoutReOwnedProductInput[]
  updateMany?: Prisma.TokenTransactionUpdateManyWithWhereWithoutReOwnedProductInput | Prisma.TokenTransactionUpdateManyWithWhereWithoutReOwnedProductInput[]
  deleteMany?: Prisma.TokenTransactionScalarWhereInput | Prisma.TokenTransactionScalarWhereInput[]
}

export type TokenTransactionCreateWithoutBusinessInput = {
  id?: string
  amount: number
  type: string
  createdAt?: Date | string
  reOwnedProduct?: Prisma.ReOwnedProductCreateNestedOneWithoutTokenTransactionsInput
}

export type TokenTransactionUncheckedCreateWithoutBusinessInput = {
  id?: string
  reOwnedProductId?: string | null
  amount: number
  type: string
  createdAt?: Date | string
}

export type TokenTransactionCreateOrConnectWithoutBusinessInput = {
  where: Prisma.TokenTransactionWhereUniqueInput
  create: Prisma.XOR<Prisma.TokenTransactionCreateWithoutBusinessInput, Prisma.TokenTransactionUncheckedCreateWithoutBusinessInput>
}

export type TokenTransactionCreateManyBusinessInputEnvelope = {
  data: Prisma.TokenTransactionCreateManyBusinessInput | Prisma.TokenTransactionCreateManyBusinessInput[]
  skipDuplicates?: boolean
}

export type TokenTransactionUpsertWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.TokenTransactionWhereUniqueInput
  update: Prisma.XOR<Prisma.TokenTransactionUpdateWithoutBusinessInput, Prisma.TokenTransactionUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.TokenTransactionCreateWithoutBusinessInput, Prisma.TokenTransactionUncheckedCreateWithoutBusinessInput>
}

export type TokenTransactionUpdateWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.TokenTransactionWhereUniqueInput
  data: Prisma.XOR<Prisma.TokenTransactionUpdateWithoutBusinessInput, Prisma.TokenTransactionUncheckedUpdateWithoutBusinessInput>
}

export type TokenTransactionUpdateManyWithWhereWithoutBusinessInput = {
  where: Prisma.TokenTransactionScalarWhereInput
  data: Prisma.XOR<Prisma.TokenTransactionUpdateManyMutationInput, Prisma.TokenTransactionUncheckedUpdateManyWithoutBusinessInput>
}

export type TokenTransactionScalarWhereInput = {
  AND?: Prisma.TokenTransactionScalarWhereInput | Prisma.TokenTransactionScalarWhereInput[]
  OR?: Prisma.TokenTransactionScalarWhereInput[]
  NOT?: Prisma.TokenTransactionScalarWhereInput | Prisma.TokenTransactionScalarWhereInput[]
  id?: Prisma.StringFilter<"TokenTransaction"> | string
  businessId?: Prisma.StringFilter<"TokenTransaction"> | string
  reOwnedProductId?: Prisma.StringNullableFilter<"TokenTransaction"> | string | null
  amount?: Prisma.FloatFilter<"TokenTransaction"> | number
  type?: Prisma.StringFilter<"TokenTransaction"> | string
  createdAt?: Prisma.DateTimeFilter<"TokenTransaction"> | Date | string
}

export type TokenTransactionCreateWithoutReOwnedProductInput = {
  id?: string
  amount: number
  type: string
  createdAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutTokenTransactionsInput
}

export type TokenTransactionUncheckedCreateWithoutReOwnedProductInput = {
  id?: string
  businessId: string
  amount: number
  type: string
  createdAt?: Date | string
}

export type TokenTransactionCreateOrConnectWithoutReOwnedProductInput = {
  where: Prisma.TokenTransactionWhereUniqueInput
  create: Prisma.XOR<Prisma.TokenTransactionCreateWithoutReOwnedProductInput, Prisma.TokenTransactionUncheckedCreateWithoutReOwnedProductInput>
}

export type TokenTransactionCreateManyReOwnedProductInputEnvelope = {
  data: Prisma.TokenTransactionCreateManyReOwnedProductInput | Prisma.TokenTransactionCreateManyReOwnedProductInput[]
  skipDuplicates?: boolean
}

export type TokenTransactionUpsertWithWhereUniqueWithoutReOwnedProductInput = {
  where: Prisma.TokenTransactionWhereUniqueInput
  update: Prisma.XOR<Prisma.TokenTransactionUpdateWithoutReOwnedProductInput, Prisma.TokenTransactionUncheckedUpdateWithoutReOwnedProductInput>
  create: Prisma.XOR<Prisma.TokenTransactionCreateWithoutReOwnedProductInput, Prisma.TokenTransactionUncheckedCreateWithoutReOwnedProductInput>
}

export type TokenTransactionUpdateWithWhereUniqueWithoutReOwnedProductInput = {
  where: Prisma.TokenTransactionWhereUniqueInput
  data: Prisma.XOR<Prisma.TokenTransactionUpdateWithoutReOwnedProductInput, Prisma.TokenTransactionUncheckedUpdateWithoutReOwnedProductInput>
}

export type TokenTransactionUpdateManyWithWhereWithoutReOwnedProductInput = {
  where: Prisma.TokenTransactionScalarWhereInput
  data: Prisma.XOR<Prisma.TokenTransactionUpdateManyMutationInput, Prisma.TokenTransactionUncheckedUpdateManyWithoutReOwnedProductInput>
}

export type TokenTransactionCreateManyBusinessInput = {
  id?: string
  reOwnedProductId?: string | null
  amount: number
  type: string
  createdAt?: Date | string
}

export type TokenTransactionUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reOwnedProduct?: Prisma.ReOwnedProductUpdateOneWithoutTokenTransactionsNestedInput
}

export type TokenTransactionUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reOwnedProductId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TokenTransactionUncheckedUpdateManyWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reOwnedProductId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TokenTransactionCreateManyReOwnedProductInput = {
  id?: string
  businessId: string
  amount: number
  type: string
  createdAt?: Date | string
}

export type TokenTransactionUpdateWithoutReOwnedProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutTokenTransactionsNestedInput
}

export type TokenTransactionUncheckedUpdateWithoutReOwnedProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TokenTransactionUncheckedUpdateManyWithoutReOwnedProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  type?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TokenTransactionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  reOwnedProductId?: boolean
  amount?: boolean
  type?: boolean
  createdAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  reOwnedProduct?: boolean | Prisma.TokenTransaction$reOwnedProductArgs<ExtArgs>
}, ExtArgs["result"]["tokenTransaction"]>

export type TokenTransactionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  reOwnedProductId?: boolean
  amount?: boolean
  type?: boolean
  createdAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  reOwnedProduct?: boolean | Prisma.TokenTransaction$reOwnedProductArgs<ExtArgs>
}, ExtArgs["result"]["tokenTransaction"]>

export type TokenTransactionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  reOwnedProductId?: boolean
  amount?: boolean
  type?: boolean
  createdAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  reOwnedProduct?: boolean | Prisma.TokenTransaction$reOwnedProductArgs<ExtArgs>
}, ExtArgs["result"]["tokenTransaction"]>

export type TokenTransactionSelectScalar = {
  id?: boolean
  businessId?: boolean
  reOwnedProductId?: boolean
  amount?: boolean
  type?: boolean
  createdAt?: boolean
}

export type TokenTransactionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "businessId" | "reOwnedProductId" | "amount" | "type" | "createdAt", ExtArgs["result"]["tokenTransaction"]>
export type TokenTransactionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  reOwnedProduct?: boolean | Prisma.TokenTransaction$reOwnedProductArgs<ExtArgs>
}
export type TokenTransactionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  reOwnedProduct?: boolean | Prisma.TokenTransaction$reOwnedProductArgs<ExtArgs>
}
export type TokenTransactionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
  reOwnedProduct?: boolean | Prisma.TokenTransaction$reOwnedProductArgs<ExtArgs>
}

export type $TokenTransactionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TokenTransaction"
  objects: {
    business: Prisma.$BusinessPayload<ExtArgs>
    reOwnedProduct: Prisma.$ReOwnedProductPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    businessId: string
    reOwnedProductId: string | null
    amount: number
    type: string
    createdAt: Date
  }, ExtArgs["result"]["tokenTransaction"]>
  composites: {}
}

export type TokenTransactionGetPayload<S extends boolean | null | undefined | TokenTransactionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TokenTransactionPayload, S>

export type TokenTransactionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TokenTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TokenTransactionCountAggregateInputType | true
  }

export interface TokenTransactionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TokenTransaction'], meta: { name: 'TokenTransaction' } }
  /**
   * Find zero or one TokenTransaction that matches the filter.
   * @param {TokenTransactionFindUniqueArgs} args - Arguments to find a TokenTransaction
   * @example
   * // Get one TokenTransaction
   * const tokenTransaction = await prisma.tokenTransaction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TokenTransactionFindUniqueArgs>(args: Prisma.SelectSubset<T, TokenTransactionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TokenTransactionClient<runtime.Types.Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TokenTransaction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TokenTransactionFindUniqueOrThrowArgs} args - Arguments to find a TokenTransaction
   * @example
   * // Get one TokenTransaction
   * const tokenTransaction = await prisma.tokenTransaction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TokenTransactionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TokenTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TokenTransactionClient<runtime.Types.Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TokenTransaction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenTransactionFindFirstArgs} args - Arguments to find a TokenTransaction
   * @example
   * // Get one TokenTransaction
   * const tokenTransaction = await prisma.tokenTransaction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TokenTransactionFindFirstArgs>(args?: Prisma.SelectSubset<T, TokenTransactionFindFirstArgs<ExtArgs>>): Prisma.Prisma__TokenTransactionClient<runtime.Types.Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TokenTransaction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenTransactionFindFirstOrThrowArgs} args - Arguments to find a TokenTransaction
   * @example
   * // Get one TokenTransaction
   * const tokenTransaction = await prisma.tokenTransaction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TokenTransactionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TokenTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TokenTransactionClient<runtime.Types.Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TokenTransactions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TokenTransactions
   * const tokenTransactions = await prisma.tokenTransaction.findMany()
   * 
   * // Get first 10 TokenTransactions
   * const tokenTransactions = await prisma.tokenTransaction.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tokenTransactionWithIdOnly = await prisma.tokenTransaction.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TokenTransactionFindManyArgs>(args?: Prisma.SelectSubset<T, TokenTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TokenTransaction.
   * @param {TokenTransactionCreateArgs} args - Arguments to create a TokenTransaction.
   * @example
   * // Create one TokenTransaction
   * const TokenTransaction = await prisma.tokenTransaction.create({
   *   data: {
   *     // ... data to create a TokenTransaction
   *   }
   * })
   * 
   */
  create<T extends TokenTransactionCreateArgs>(args: Prisma.SelectSubset<T, TokenTransactionCreateArgs<ExtArgs>>): Prisma.Prisma__TokenTransactionClient<runtime.Types.Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TokenTransactions.
   * @param {TokenTransactionCreateManyArgs} args - Arguments to create many TokenTransactions.
   * @example
   * // Create many TokenTransactions
   * const tokenTransaction = await prisma.tokenTransaction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TokenTransactionCreateManyArgs>(args?: Prisma.SelectSubset<T, TokenTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TokenTransactions and returns the data saved in the database.
   * @param {TokenTransactionCreateManyAndReturnArgs} args - Arguments to create many TokenTransactions.
   * @example
   * // Create many TokenTransactions
   * const tokenTransaction = await prisma.tokenTransaction.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TokenTransactions and only return the `id`
   * const tokenTransactionWithIdOnly = await prisma.tokenTransaction.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TokenTransactionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TokenTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TokenTransaction.
   * @param {TokenTransactionDeleteArgs} args - Arguments to delete one TokenTransaction.
   * @example
   * // Delete one TokenTransaction
   * const TokenTransaction = await prisma.tokenTransaction.delete({
   *   where: {
   *     // ... filter to delete one TokenTransaction
   *   }
   * })
   * 
   */
  delete<T extends TokenTransactionDeleteArgs>(args: Prisma.SelectSubset<T, TokenTransactionDeleteArgs<ExtArgs>>): Prisma.Prisma__TokenTransactionClient<runtime.Types.Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TokenTransaction.
   * @param {TokenTransactionUpdateArgs} args - Arguments to update one TokenTransaction.
   * @example
   * // Update one TokenTransaction
   * const tokenTransaction = await prisma.tokenTransaction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TokenTransactionUpdateArgs>(args: Prisma.SelectSubset<T, TokenTransactionUpdateArgs<ExtArgs>>): Prisma.Prisma__TokenTransactionClient<runtime.Types.Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TokenTransactions.
   * @param {TokenTransactionDeleteManyArgs} args - Arguments to filter TokenTransactions to delete.
   * @example
   * // Delete a few TokenTransactions
   * const { count } = await prisma.tokenTransaction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TokenTransactionDeleteManyArgs>(args?: Prisma.SelectSubset<T, TokenTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TokenTransactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenTransactionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TokenTransactions
   * const tokenTransaction = await prisma.tokenTransaction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TokenTransactionUpdateManyArgs>(args: Prisma.SelectSubset<T, TokenTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TokenTransactions and returns the data updated in the database.
   * @param {TokenTransactionUpdateManyAndReturnArgs} args - Arguments to update many TokenTransactions.
   * @example
   * // Update many TokenTransactions
   * const tokenTransaction = await prisma.tokenTransaction.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TokenTransactions and only return the `id`
   * const tokenTransactionWithIdOnly = await prisma.tokenTransaction.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TokenTransactionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TokenTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TokenTransaction.
   * @param {TokenTransactionUpsertArgs} args - Arguments to update or create a TokenTransaction.
   * @example
   * // Update or create a TokenTransaction
   * const tokenTransaction = await prisma.tokenTransaction.upsert({
   *   create: {
   *     // ... data to create a TokenTransaction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TokenTransaction we want to update
   *   }
   * })
   */
  upsert<T extends TokenTransactionUpsertArgs>(args: Prisma.SelectSubset<T, TokenTransactionUpsertArgs<ExtArgs>>): Prisma.Prisma__TokenTransactionClient<runtime.Types.Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TokenTransactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenTransactionCountArgs} args - Arguments to filter TokenTransactions to count.
   * @example
   * // Count the number of TokenTransactions
   * const count = await prisma.tokenTransaction.count({
   *   where: {
   *     // ... the filter for the TokenTransactions we want to count
   *   }
   * })
  **/
  count<T extends TokenTransactionCountArgs>(
    args?: Prisma.Subset<T, TokenTransactionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TokenTransactionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TokenTransaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TokenTransactionAggregateArgs>(args: Prisma.Subset<T, TokenTransactionAggregateArgs>): Prisma.PrismaPromise<GetTokenTransactionAggregateType<T>>

  /**
   * Group by TokenTransaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenTransactionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TokenTransactionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TokenTransactionGroupByArgs['orderBy'] }
      : { orderBy?: TokenTransactionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TokenTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TokenTransaction model
 */
readonly fields: TokenTransactionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TokenTransaction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TokenTransactionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  business<T extends Prisma.BusinessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BusinessDefaultArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  reOwnedProduct<T extends Prisma.TokenTransaction$reOwnedProductArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TokenTransaction$reOwnedProductArgs<ExtArgs>>): Prisma.Prisma__ReOwnedProductClient<runtime.Types.Result.GetResult<Prisma.$ReOwnedProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TokenTransaction model
 */
export interface TokenTransactionFieldRefs {
  readonly id: Prisma.FieldRef<"TokenTransaction", 'String'>
  readonly businessId: Prisma.FieldRef<"TokenTransaction", 'String'>
  readonly reOwnedProductId: Prisma.FieldRef<"TokenTransaction", 'String'>
  readonly amount: Prisma.FieldRef<"TokenTransaction", 'Float'>
  readonly type: Prisma.FieldRef<"TokenTransaction", 'String'>
  readonly createdAt: Prisma.FieldRef<"TokenTransaction", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TokenTransaction findUnique
 */
export type TokenTransactionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TokenTransaction
   */
  select?: Prisma.TokenTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TokenTransaction
   */
  omit?: Prisma.TokenTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TokenTransactionInclude<ExtArgs> | null
  /**
   * Filter, which TokenTransaction to fetch.
   */
  where: Prisma.TokenTransactionWhereUniqueInput
}

/**
 * TokenTransaction findUniqueOrThrow
 */
export type TokenTransactionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TokenTransaction
   */
  select?: Prisma.TokenTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TokenTransaction
   */
  omit?: Prisma.TokenTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TokenTransactionInclude<ExtArgs> | null
  /**
   * Filter, which TokenTransaction to fetch.
   */
  where: Prisma.TokenTransactionWhereUniqueInput
}

/**
 * TokenTransaction findFirst
 */
export type TokenTransactionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TokenTransaction
   */
  select?: Prisma.TokenTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TokenTransaction
   */
  omit?: Prisma.TokenTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TokenTransactionInclude<ExtArgs> | null
  /**
   * Filter, which TokenTransaction to fetch.
   */
  where?: Prisma.TokenTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TokenTransactions to fetch.
   */
  orderBy?: Prisma.TokenTransactionOrderByWithRelationInput | Prisma.TokenTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TokenTransactions.
   */
  cursor?: Prisma.TokenTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TokenTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TokenTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TokenTransactions.
   */
  distinct?: Prisma.TokenTransactionScalarFieldEnum | Prisma.TokenTransactionScalarFieldEnum[]
}

/**
 * TokenTransaction findFirstOrThrow
 */
export type TokenTransactionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TokenTransaction
   */
  select?: Prisma.TokenTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TokenTransaction
   */
  omit?: Prisma.TokenTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TokenTransactionInclude<ExtArgs> | null
  /**
   * Filter, which TokenTransaction to fetch.
   */
  where?: Prisma.TokenTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TokenTransactions to fetch.
   */
  orderBy?: Prisma.TokenTransactionOrderByWithRelationInput | Prisma.TokenTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TokenTransactions.
   */
  cursor?: Prisma.TokenTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TokenTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TokenTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TokenTransactions.
   */
  distinct?: Prisma.TokenTransactionScalarFieldEnum | Prisma.TokenTransactionScalarFieldEnum[]
}

/**
 * TokenTransaction findMany
 */
export type TokenTransactionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TokenTransaction
   */
  select?: Prisma.TokenTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TokenTransaction
   */
  omit?: Prisma.TokenTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TokenTransactionInclude<ExtArgs> | null
  /**
   * Filter, which TokenTransactions to fetch.
   */
  where?: Prisma.TokenTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TokenTransactions to fetch.
   */
  orderBy?: Prisma.TokenTransactionOrderByWithRelationInput | Prisma.TokenTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TokenTransactions.
   */
  cursor?: Prisma.TokenTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TokenTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TokenTransactions.
   */
  skip?: number
  distinct?: Prisma.TokenTransactionScalarFieldEnum | Prisma.TokenTransactionScalarFieldEnum[]
}

/**
 * TokenTransaction create
 */
export type TokenTransactionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TokenTransaction
   */
  select?: Prisma.TokenTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TokenTransaction
   */
  omit?: Prisma.TokenTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TokenTransactionInclude<ExtArgs> | null
  /**
   * The data needed to create a TokenTransaction.
   */
  data: Prisma.XOR<Prisma.TokenTransactionCreateInput, Prisma.TokenTransactionUncheckedCreateInput>
}

/**
 * TokenTransaction createMany
 */
export type TokenTransactionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TokenTransactions.
   */
  data: Prisma.TokenTransactionCreateManyInput | Prisma.TokenTransactionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TokenTransaction createManyAndReturn
 */
export type TokenTransactionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TokenTransaction
   */
  select?: Prisma.TokenTransactionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TokenTransaction
   */
  omit?: Prisma.TokenTransactionOmit<ExtArgs> | null
  /**
   * The data used to create many TokenTransactions.
   */
  data: Prisma.TokenTransactionCreateManyInput | Prisma.TokenTransactionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TokenTransactionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TokenTransaction update
 */
export type TokenTransactionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TokenTransaction
   */
  select?: Prisma.TokenTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TokenTransaction
   */
  omit?: Prisma.TokenTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TokenTransactionInclude<ExtArgs> | null
  /**
   * The data needed to update a TokenTransaction.
   */
  data: Prisma.XOR<Prisma.TokenTransactionUpdateInput, Prisma.TokenTransactionUncheckedUpdateInput>
  /**
   * Choose, which TokenTransaction to update.
   */
  where: Prisma.TokenTransactionWhereUniqueInput
}

/**
 * TokenTransaction updateMany
 */
export type TokenTransactionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TokenTransactions.
   */
  data: Prisma.XOR<Prisma.TokenTransactionUpdateManyMutationInput, Prisma.TokenTransactionUncheckedUpdateManyInput>
  /**
   * Filter which TokenTransactions to update
   */
  where?: Prisma.TokenTransactionWhereInput
  /**
   * Limit how many TokenTransactions to update.
   */
  limit?: number
}

/**
 * TokenTransaction updateManyAndReturn
 */
export type TokenTransactionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TokenTransaction
   */
  select?: Prisma.TokenTransactionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TokenTransaction
   */
  omit?: Prisma.TokenTransactionOmit<ExtArgs> | null
  /**
   * The data used to update TokenTransactions.
   */
  data: Prisma.XOR<Prisma.TokenTransactionUpdateManyMutationInput, Prisma.TokenTransactionUncheckedUpdateManyInput>
  /**
   * Filter which TokenTransactions to update
   */
  where?: Prisma.TokenTransactionWhereInput
  /**
   * Limit how many TokenTransactions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TokenTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TokenTransaction upsert
 */
export type TokenTransactionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TokenTransaction
   */
  select?: Prisma.TokenTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TokenTransaction
   */
  omit?: Prisma.TokenTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TokenTransactionInclude<ExtArgs> | null
  /**
   * The filter to search for the TokenTransaction to update in case it exists.
   */
  where: Prisma.TokenTransactionWhereUniqueInput
  /**
   * In case the TokenTransaction found by the `where` argument doesn't exist, create a new TokenTransaction with this data.
   */
  create: Prisma.XOR<Prisma.TokenTransactionCreateInput, Prisma.TokenTransactionUncheckedCreateInput>
  /**
   * In case the TokenTransaction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TokenTransactionUpdateInput, Prisma.TokenTransactionUncheckedUpdateInput>
}

/**
 * TokenTransaction delete
 */
export type TokenTransactionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TokenTransaction
   */
  select?: Prisma.TokenTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TokenTransaction
   */
  omit?: Prisma.TokenTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TokenTransactionInclude<ExtArgs> | null
  /**
   * Filter which TokenTransaction to delete.
   */
  where: Prisma.TokenTransactionWhereUniqueInput
}

/**
 * TokenTransaction deleteMany
 */
export type TokenTransactionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TokenTransactions to delete
   */
  where?: Prisma.TokenTransactionWhereInput
  /**
   * Limit how many TokenTransactions to delete.
   */
  limit?: number
}

/**
 * TokenTransaction.reOwnedProduct
 */
export type TokenTransaction$reOwnedProductArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReOwnedProduct
   */
  select?: Prisma.ReOwnedProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReOwnedProduct
   */
  omit?: Prisma.ReOwnedProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReOwnedProductInclude<ExtArgs> | null
  where?: Prisma.ReOwnedProductWhereInput
}

/**
 * TokenTransaction without action
 */
export type TokenTransactionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TokenTransaction
   */
  select?: Prisma.TokenTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TokenTransaction
   */
  omit?: Prisma.TokenTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TokenTransactionInclude<ExtArgs> | null
}
