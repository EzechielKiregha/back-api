
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Shift` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Shift
 * 
 */
export type ShiftModel = runtime.Types.Result.DefaultSelection<Prisma.$ShiftPayload>

export type AggregateShift = {
  _count: ShiftCountAggregateOutputType | null
  _avg: ShiftAvgAggregateOutputType | null
  _sum: ShiftSumAggregateOutputType | null
  _min: ShiftMinAggregateOutputType | null
  _max: ShiftMaxAggregateOutputType | null
}

export type ShiftAvgAggregateOutputType = {
  sales: number | null
}

export type ShiftSumAggregateOutputType = {
  sales: number | null
}

export type ShiftMinAggregateOutputType = {
  id: string | null
  workerId: string | null
  storeId: string | null
  startTime: Date | null
  endTime: Date | null
  sales: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ShiftMaxAggregateOutputType = {
  id: string | null
  workerId: string | null
  storeId: string | null
  startTime: Date | null
  endTime: Date | null
  sales: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ShiftCountAggregateOutputType = {
  id: number
  workerId: number
  storeId: number
  startTime: number
  endTime: number
  sales: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ShiftAvgAggregateInputType = {
  sales?: true
}

export type ShiftSumAggregateInputType = {
  sales?: true
}

export type ShiftMinAggregateInputType = {
  id?: true
  workerId?: true
  storeId?: true
  startTime?: true
  endTime?: true
  sales?: true
  createdAt?: true
  updatedAt?: true
}

export type ShiftMaxAggregateInputType = {
  id?: true
  workerId?: true
  storeId?: true
  startTime?: true
  endTime?: true
  sales?: true
  createdAt?: true
  updatedAt?: true
}

export type ShiftCountAggregateInputType = {
  id?: true
  workerId?: true
  storeId?: true
  startTime?: true
  endTime?: true
  sales?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ShiftAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Shift to aggregate.
   */
  where?: Prisma.ShiftWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shifts to fetch.
   */
  orderBy?: Prisma.ShiftOrderByWithRelationInput | Prisma.ShiftOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ShiftWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shifts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shifts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Shifts
  **/
  _count?: true | ShiftCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ShiftAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ShiftSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ShiftMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ShiftMaxAggregateInputType
}

export type GetShiftAggregateType<T extends ShiftAggregateArgs> = {
      [P in keyof T & keyof AggregateShift]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateShift[P]>
    : Prisma.GetScalarType<T[P], AggregateShift[P]>
}




export type ShiftGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ShiftWhereInput
  orderBy?: Prisma.ShiftOrderByWithAggregationInput | Prisma.ShiftOrderByWithAggregationInput[]
  by: Prisma.ShiftScalarFieldEnum[] | Prisma.ShiftScalarFieldEnum
  having?: Prisma.ShiftScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ShiftCountAggregateInputType | true
  _avg?: ShiftAvgAggregateInputType
  _sum?: ShiftSumAggregateInputType
  _min?: ShiftMinAggregateInputType
  _max?: ShiftMaxAggregateInputType
}

export type ShiftGroupByOutputType = {
  id: string
  workerId: string
  storeId: string
  startTime: Date
  endTime: Date | null
  sales: number
  createdAt: Date
  updatedAt: Date
  _count: ShiftCountAggregateOutputType | null
  _avg: ShiftAvgAggregateOutputType | null
  _sum: ShiftSumAggregateOutputType | null
  _min: ShiftMinAggregateOutputType | null
  _max: ShiftMaxAggregateOutputType | null
}

type GetShiftGroupByPayload<T extends ShiftGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ShiftGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ShiftGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ShiftGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ShiftGroupByOutputType[P]>
      }
    >
  > 



export type ShiftWhereInput = {
  AND?: Prisma.ShiftWhereInput | Prisma.ShiftWhereInput[]
  OR?: Prisma.ShiftWhereInput[]
  NOT?: Prisma.ShiftWhereInput | Prisma.ShiftWhereInput[]
  id?: Prisma.StringFilter<"Shift"> | string
  workerId?: Prisma.StringFilter<"Shift"> | string
  storeId?: Prisma.StringFilter<"Shift"> | string
  startTime?: Prisma.DateTimeFilter<"Shift"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"Shift"> | Date | string | null
  sales?: Prisma.FloatFilter<"Shift"> | number
  createdAt?: Prisma.DateTimeFilter<"Shift"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Shift"> | Date | string
  worker?: Prisma.XOR<Prisma.WorkerScalarRelationFilter, Prisma.WorkerWhereInput>
  store?: Prisma.XOR<Prisma.StoreScalarRelationFilter, Prisma.StoreWhereInput>
}

export type ShiftOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder
  sales?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  worker?: Prisma.WorkerOrderByWithRelationInput
  store?: Prisma.StoreOrderByWithRelationInput
}

export type ShiftWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ShiftWhereInput | Prisma.ShiftWhereInput[]
  OR?: Prisma.ShiftWhereInput[]
  NOT?: Prisma.ShiftWhereInput | Prisma.ShiftWhereInput[]
  workerId?: Prisma.StringFilter<"Shift"> | string
  storeId?: Prisma.StringFilter<"Shift"> | string
  startTime?: Prisma.DateTimeFilter<"Shift"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"Shift"> | Date | string | null
  sales?: Prisma.FloatFilter<"Shift"> | number
  createdAt?: Prisma.DateTimeFilter<"Shift"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Shift"> | Date | string
  worker?: Prisma.XOR<Prisma.WorkerScalarRelationFilter, Prisma.WorkerWhereInput>
  store?: Prisma.XOR<Prisma.StoreScalarRelationFilter, Prisma.StoreWhereInput>
}, "id">

export type ShiftOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder
  sales?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ShiftCountOrderByAggregateInput
  _avg?: Prisma.ShiftAvgOrderByAggregateInput
  _max?: Prisma.ShiftMaxOrderByAggregateInput
  _min?: Prisma.ShiftMinOrderByAggregateInput
  _sum?: Prisma.ShiftSumOrderByAggregateInput
}

export type ShiftScalarWhereWithAggregatesInput = {
  AND?: Prisma.ShiftScalarWhereWithAggregatesInput | Prisma.ShiftScalarWhereWithAggregatesInput[]
  OR?: Prisma.ShiftScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ShiftScalarWhereWithAggregatesInput | Prisma.ShiftScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Shift"> | string
  workerId?: Prisma.StringWithAggregatesFilter<"Shift"> | string
  storeId?: Prisma.StringWithAggregatesFilter<"Shift"> | string
  startTime?: Prisma.DateTimeWithAggregatesFilter<"Shift"> | Date | string
  endTime?: Prisma.DateTimeNullableWithAggregatesFilter<"Shift"> | Date | string | null
  sales?: Prisma.FloatWithAggregatesFilter<"Shift"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Shift"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Shift"> | Date | string
}

export type ShiftCreateInput = {
  id?: string
  startTime: Date | string
  endTime?: Date | string | null
  sales?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  worker: Prisma.WorkerCreateNestedOneWithoutShiftsInput
  store: Prisma.StoreCreateNestedOneWithoutShiftsInput
}

export type ShiftUncheckedCreateInput = {
  id?: string
  workerId: string
  storeId: string
  startTime: Date | string
  endTime?: Date | string | null
  sales?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ShiftUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  worker?: Prisma.WorkerUpdateOneRequiredWithoutShiftsNestedInput
  store?: Prisma.StoreUpdateOneRequiredWithoutShiftsNestedInput
}

export type ShiftUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  workerId?: Prisma.StringFieldUpdateOperationsInput | string
  storeId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShiftCreateManyInput = {
  id?: string
  workerId: string
  storeId: string
  startTime: Date | string
  endTime?: Date | string | null
  sales?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ShiftUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShiftUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  workerId?: Prisma.StringFieldUpdateOperationsInput | string
  storeId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShiftListRelationFilter = {
  every?: Prisma.ShiftWhereInput
  some?: Prisma.ShiftWhereInput
  none?: Prisma.ShiftWhereInput
}

export type ShiftOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ShiftCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  sales?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ShiftAvgOrderByAggregateInput = {
  sales?: Prisma.SortOrder
}

export type ShiftMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  sales?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ShiftMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  storeId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  sales?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ShiftSumOrderByAggregateInput = {
  sales?: Prisma.SortOrder
}

export type ShiftCreateNestedManyWithoutWorkerInput = {
  create?: Prisma.XOR<Prisma.ShiftCreateWithoutWorkerInput, Prisma.ShiftUncheckedCreateWithoutWorkerInput> | Prisma.ShiftCreateWithoutWorkerInput[] | Prisma.ShiftUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.ShiftCreateOrConnectWithoutWorkerInput | Prisma.ShiftCreateOrConnectWithoutWorkerInput[]
  createMany?: Prisma.ShiftCreateManyWorkerInputEnvelope
  connect?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
}

export type ShiftUncheckedCreateNestedManyWithoutWorkerInput = {
  create?: Prisma.XOR<Prisma.ShiftCreateWithoutWorkerInput, Prisma.ShiftUncheckedCreateWithoutWorkerInput> | Prisma.ShiftCreateWithoutWorkerInput[] | Prisma.ShiftUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.ShiftCreateOrConnectWithoutWorkerInput | Prisma.ShiftCreateOrConnectWithoutWorkerInput[]
  createMany?: Prisma.ShiftCreateManyWorkerInputEnvelope
  connect?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
}

export type ShiftUpdateManyWithoutWorkerNestedInput = {
  create?: Prisma.XOR<Prisma.ShiftCreateWithoutWorkerInput, Prisma.ShiftUncheckedCreateWithoutWorkerInput> | Prisma.ShiftCreateWithoutWorkerInput[] | Prisma.ShiftUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.ShiftCreateOrConnectWithoutWorkerInput | Prisma.ShiftCreateOrConnectWithoutWorkerInput[]
  upsert?: Prisma.ShiftUpsertWithWhereUniqueWithoutWorkerInput | Prisma.ShiftUpsertWithWhereUniqueWithoutWorkerInput[]
  createMany?: Prisma.ShiftCreateManyWorkerInputEnvelope
  set?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  disconnect?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  delete?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  connect?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  update?: Prisma.ShiftUpdateWithWhereUniqueWithoutWorkerInput | Prisma.ShiftUpdateWithWhereUniqueWithoutWorkerInput[]
  updateMany?: Prisma.ShiftUpdateManyWithWhereWithoutWorkerInput | Prisma.ShiftUpdateManyWithWhereWithoutWorkerInput[]
  deleteMany?: Prisma.ShiftScalarWhereInput | Prisma.ShiftScalarWhereInput[]
}

export type ShiftUncheckedUpdateManyWithoutWorkerNestedInput = {
  create?: Prisma.XOR<Prisma.ShiftCreateWithoutWorkerInput, Prisma.ShiftUncheckedCreateWithoutWorkerInput> | Prisma.ShiftCreateWithoutWorkerInput[] | Prisma.ShiftUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.ShiftCreateOrConnectWithoutWorkerInput | Prisma.ShiftCreateOrConnectWithoutWorkerInput[]
  upsert?: Prisma.ShiftUpsertWithWhereUniqueWithoutWorkerInput | Prisma.ShiftUpsertWithWhereUniqueWithoutWorkerInput[]
  createMany?: Prisma.ShiftCreateManyWorkerInputEnvelope
  set?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  disconnect?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  delete?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  connect?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  update?: Prisma.ShiftUpdateWithWhereUniqueWithoutWorkerInput | Prisma.ShiftUpdateWithWhereUniqueWithoutWorkerInput[]
  updateMany?: Prisma.ShiftUpdateManyWithWhereWithoutWorkerInput | Prisma.ShiftUpdateManyWithWhereWithoutWorkerInput[]
  deleteMany?: Prisma.ShiftScalarWhereInput | Prisma.ShiftScalarWhereInput[]
}

export type ShiftCreateNestedManyWithoutStoreInput = {
  create?: Prisma.XOR<Prisma.ShiftCreateWithoutStoreInput, Prisma.ShiftUncheckedCreateWithoutStoreInput> | Prisma.ShiftCreateWithoutStoreInput[] | Prisma.ShiftUncheckedCreateWithoutStoreInput[]
  connectOrCreate?: Prisma.ShiftCreateOrConnectWithoutStoreInput | Prisma.ShiftCreateOrConnectWithoutStoreInput[]
  createMany?: Prisma.ShiftCreateManyStoreInputEnvelope
  connect?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
}

export type ShiftUncheckedCreateNestedManyWithoutStoreInput = {
  create?: Prisma.XOR<Prisma.ShiftCreateWithoutStoreInput, Prisma.ShiftUncheckedCreateWithoutStoreInput> | Prisma.ShiftCreateWithoutStoreInput[] | Prisma.ShiftUncheckedCreateWithoutStoreInput[]
  connectOrCreate?: Prisma.ShiftCreateOrConnectWithoutStoreInput | Prisma.ShiftCreateOrConnectWithoutStoreInput[]
  createMany?: Prisma.ShiftCreateManyStoreInputEnvelope
  connect?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
}

export type ShiftUpdateManyWithoutStoreNestedInput = {
  create?: Prisma.XOR<Prisma.ShiftCreateWithoutStoreInput, Prisma.ShiftUncheckedCreateWithoutStoreInput> | Prisma.ShiftCreateWithoutStoreInput[] | Prisma.ShiftUncheckedCreateWithoutStoreInput[]
  connectOrCreate?: Prisma.ShiftCreateOrConnectWithoutStoreInput | Prisma.ShiftCreateOrConnectWithoutStoreInput[]
  upsert?: Prisma.ShiftUpsertWithWhereUniqueWithoutStoreInput | Prisma.ShiftUpsertWithWhereUniqueWithoutStoreInput[]
  createMany?: Prisma.ShiftCreateManyStoreInputEnvelope
  set?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  disconnect?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  delete?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  connect?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  update?: Prisma.ShiftUpdateWithWhereUniqueWithoutStoreInput | Prisma.ShiftUpdateWithWhereUniqueWithoutStoreInput[]
  updateMany?: Prisma.ShiftUpdateManyWithWhereWithoutStoreInput | Prisma.ShiftUpdateManyWithWhereWithoutStoreInput[]
  deleteMany?: Prisma.ShiftScalarWhereInput | Prisma.ShiftScalarWhereInput[]
}

export type ShiftUncheckedUpdateManyWithoutStoreNestedInput = {
  create?: Prisma.XOR<Prisma.ShiftCreateWithoutStoreInput, Prisma.ShiftUncheckedCreateWithoutStoreInput> | Prisma.ShiftCreateWithoutStoreInput[] | Prisma.ShiftUncheckedCreateWithoutStoreInput[]
  connectOrCreate?: Prisma.ShiftCreateOrConnectWithoutStoreInput | Prisma.ShiftCreateOrConnectWithoutStoreInput[]
  upsert?: Prisma.ShiftUpsertWithWhereUniqueWithoutStoreInput | Prisma.ShiftUpsertWithWhereUniqueWithoutStoreInput[]
  createMany?: Prisma.ShiftCreateManyStoreInputEnvelope
  set?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  disconnect?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  delete?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  connect?: Prisma.ShiftWhereUniqueInput | Prisma.ShiftWhereUniqueInput[]
  update?: Prisma.ShiftUpdateWithWhereUniqueWithoutStoreInput | Prisma.ShiftUpdateWithWhereUniqueWithoutStoreInput[]
  updateMany?: Prisma.ShiftUpdateManyWithWhereWithoutStoreInput | Prisma.ShiftUpdateManyWithWhereWithoutStoreInput[]
  deleteMany?: Prisma.ShiftScalarWhereInput | Prisma.ShiftScalarWhereInput[]
}

export type ShiftCreateWithoutWorkerInput = {
  id?: string
  startTime: Date | string
  endTime?: Date | string | null
  sales?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  store: Prisma.StoreCreateNestedOneWithoutShiftsInput
}

export type ShiftUncheckedCreateWithoutWorkerInput = {
  id?: string
  storeId: string
  startTime: Date | string
  endTime?: Date | string | null
  sales?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ShiftCreateOrConnectWithoutWorkerInput = {
  where: Prisma.ShiftWhereUniqueInput
  create: Prisma.XOR<Prisma.ShiftCreateWithoutWorkerInput, Prisma.ShiftUncheckedCreateWithoutWorkerInput>
}

export type ShiftCreateManyWorkerInputEnvelope = {
  data: Prisma.ShiftCreateManyWorkerInput | Prisma.ShiftCreateManyWorkerInput[]
  skipDuplicates?: boolean
}

export type ShiftUpsertWithWhereUniqueWithoutWorkerInput = {
  where: Prisma.ShiftWhereUniqueInput
  update: Prisma.XOR<Prisma.ShiftUpdateWithoutWorkerInput, Prisma.ShiftUncheckedUpdateWithoutWorkerInput>
  create: Prisma.XOR<Prisma.ShiftCreateWithoutWorkerInput, Prisma.ShiftUncheckedCreateWithoutWorkerInput>
}

export type ShiftUpdateWithWhereUniqueWithoutWorkerInput = {
  where: Prisma.ShiftWhereUniqueInput
  data: Prisma.XOR<Prisma.ShiftUpdateWithoutWorkerInput, Prisma.ShiftUncheckedUpdateWithoutWorkerInput>
}

export type ShiftUpdateManyWithWhereWithoutWorkerInput = {
  where: Prisma.ShiftScalarWhereInput
  data: Prisma.XOR<Prisma.ShiftUpdateManyMutationInput, Prisma.ShiftUncheckedUpdateManyWithoutWorkerInput>
}

export type ShiftScalarWhereInput = {
  AND?: Prisma.ShiftScalarWhereInput | Prisma.ShiftScalarWhereInput[]
  OR?: Prisma.ShiftScalarWhereInput[]
  NOT?: Prisma.ShiftScalarWhereInput | Prisma.ShiftScalarWhereInput[]
  id?: Prisma.StringFilter<"Shift"> | string
  workerId?: Prisma.StringFilter<"Shift"> | string
  storeId?: Prisma.StringFilter<"Shift"> | string
  startTime?: Prisma.DateTimeFilter<"Shift"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"Shift"> | Date | string | null
  sales?: Prisma.FloatFilter<"Shift"> | number
  createdAt?: Prisma.DateTimeFilter<"Shift"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Shift"> | Date | string
}

export type ShiftCreateWithoutStoreInput = {
  id?: string
  startTime: Date | string
  endTime?: Date | string | null
  sales?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  worker: Prisma.WorkerCreateNestedOneWithoutShiftsInput
}

export type ShiftUncheckedCreateWithoutStoreInput = {
  id?: string
  workerId: string
  startTime: Date | string
  endTime?: Date | string | null
  sales?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ShiftCreateOrConnectWithoutStoreInput = {
  where: Prisma.ShiftWhereUniqueInput
  create: Prisma.XOR<Prisma.ShiftCreateWithoutStoreInput, Prisma.ShiftUncheckedCreateWithoutStoreInput>
}

export type ShiftCreateManyStoreInputEnvelope = {
  data: Prisma.ShiftCreateManyStoreInput | Prisma.ShiftCreateManyStoreInput[]
  skipDuplicates?: boolean
}

export type ShiftUpsertWithWhereUniqueWithoutStoreInput = {
  where: Prisma.ShiftWhereUniqueInput
  update: Prisma.XOR<Prisma.ShiftUpdateWithoutStoreInput, Prisma.ShiftUncheckedUpdateWithoutStoreInput>
  create: Prisma.XOR<Prisma.ShiftCreateWithoutStoreInput, Prisma.ShiftUncheckedCreateWithoutStoreInput>
}

export type ShiftUpdateWithWhereUniqueWithoutStoreInput = {
  where: Prisma.ShiftWhereUniqueInput
  data: Prisma.XOR<Prisma.ShiftUpdateWithoutStoreInput, Prisma.ShiftUncheckedUpdateWithoutStoreInput>
}

export type ShiftUpdateManyWithWhereWithoutStoreInput = {
  where: Prisma.ShiftScalarWhereInput
  data: Prisma.XOR<Prisma.ShiftUpdateManyMutationInput, Prisma.ShiftUncheckedUpdateManyWithoutStoreInput>
}

export type ShiftCreateManyWorkerInput = {
  id?: string
  storeId: string
  startTime: Date | string
  endTime?: Date | string | null
  sales?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ShiftUpdateWithoutWorkerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  store?: Prisma.StoreUpdateOneRequiredWithoutShiftsNestedInput
}

export type ShiftUncheckedUpdateWithoutWorkerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  storeId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShiftUncheckedUpdateManyWithoutWorkerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  storeId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShiftCreateManyStoreInput = {
  id?: string
  workerId: string
  startTime: Date | string
  endTime?: Date | string | null
  sales?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ShiftUpdateWithoutStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  worker?: Prisma.WorkerUpdateOneRequiredWithoutShiftsNestedInput
}

export type ShiftUncheckedUpdateWithoutStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  workerId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ShiftUncheckedUpdateManyWithoutStoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  workerId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ShiftSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  workerId?: boolean
  storeId?: boolean
  startTime?: boolean
  endTime?: boolean
  sales?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  worker?: boolean | Prisma.WorkerDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}, ExtArgs["result"]["shift"]>

export type ShiftSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  workerId?: boolean
  storeId?: boolean
  startTime?: boolean
  endTime?: boolean
  sales?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  worker?: boolean | Prisma.WorkerDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}, ExtArgs["result"]["shift"]>

export type ShiftSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  workerId?: boolean
  storeId?: boolean
  startTime?: boolean
  endTime?: boolean
  sales?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  worker?: boolean | Prisma.WorkerDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}, ExtArgs["result"]["shift"]>

export type ShiftSelectScalar = {
  id?: boolean
  workerId?: boolean
  storeId?: boolean
  startTime?: boolean
  endTime?: boolean
  sales?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ShiftOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "workerId" | "storeId" | "startTime" | "endTime" | "sales" | "createdAt" | "updatedAt", ExtArgs["result"]["shift"]>
export type ShiftInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  worker?: boolean | Prisma.WorkerDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}
export type ShiftIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  worker?: boolean | Prisma.WorkerDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}
export type ShiftIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  worker?: boolean | Prisma.WorkerDefaultArgs<ExtArgs>
  store?: boolean | Prisma.StoreDefaultArgs<ExtArgs>
}

export type $ShiftPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Shift"
  objects: {
    worker: Prisma.$WorkerPayload<ExtArgs>
    store: Prisma.$StorePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    workerId: string
    storeId: string
    startTime: Date
    endTime: Date | null
    sales: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["shift"]>
  composites: {}
}

export type ShiftGetPayload<S extends boolean | null | undefined | ShiftDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ShiftPayload, S>

export type ShiftCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ShiftFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ShiftCountAggregateInputType | true
  }

export interface ShiftDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shift'], meta: { name: 'Shift' } }
  /**
   * Find zero or one Shift that matches the filter.
   * @param {ShiftFindUniqueArgs} args - Arguments to find a Shift
   * @example
   * // Get one Shift
   * const shift = await prisma.shift.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ShiftFindUniqueArgs>(args: Prisma.SelectSubset<T, ShiftFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ShiftClient<runtime.Types.Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Shift that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ShiftFindUniqueOrThrowArgs} args - Arguments to find a Shift
   * @example
   * // Get one Shift
   * const shift = await prisma.shift.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ShiftFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ShiftFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShiftClient<runtime.Types.Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Shift that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShiftFindFirstArgs} args - Arguments to find a Shift
   * @example
   * // Get one Shift
   * const shift = await prisma.shift.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ShiftFindFirstArgs>(args?: Prisma.SelectSubset<T, ShiftFindFirstArgs<ExtArgs>>): Prisma.Prisma__ShiftClient<runtime.Types.Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Shift that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShiftFindFirstOrThrowArgs} args - Arguments to find a Shift
   * @example
   * // Get one Shift
   * const shift = await prisma.shift.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ShiftFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ShiftFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShiftClient<runtime.Types.Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Shifts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShiftFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Shifts
   * const shifts = await prisma.shift.findMany()
   * 
   * // Get first 10 Shifts
   * const shifts = await prisma.shift.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const shiftWithIdOnly = await prisma.shift.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ShiftFindManyArgs>(args?: Prisma.SelectSubset<T, ShiftFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Shift.
   * @param {ShiftCreateArgs} args - Arguments to create a Shift.
   * @example
   * // Create one Shift
   * const Shift = await prisma.shift.create({
   *   data: {
   *     // ... data to create a Shift
   *   }
   * })
   * 
   */
  create<T extends ShiftCreateArgs>(args: Prisma.SelectSubset<T, ShiftCreateArgs<ExtArgs>>): Prisma.Prisma__ShiftClient<runtime.Types.Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Shifts.
   * @param {ShiftCreateManyArgs} args - Arguments to create many Shifts.
   * @example
   * // Create many Shifts
   * const shift = await prisma.shift.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ShiftCreateManyArgs>(args?: Prisma.SelectSubset<T, ShiftCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Shifts and returns the data saved in the database.
   * @param {ShiftCreateManyAndReturnArgs} args - Arguments to create many Shifts.
   * @example
   * // Create many Shifts
   * const shift = await prisma.shift.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Shifts and only return the `id`
   * const shiftWithIdOnly = await prisma.shift.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ShiftCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ShiftCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Shift.
   * @param {ShiftDeleteArgs} args - Arguments to delete one Shift.
   * @example
   * // Delete one Shift
   * const Shift = await prisma.shift.delete({
   *   where: {
   *     // ... filter to delete one Shift
   *   }
   * })
   * 
   */
  delete<T extends ShiftDeleteArgs>(args: Prisma.SelectSubset<T, ShiftDeleteArgs<ExtArgs>>): Prisma.Prisma__ShiftClient<runtime.Types.Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Shift.
   * @param {ShiftUpdateArgs} args - Arguments to update one Shift.
   * @example
   * // Update one Shift
   * const shift = await prisma.shift.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ShiftUpdateArgs>(args: Prisma.SelectSubset<T, ShiftUpdateArgs<ExtArgs>>): Prisma.Prisma__ShiftClient<runtime.Types.Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Shifts.
   * @param {ShiftDeleteManyArgs} args - Arguments to filter Shifts to delete.
   * @example
   * // Delete a few Shifts
   * const { count } = await prisma.shift.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ShiftDeleteManyArgs>(args?: Prisma.SelectSubset<T, ShiftDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Shifts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShiftUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Shifts
   * const shift = await prisma.shift.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ShiftUpdateManyArgs>(args: Prisma.SelectSubset<T, ShiftUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Shifts and returns the data updated in the database.
   * @param {ShiftUpdateManyAndReturnArgs} args - Arguments to update many Shifts.
   * @example
   * // Update many Shifts
   * const shift = await prisma.shift.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Shifts and only return the `id`
   * const shiftWithIdOnly = await prisma.shift.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ShiftUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ShiftUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Shift.
   * @param {ShiftUpsertArgs} args - Arguments to update or create a Shift.
   * @example
   * // Update or create a Shift
   * const shift = await prisma.shift.upsert({
   *   create: {
   *     // ... data to create a Shift
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Shift we want to update
   *   }
   * })
   */
  upsert<T extends ShiftUpsertArgs>(args: Prisma.SelectSubset<T, ShiftUpsertArgs<ExtArgs>>): Prisma.Prisma__ShiftClient<runtime.Types.Result.GetResult<Prisma.$ShiftPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Shifts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShiftCountArgs} args - Arguments to filter Shifts to count.
   * @example
   * // Count the number of Shifts
   * const count = await prisma.shift.count({
   *   where: {
   *     // ... the filter for the Shifts we want to count
   *   }
   * })
  **/
  count<T extends ShiftCountArgs>(
    args?: Prisma.Subset<T, ShiftCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ShiftCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Shift.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShiftAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ShiftAggregateArgs>(args: Prisma.Subset<T, ShiftAggregateArgs>): Prisma.PrismaPromise<GetShiftAggregateType<T>>

  /**
   * Group by Shift.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShiftGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ShiftGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ShiftGroupByArgs['orderBy'] }
      : { orderBy?: ShiftGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ShiftGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShiftGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Shift model
 */
readonly fields: ShiftFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Shift.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ShiftClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  worker<T extends Prisma.WorkerDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkerDefaultArgs<ExtArgs>>): Prisma.Prisma__WorkerClient<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  store<T extends Prisma.StoreDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StoreDefaultArgs<ExtArgs>>): Prisma.Prisma__StoreClient<runtime.Types.Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Shift model
 */
export interface ShiftFieldRefs {
  readonly id: Prisma.FieldRef<"Shift", 'String'>
  readonly workerId: Prisma.FieldRef<"Shift", 'String'>
  readonly storeId: Prisma.FieldRef<"Shift", 'String'>
  readonly startTime: Prisma.FieldRef<"Shift", 'DateTime'>
  readonly endTime: Prisma.FieldRef<"Shift", 'DateTime'>
  readonly sales: Prisma.FieldRef<"Shift", 'Float'>
  readonly createdAt: Prisma.FieldRef<"Shift", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Shift", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Shift findUnique
 */
export type ShiftFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftInclude<ExtArgs> | null
  /**
   * Filter, which Shift to fetch.
   */
  where: Prisma.ShiftWhereUniqueInput
}

/**
 * Shift findUniqueOrThrow
 */
export type ShiftFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftInclude<ExtArgs> | null
  /**
   * Filter, which Shift to fetch.
   */
  where: Prisma.ShiftWhereUniqueInput
}

/**
 * Shift findFirst
 */
export type ShiftFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftInclude<ExtArgs> | null
  /**
   * Filter, which Shift to fetch.
   */
  where?: Prisma.ShiftWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shifts to fetch.
   */
  orderBy?: Prisma.ShiftOrderByWithRelationInput | Prisma.ShiftOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Shifts.
   */
  cursor?: Prisma.ShiftWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shifts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shifts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Shifts.
   */
  distinct?: Prisma.ShiftScalarFieldEnum | Prisma.ShiftScalarFieldEnum[]
}

/**
 * Shift findFirstOrThrow
 */
export type ShiftFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftInclude<ExtArgs> | null
  /**
   * Filter, which Shift to fetch.
   */
  where?: Prisma.ShiftWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shifts to fetch.
   */
  orderBy?: Prisma.ShiftOrderByWithRelationInput | Prisma.ShiftOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Shifts.
   */
  cursor?: Prisma.ShiftWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shifts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shifts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Shifts.
   */
  distinct?: Prisma.ShiftScalarFieldEnum | Prisma.ShiftScalarFieldEnum[]
}

/**
 * Shift findMany
 */
export type ShiftFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftInclude<ExtArgs> | null
  /**
   * Filter, which Shifts to fetch.
   */
  where?: Prisma.ShiftWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shifts to fetch.
   */
  orderBy?: Prisma.ShiftOrderByWithRelationInput | Prisma.ShiftOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Shifts.
   */
  cursor?: Prisma.ShiftWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shifts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shifts.
   */
  skip?: number
  distinct?: Prisma.ShiftScalarFieldEnum | Prisma.ShiftScalarFieldEnum[]
}

/**
 * Shift create
 */
export type ShiftCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftInclude<ExtArgs> | null
  /**
   * The data needed to create a Shift.
   */
  data: Prisma.XOR<Prisma.ShiftCreateInput, Prisma.ShiftUncheckedCreateInput>
}

/**
 * Shift createMany
 */
export type ShiftCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Shifts.
   */
  data: Prisma.ShiftCreateManyInput | Prisma.ShiftCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Shift createManyAndReturn
 */
export type ShiftCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * The data used to create many Shifts.
   */
  data: Prisma.ShiftCreateManyInput | Prisma.ShiftCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Shift update
 */
export type ShiftUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftInclude<ExtArgs> | null
  /**
   * The data needed to update a Shift.
   */
  data: Prisma.XOR<Prisma.ShiftUpdateInput, Prisma.ShiftUncheckedUpdateInput>
  /**
   * Choose, which Shift to update.
   */
  where: Prisma.ShiftWhereUniqueInput
}

/**
 * Shift updateMany
 */
export type ShiftUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Shifts.
   */
  data: Prisma.XOR<Prisma.ShiftUpdateManyMutationInput, Prisma.ShiftUncheckedUpdateManyInput>
  /**
   * Filter which Shifts to update
   */
  where?: Prisma.ShiftWhereInput
  /**
   * Limit how many Shifts to update.
   */
  limit?: number
}

/**
 * Shift updateManyAndReturn
 */
export type ShiftUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * The data used to update Shifts.
   */
  data: Prisma.XOR<Prisma.ShiftUpdateManyMutationInput, Prisma.ShiftUncheckedUpdateManyInput>
  /**
   * Filter which Shifts to update
   */
  where?: Prisma.ShiftWhereInput
  /**
   * Limit how many Shifts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Shift upsert
 */
export type ShiftUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftInclude<ExtArgs> | null
  /**
   * The filter to search for the Shift to update in case it exists.
   */
  where: Prisma.ShiftWhereUniqueInput
  /**
   * In case the Shift found by the `where` argument doesn't exist, create a new Shift with this data.
   */
  create: Prisma.XOR<Prisma.ShiftCreateInput, Prisma.ShiftUncheckedCreateInput>
  /**
   * In case the Shift was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ShiftUpdateInput, Prisma.ShiftUncheckedUpdateInput>
}

/**
 * Shift delete
 */
export type ShiftDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftInclude<ExtArgs> | null
  /**
   * Filter which Shift to delete.
   */
  where: Prisma.ShiftWhereUniqueInput
}

/**
 * Shift deleteMany
 */
export type ShiftDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Shifts to delete
   */
  where?: Prisma.ShiftWhereInput
  /**
   * Limit how many Shifts to delete.
   */
  limit?: number
}

/**
 * Shift without action
 */
export type ShiftDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shift
   */
  select?: Prisma.ShiftSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shift
   */
  omit?: Prisma.ShiftOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShiftInclude<ExtArgs> | null
}
