
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PostTransaction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PostTransaction
 * 
 */
export type PostTransactionModel = runtime.Types.Result.DefaultSelection<Prisma.$PostTransactionPayload>

export type AggregatePostTransaction = {
  _count: PostTransactionCountAggregateOutputType | null
  _avg: PostTransactionAvgAggregateOutputType | null
  _sum: PostTransactionSumAggregateOutputType | null
  _min: PostTransactionMinAggregateOutputType | null
  _max: PostTransactionMaxAggregateOutputType | null
}

export type PostTransactionAvgAggregateOutputType = {
  amount: number | null
}

export type PostTransactionSumAggregateOutputType = {
  amount: number | null
}

export type PostTransactionMinAggregateOutputType = {
  id: string | null
  postId: string | null
  clientId: string | null
  paymentTransactionId: string | null
  status: $Enums.PostTransactionStatus | null
  amount: number | null
  createdAt: Date | null
}

export type PostTransactionMaxAggregateOutputType = {
  id: string | null
  postId: string | null
  clientId: string | null
  paymentTransactionId: string | null
  status: $Enums.PostTransactionStatus | null
  amount: number | null
  createdAt: Date | null
}

export type PostTransactionCountAggregateOutputType = {
  id: number
  postId: number
  clientId: number
  paymentTransactionId: number
  status: number
  amount: number
  createdAt: number
  _all: number
}


export type PostTransactionAvgAggregateInputType = {
  amount?: true
}

export type PostTransactionSumAggregateInputType = {
  amount?: true
}

export type PostTransactionMinAggregateInputType = {
  id?: true
  postId?: true
  clientId?: true
  paymentTransactionId?: true
  status?: true
  amount?: true
  createdAt?: true
}

export type PostTransactionMaxAggregateInputType = {
  id?: true
  postId?: true
  clientId?: true
  paymentTransactionId?: true
  status?: true
  amount?: true
  createdAt?: true
}

export type PostTransactionCountAggregateInputType = {
  id?: true
  postId?: true
  clientId?: true
  paymentTransactionId?: true
  status?: true
  amount?: true
  createdAt?: true
  _all?: true
}

export type PostTransactionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PostTransaction to aggregate.
   */
  where?: Prisma.PostTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostTransactions to fetch.
   */
  orderBy?: Prisma.PostTransactionOrderByWithRelationInput | Prisma.PostTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PostTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PostTransactions
  **/
  _count?: true | PostTransactionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PostTransactionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PostTransactionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PostTransactionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PostTransactionMaxAggregateInputType
}

export type GetPostTransactionAggregateType<T extends PostTransactionAggregateArgs> = {
      [P in keyof T & keyof AggregatePostTransaction]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePostTransaction[P]>
    : Prisma.GetScalarType<T[P], AggregatePostTransaction[P]>
}




export type PostTransactionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PostTransactionWhereInput
  orderBy?: Prisma.PostTransactionOrderByWithAggregationInput | Prisma.PostTransactionOrderByWithAggregationInput[]
  by: Prisma.PostTransactionScalarFieldEnum[] | Prisma.PostTransactionScalarFieldEnum
  having?: Prisma.PostTransactionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PostTransactionCountAggregateInputType | true
  _avg?: PostTransactionAvgAggregateInputType
  _sum?: PostTransactionSumAggregateInputType
  _min?: PostTransactionMinAggregateInputType
  _max?: PostTransactionMaxAggregateInputType
}

export type PostTransactionGroupByOutputType = {
  id: string
  postId: string
  clientId: string
  paymentTransactionId: string | null
  status: $Enums.PostTransactionStatus
  amount: number
  createdAt: Date
  _count: PostTransactionCountAggregateOutputType | null
  _avg: PostTransactionAvgAggregateOutputType | null
  _sum: PostTransactionSumAggregateOutputType | null
  _min: PostTransactionMinAggregateOutputType | null
  _max: PostTransactionMaxAggregateOutputType | null
}

type GetPostTransactionGroupByPayload<T extends PostTransactionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PostTransactionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PostTransactionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PostTransactionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PostTransactionGroupByOutputType[P]>
      }
    >
  > 



export type PostTransactionWhereInput = {
  AND?: Prisma.PostTransactionWhereInput | Prisma.PostTransactionWhereInput[]
  OR?: Prisma.PostTransactionWhereInput[]
  NOT?: Prisma.PostTransactionWhereInput | Prisma.PostTransactionWhereInput[]
  id?: Prisma.StringFilter<"PostTransaction"> | string
  postId?: Prisma.StringFilter<"PostTransaction"> | string
  clientId?: Prisma.StringFilter<"PostTransaction"> | string
  paymentTransactionId?: Prisma.StringNullableFilter<"PostTransaction"> | string | null
  status?: Prisma.EnumPostTransactionStatusFilter<"PostTransaction"> | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFilter<"PostTransaction"> | number
  createdAt?: Prisma.DateTimeFilter<"PostTransaction"> | Date | string
  post?: Prisma.XOR<Prisma.PostOfSaleScalarRelationFilter, Prisma.PostOfSaleWhereInput>
  client?: Prisma.XOR<Prisma.ClientScalarRelationFilter, Prisma.ClientWhereInput>
  paymentTransaction?: Prisma.XOR<Prisma.PaymentTransactionNullableScalarRelationFilter, Prisma.PaymentTransactionWhereInput> | null
}

export type PostTransactionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  postId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  paymentTransactionId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  post?: Prisma.PostOfSaleOrderByWithRelationInput
  client?: Prisma.ClientOrderByWithRelationInput
  paymentTransaction?: Prisma.PaymentTransactionOrderByWithRelationInput
}

export type PostTransactionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PostTransactionWhereInput | Prisma.PostTransactionWhereInput[]
  OR?: Prisma.PostTransactionWhereInput[]
  NOT?: Prisma.PostTransactionWhereInput | Prisma.PostTransactionWhereInput[]
  postId?: Prisma.StringFilter<"PostTransaction"> | string
  clientId?: Prisma.StringFilter<"PostTransaction"> | string
  paymentTransactionId?: Prisma.StringNullableFilter<"PostTransaction"> | string | null
  status?: Prisma.EnumPostTransactionStatusFilter<"PostTransaction"> | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFilter<"PostTransaction"> | number
  createdAt?: Prisma.DateTimeFilter<"PostTransaction"> | Date | string
  post?: Prisma.XOR<Prisma.PostOfSaleScalarRelationFilter, Prisma.PostOfSaleWhereInput>
  client?: Prisma.XOR<Prisma.ClientScalarRelationFilter, Prisma.ClientWhereInput>
  paymentTransaction?: Prisma.XOR<Prisma.PaymentTransactionNullableScalarRelationFilter, Prisma.PaymentTransactionWhereInput> | null
}, "id">

export type PostTransactionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  postId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  paymentTransactionId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.PostTransactionCountOrderByAggregateInput
  _avg?: Prisma.PostTransactionAvgOrderByAggregateInput
  _max?: Prisma.PostTransactionMaxOrderByAggregateInput
  _min?: Prisma.PostTransactionMinOrderByAggregateInput
  _sum?: Prisma.PostTransactionSumOrderByAggregateInput
}

export type PostTransactionScalarWhereWithAggregatesInput = {
  AND?: Prisma.PostTransactionScalarWhereWithAggregatesInput | Prisma.PostTransactionScalarWhereWithAggregatesInput[]
  OR?: Prisma.PostTransactionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PostTransactionScalarWhereWithAggregatesInput | Prisma.PostTransactionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PostTransaction"> | string
  postId?: Prisma.StringWithAggregatesFilter<"PostTransaction"> | string
  clientId?: Prisma.StringWithAggregatesFilter<"PostTransaction"> | string
  paymentTransactionId?: Prisma.StringNullableWithAggregatesFilter<"PostTransaction"> | string | null
  status?: Prisma.EnumPostTransactionStatusWithAggregatesFilter<"PostTransaction"> | $Enums.PostTransactionStatus
  amount?: Prisma.FloatWithAggregatesFilter<"PostTransaction"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PostTransaction"> | Date | string
}

export type PostTransactionCreateInput = {
  id?: string
  status?: $Enums.PostTransactionStatus
  amount: number
  createdAt?: Date | string
  post: Prisma.PostOfSaleCreateNestedOneWithoutTransactionsInput
  client: Prisma.ClientCreateNestedOneWithoutPostTransactionInput
  paymentTransaction?: Prisma.PaymentTransactionCreateNestedOneWithoutPostTransactionsInput
}

export type PostTransactionUncheckedCreateInput = {
  id?: string
  postId: string
  clientId: string
  paymentTransactionId?: string | null
  status?: $Enums.PostTransactionStatus
  amount: number
  createdAt?: Date | string
}

export type PostTransactionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  post?: Prisma.PostOfSaleUpdateOneRequiredWithoutTransactionsNestedInput
  client?: Prisma.ClientUpdateOneRequiredWithoutPostTransactionNestedInput
  paymentTransaction?: Prisma.PaymentTransactionUpdateOneWithoutPostTransactionsNestedInput
}

export type PostTransactionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  postId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostTransactionCreateManyInput = {
  id?: string
  postId: string
  clientId: string
  paymentTransactionId?: string | null
  status?: $Enums.PostTransactionStatus
  amount: number
  createdAt?: Date | string
}

export type PostTransactionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostTransactionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  postId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostTransactionListRelationFilter = {
  every?: Prisma.PostTransactionWhereInput
  some?: Prisma.PostTransactionWhereInput
  none?: Prisma.PostTransactionWhereInput
}

export type PostTransactionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PostTransactionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  postId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  paymentTransactionId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PostTransactionAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type PostTransactionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  postId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  paymentTransactionId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PostTransactionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  postId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  paymentTransactionId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PostTransactionSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type PostTransactionCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.PostTransactionCreateWithoutClientInput, Prisma.PostTransactionUncheckedCreateWithoutClientInput> | Prisma.PostTransactionCreateWithoutClientInput[] | Prisma.PostTransactionUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.PostTransactionCreateOrConnectWithoutClientInput | Prisma.PostTransactionCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.PostTransactionCreateManyClientInputEnvelope
  connect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
}

export type PostTransactionUncheckedCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.PostTransactionCreateWithoutClientInput, Prisma.PostTransactionUncheckedCreateWithoutClientInput> | Prisma.PostTransactionCreateWithoutClientInput[] | Prisma.PostTransactionUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.PostTransactionCreateOrConnectWithoutClientInput | Prisma.PostTransactionCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.PostTransactionCreateManyClientInputEnvelope
  connect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
}

export type PostTransactionUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.PostTransactionCreateWithoutClientInput, Prisma.PostTransactionUncheckedCreateWithoutClientInput> | Prisma.PostTransactionCreateWithoutClientInput[] | Prisma.PostTransactionUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.PostTransactionCreateOrConnectWithoutClientInput | Prisma.PostTransactionCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.PostTransactionUpsertWithWhereUniqueWithoutClientInput | Prisma.PostTransactionUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.PostTransactionCreateManyClientInputEnvelope
  set?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  disconnect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  delete?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  connect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  update?: Prisma.PostTransactionUpdateWithWhereUniqueWithoutClientInput | Prisma.PostTransactionUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.PostTransactionUpdateManyWithWhereWithoutClientInput | Prisma.PostTransactionUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.PostTransactionScalarWhereInput | Prisma.PostTransactionScalarWhereInput[]
}

export type PostTransactionUncheckedUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.PostTransactionCreateWithoutClientInput, Prisma.PostTransactionUncheckedCreateWithoutClientInput> | Prisma.PostTransactionCreateWithoutClientInput[] | Prisma.PostTransactionUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.PostTransactionCreateOrConnectWithoutClientInput | Prisma.PostTransactionCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.PostTransactionUpsertWithWhereUniqueWithoutClientInput | Prisma.PostTransactionUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.PostTransactionCreateManyClientInputEnvelope
  set?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  disconnect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  delete?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  connect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  update?: Prisma.PostTransactionUpdateWithWhereUniqueWithoutClientInput | Prisma.PostTransactionUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.PostTransactionUpdateManyWithWhereWithoutClientInput | Prisma.PostTransactionUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.PostTransactionScalarWhereInput | Prisma.PostTransactionScalarWhereInput[]
}

export type PostTransactionCreateNestedManyWithoutPaymentTransactionInput = {
  create?: Prisma.XOR<Prisma.PostTransactionCreateWithoutPaymentTransactionInput, Prisma.PostTransactionUncheckedCreateWithoutPaymentTransactionInput> | Prisma.PostTransactionCreateWithoutPaymentTransactionInput[] | Prisma.PostTransactionUncheckedCreateWithoutPaymentTransactionInput[]
  connectOrCreate?: Prisma.PostTransactionCreateOrConnectWithoutPaymentTransactionInput | Prisma.PostTransactionCreateOrConnectWithoutPaymentTransactionInput[]
  createMany?: Prisma.PostTransactionCreateManyPaymentTransactionInputEnvelope
  connect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
}

export type PostTransactionUncheckedCreateNestedManyWithoutPaymentTransactionInput = {
  create?: Prisma.XOR<Prisma.PostTransactionCreateWithoutPaymentTransactionInput, Prisma.PostTransactionUncheckedCreateWithoutPaymentTransactionInput> | Prisma.PostTransactionCreateWithoutPaymentTransactionInput[] | Prisma.PostTransactionUncheckedCreateWithoutPaymentTransactionInput[]
  connectOrCreate?: Prisma.PostTransactionCreateOrConnectWithoutPaymentTransactionInput | Prisma.PostTransactionCreateOrConnectWithoutPaymentTransactionInput[]
  createMany?: Prisma.PostTransactionCreateManyPaymentTransactionInputEnvelope
  connect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
}

export type PostTransactionUpdateManyWithoutPaymentTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.PostTransactionCreateWithoutPaymentTransactionInput, Prisma.PostTransactionUncheckedCreateWithoutPaymentTransactionInput> | Prisma.PostTransactionCreateWithoutPaymentTransactionInput[] | Prisma.PostTransactionUncheckedCreateWithoutPaymentTransactionInput[]
  connectOrCreate?: Prisma.PostTransactionCreateOrConnectWithoutPaymentTransactionInput | Prisma.PostTransactionCreateOrConnectWithoutPaymentTransactionInput[]
  upsert?: Prisma.PostTransactionUpsertWithWhereUniqueWithoutPaymentTransactionInput | Prisma.PostTransactionUpsertWithWhereUniqueWithoutPaymentTransactionInput[]
  createMany?: Prisma.PostTransactionCreateManyPaymentTransactionInputEnvelope
  set?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  disconnect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  delete?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  connect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  update?: Prisma.PostTransactionUpdateWithWhereUniqueWithoutPaymentTransactionInput | Prisma.PostTransactionUpdateWithWhereUniqueWithoutPaymentTransactionInput[]
  updateMany?: Prisma.PostTransactionUpdateManyWithWhereWithoutPaymentTransactionInput | Prisma.PostTransactionUpdateManyWithWhereWithoutPaymentTransactionInput[]
  deleteMany?: Prisma.PostTransactionScalarWhereInput | Prisma.PostTransactionScalarWhereInput[]
}

export type PostTransactionUncheckedUpdateManyWithoutPaymentTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.PostTransactionCreateWithoutPaymentTransactionInput, Prisma.PostTransactionUncheckedCreateWithoutPaymentTransactionInput> | Prisma.PostTransactionCreateWithoutPaymentTransactionInput[] | Prisma.PostTransactionUncheckedCreateWithoutPaymentTransactionInput[]
  connectOrCreate?: Prisma.PostTransactionCreateOrConnectWithoutPaymentTransactionInput | Prisma.PostTransactionCreateOrConnectWithoutPaymentTransactionInput[]
  upsert?: Prisma.PostTransactionUpsertWithWhereUniqueWithoutPaymentTransactionInput | Prisma.PostTransactionUpsertWithWhereUniqueWithoutPaymentTransactionInput[]
  createMany?: Prisma.PostTransactionCreateManyPaymentTransactionInputEnvelope
  set?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  disconnect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  delete?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  connect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  update?: Prisma.PostTransactionUpdateWithWhereUniqueWithoutPaymentTransactionInput | Prisma.PostTransactionUpdateWithWhereUniqueWithoutPaymentTransactionInput[]
  updateMany?: Prisma.PostTransactionUpdateManyWithWhereWithoutPaymentTransactionInput | Prisma.PostTransactionUpdateManyWithWhereWithoutPaymentTransactionInput[]
  deleteMany?: Prisma.PostTransactionScalarWhereInput | Prisma.PostTransactionScalarWhereInput[]
}

export type PostTransactionCreateNestedManyWithoutPostInput = {
  create?: Prisma.XOR<Prisma.PostTransactionCreateWithoutPostInput, Prisma.PostTransactionUncheckedCreateWithoutPostInput> | Prisma.PostTransactionCreateWithoutPostInput[] | Prisma.PostTransactionUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.PostTransactionCreateOrConnectWithoutPostInput | Prisma.PostTransactionCreateOrConnectWithoutPostInput[]
  createMany?: Prisma.PostTransactionCreateManyPostInputEnvelope
  connect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
}

export type PostTransactionUncheckedCreateNestedManyWithoutPostInput = {
  create?: Prisma.XOR<Prisma.PostTransactionCreateWithoutPostInput, Prisma.PostTransactionUncheckedCreateWithoutPostInput> | Prisma.PostTransactionCreateWithoutPostInput[] | Prisma.PostTransactionUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.PostTransactionCreateOrConnectWithoutPostInput | Prisma.PostTransactionCreateOrConnectWithoutPostInput[]
  createMany?: Prisma.PostTransactionCreateManyPostInputEnvelope
  connect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
}

export type PostTransactionUpdateManyWithoutPostNestedInput = {
  create?: Prisma.XOR<Prisma.PostTransactionCreateWithoutPostInput, Prisma.PostTransactionUncheckedCreateWithoutPostInput> | Prisma.PostTransactionCreateWithoutPostInput[] | Prisma.PostTransactionUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.PostTransactionCreateOrConnectWithoutPostInput | Prisma.PostTransactionCreateOrConnectWithoutPostInput[]
  upsert?: Prisma.PostTransactionUpsertWithWhereUniqueWithoutPostInput | Prisma.PostTransactionUpsertWithWhereUniqueWithoutPostInput[]
  createMany?: Prisma.PostTransactionCreateManyPostInputEnvelope
  set?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  disconnect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  delete?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  connect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  update?: Prisma.PostTransactionUpdateWithWhereUniqueWithoutPostInput | Prisma.PostTransactionUpdateWithWhereUniqueWithoutPostInput[]
  updateMany?: Prisma.PostTransactionUpdateManyWithWhereWithoutPostInput | Prisma.PostTransactionUpdateManyWithWhereWithoutPostInput[]
  deleteMany?: Prisma.PostTransactionScalarWhereInput | Prisma.PostTransactionScalarWhereInput[]
}

export type PostTransactionUncheckedUpdateManyWithoutPostNestedInput = {
  create?: Prisma.XOR<Prisma.PostTransactionCreateWithoutPostInput, Prisma.PostTransactionUncheckedCreateWithoutPostInput> | Prisma.PostTransactionCreateWithoutPostInput[] | Prisma.PostTransactionUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.PostTransactionCreateOrConnectWithoutPostInput | Prisma.PostTransactionCreateOrConnectWithoutPostInput[]
  upsert?: Prisma.PostTransactionUpsertWithWhereUniqueWithoutPostInput | Prisma.PostTransactionUpsertWithWhereUniqueWithoutPostInput[]
  createMany?: Prisma.PostTransactionCreateManyPostInputEnvelope
  set?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  disconnect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  delete?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  connect?: Prisma.PostTransactionWhereUniqueInput | Prisma.PostTransactionWhereUniqueInput[]
  update?: Prisma.PostTransactionUpdateWithWhereUniqueWithoutPostInput | Prisma.PostTransactionUpdateWithWhereUniqueWithoutPostInput[]
  updateMany?: Prisma.PostTransactionUpdateManyWithWhereWithoutPostInput | Prisma.PostTransactionUpdateManyWithWhereWithoutPostInput[]
  deleteMany?: Prisma.PostTransactionScalarWhereInput | Prisma.PostTransactionScalarWhereInput[]
}

export type EnumPostTransactionStatusFieldUpdateOperationsInput = {
  set?: $Enums.PostTransactionStatus
}

export type PostTransactionCreateWithoutClientInput = {
  id?: string
  status?: $Enums.PostTransactionStatus
  amount: number
  createdAt?: Date | string
  post: Prisma.PostOfSaleCreateNestedOneWithoutTransactionsInput
  paymentTransaction?: Prisma.PaymentTransactionCreateNestedOneWithoutPostTransactionsInput
}

export type PostTransactionUncheckedCreateWithoutClientInput = {
  id?: string
  postId: string
  paymentTransactionId?: string | null
  status?: $Enums.PostTransactionStatus
  amount: number
  createdAt?: Date | string
}

export type PostTransactionCreateOrConnectWithoutClientInput = {
  where: Prisma.PostTransactionWhereUniqueInput
  create: Prisma.XOR<Prisma.PostTransactionCreateWithoutClientInput, Prisma.PostTransactionUncheckedCreateWithoutClientInput>
}

export type PostTransactionCreateManyClientInputEnvelope = {
  data: Prisma.PostTransactionCreateManyClientInput | Prisma.PostTransactionCreateManyClientInput[]
  skipDuplicates?: boolean
}

export type PostTransactionUpsertWithWhereUniqueWithoutClientInput = {
  where: Prisma.PostTransactionWhereUniqueInput
  update: Prisma.XOR<Prisma.PostTransactionUpdateWithoutClientInput, Prisma.PostTransactionUncheckedUpdateWithoutClientInput>
  create: Prisma.XOR<Prisma.PostTransactionCreateWithoutClientInput, Prisma.PostTransactionUncheckedCreateWithoutClientInput>
}

export type PostTransactionUpdateWithWhereUniqueWithoutClientInput = {
  where: Prisma.PostTransactionWhereUniqueInput
  data: Prisma.XOR<Prisma.PostTransactionUpdateWithoutClientInput, Prisma.PostTransactionUncheckedUpdateWithoutClientInput>
}

export type PostTransactionUpdateManyWithWhereWithoutClientInput = {
  where: Prisma.PostTransactionScalarWhereInput
  data: Prisma.XOR<Prisma.PostTransactionUpdateManyMutationInput, Prisma.PostTransactionUncheckedUpdateManyWithoutClientInput>
}

export type PostTransactionScalarWhereInput = {
  AND?: Prisma.PostTransactionScalarWhereInput | Prisma.PostTransactionScalarWhereInput[]
  OR?: Prisma.PostTransactionScalarWhereInput[]
  NOT?: Prisma.PostTransactionScalarWhereInput | Prisma.PostTransactionScalarWhereInput[]
  id?: Prisma.StringFilter<"PostTransaction"> | string
  postId?: Prisma.StringFilter<"PostTransaction"> | string
  clientId?: Prisma.StringFilter<"PostTransaction"> | string
  paymentTransactionId?: Prisma.StringNullableFilter<"PostTransaction"> | string | null
  status?: Prisma.EnumPostTransactionStatusFilter<"PostTransaction"> | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFilter<"PostTransaction"> | number
  createdAt?: Prisma.DateTimeFilter<"PostTransaction"> | Date | string
}

export type PostTransactionCreateWithoutPaymentTransactionInput = {
  id?: string
  status?: $Enums.PostTransactionStatus
  amount: number
  createdAt?: Date | string
  post: Prisma.PostOfSaleCreateNestedOneWithoutTransactionsInput
  client: Prisma.ClientCreateNestedOneWithoutPostTransactionInput
}

export type PostTransactionUncheckedCreateWithoutPaymentTransactionInput = {
  id?: string
  postId: string
  clientId: string
  status?: $Enums.PostTransactionStatus
  amount: number
  createdAt?: Date | string
}

export type PostTransactionCreateOrConnectWithoutPaymentTransactionInput = {
  where: Prisma.PostTransactionWhereUniqueInput
  create: Prisma.XOR<Prisma.PostTransactionCreateWithoutPaymentTransactionInput, Prisma.PostTransactionUncheckedCreateWithoutPaymentTransactionInput>
}

export type PostTransactionCreateManyPaymentTransactionInputEnvelope = {
  data: Prisma.PostTransactionCreateManyPaymentTransactionInput | Prisma.PostTransactionCreateManyPaymentTransactionInput[]
  skipDuplicates?: boolean
}

export type PostTransactionUpsertWithWhereUniqueWithoutPaymentTransactionInput = {
  where: Prisma.PostTransactionWhereUniqueInput
  update: Prisma.XOR<Prisma.PostTransactionUpdateWithoutPaymentTransactionInput, Prisma.PostTransactionUncheckedUpdateWithoutPaymentTransactionInput>
  create: Prisma.XOR<Prisma.PostTransactionCreateWithoutPaymentTransactionInput, Prisma.PostTransactionUncheckedCreateWithoutPaymentTransactionInput>
}

export type PostTransactionUpdateWithWhereUniqueWithoutPaymentTransactionInput = {
  where: Prisma.PostTransactionWhereUniqueInput
  data: Prisma.XOR<Prisma.PostTransactionUpdateWithoutPaymentTransactionInput, Prisma.PostTransactionUncheckedUpdateWithoutPaymentTransactionInput>
}

export type PostTransactionUpdateManyWithWhereWithoutPaymentTransactionInput = {
  where: Prisma.PostTransactionScalarWhereInput
  data: Prisma.XOR<Prisma.PostTransactionUpdateManyMutationInput, Prisma.PostTransactionUncheckedUpdateManyWithoutPaymentTransactionInput>
}

export type PostTransactionCreateWithoutPostInput = {
  id?: string
  status?: $Enums.PostTransactionStatus
  amount: number
  createdAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutPostTransactionInput
  paymentTransaction?: Prisma.PaymentTransactionCreateNestedOneWithoutPostTransactionsInput
}

export type PostTransactionUncheckedCreateWithoutPostInput = {
  id?: string
  clientId: string
  paymentTransactionId?: string | null
  status?: $Enums.PostTransactionStatus
  amount: number
  createdAt?: Date | string
}

export type PostTransactionCreateOrConnectWithoutPostInput = {
  where: Prisma.PostTransactionWhereUniqueInput
  create: Prisma.XOR<Prisma.PostTransactionCreateWithoutPostInput, Prisma.PostTransactionUncheckedCreateWithoutPostInput>
}

export type PostTransactionCreateManyPostInputEnvelope = {
  data: Prisma.PostTransactionCreateManyPostInput | Prisma.PostTransactionCreateManyPostInput[]
  skipDuplicates?: boolean
}

export type PostTransactionUpsertWithWhereUniqueWithoutPostInput = {
  where: Prisma.PostTransactionWhereUniqueInput
  update: Prisma.XOR<Prisma.PostTransactionUpdateWithoutPostInput, Prisma.PostTransactionUncheckedUpdateWithoutPostInput>
  create: Prisma.XOR<Prisma.PostTransactionCreateWithoutPostInput, Prisma.PostTransactionUncheckedCreateWithoutPostInput>
}

export type PostTransactionUpdateWithWhereUniqueWithoutPostInput = {
  where: Prisma.PostTransactionWhereUniqueInput
  data: Prisma.XOR<Prisma.PostTransactionUpdateWithoutPostInput, Prisma.PostTransactionUncheckedUpdateWithoutPostInput>
}

export type PostTransactionUpdateManyWithWhereWithoutPostInput = {
  where: Prisma.PostTransactionScalarWhereInput
  data: Prisma.XOR<Prisma.PostTransactionUpdateManyMutationInput, Prisma.PostTransactionUncheckedUpdateManyWithoutPostInput>
}

export type PostTransactionCreateManyClientInput = {
  id?: string
  postId: string
  paymentTransactionId?: string | null
  status?: $Enums.PostTransactionStatus
  amount: number
  createdAt?: Date | string
}

export type PostTransactionUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  post?: Prisma.PostOfSaleUpdateOneRequiredWithoutTransactionsNestedInput
  paymentTransaction?: Prisma.PaymentTransactionUpdateOneWithoutPostTransactionsNestedInput
}

export type PostTransactionUncheckedUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  postId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostTransactionUncheckedUpdateManyWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  postId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostTransactionCreateManyPaymentTransactionInput = {
  id?: string
  postId: string
  clientId: string
  status?: $Enums.PostTransactionStatus
  amount: number
  createdAt?: Date | string
}

export type PostTransactionUpdateWithoutPaymentTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  post?: Prisma.PostOfSaleUpdateOneRequiredWithoutTransactionsNestedInput
  client?: Prisma.ClientUpdateOneRequiredWithoutPostTransactionNestedInput
}

export type PostTransactionUncheckedUpdateWithoutPaymentTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  postId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostTransactionUncheckedUpdateManyWithoutPaymentTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  postId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostTransactionCreateManyPostInput = {
  id?: string
  clientId: string
  paymentTransactionId?: string | null
  status?: $Enums.PostTransactionStatus
  amount: number
  createdAt?: Date | string
}

export type PostTransactionUpdateWithoutPostInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutPostTransactionNestedInput
  paymentTransaction?: Prisma.PaymentTransactionUpdateOneWithoutPostTransactionsNestedInput
}

export type PostTransactionUncheckedUpdateWithoutPostInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostTransactionUncheckedUpdateManyWithoutPostInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPostTransactionStatusFieldUpdateOperationsInput | $Enums.PostTransactionStatus
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PostTransactionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  postId?: boolean
  clientId?: boolean
  paymentTransactionId?: boolean
  status?: boolean
  amount?: boolean
  createdAt?: boolean
  post?: boolean | Prisma.PostOfSaleDefaultArgs<ExtArgs>
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  paymentTransaction?: boolean | Prisma.PostTransaction$paymentTransactionArgs<ExtArgs>
}, ExtArgs["result"]["postTransaction"]>

export type PostTransactionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  postId?: boolean
  clientId?: boolean
  paymentTransactionId?: boolean
  status?: boolean
  amount?: boolean
  createdAt?: boolean
  post?: boolean | Prisma.PostOfSaleDefaultArgs<ExtArgs>
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  paymentTransaction?: boolean | Prisma.PostTransaction$paymentTransactionArgs<ExtArgs>
}, ExtArgs["result"]["postTransaction"]>

export type PostTransactionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  postId?: boolean
  clientId?: boolean
  paymentTransactionId?: boolean
  status?: boolean
  amount?: boolean
  createdAt?: boolean
  post?: boolean | Prisma.PostOfSaleDefaultArgs<ExtArgs>
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  paymentTransaction?: boolean | Prisma.PostTransaction$paymentTransactionArgs<ExtArgs>
}, ExtArgs["result"]["postTransaction"]>

export type PostTransactionSelectScalar = {
  id?: boolean
  postId?: boolean
  clientId?: boolean
  paymentTransactionId?: boolean
  status?: boolean
  amount?: boolean
  createdAt?: boolean
}

export type PostTransactionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "postId" | "clientId" | "paymentTransactionId" | "status" | "amount" | "createdAt", ExtArgs["result"]["postTransaction"]>
export type PostTransactionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  post?: boolean | Prisma.PostOfSaleDefaultArgs<ExtArgs>
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  paymentTransaction?: boolean | Prisma.PostTransaction$paymentTransactionArgs<ExtArgs>
}
export type PostTransactionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  post?: boolean | Prisma.PostOfSaleDefaultArgs<ExtArgs>
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  paymentTransaction?: boolean | Prisma.PostTransaction$paymentTransactionArgs<ExtArgs>
}
export type PostTransactionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  post?: boolean | Prisma.PostOfSaleDefaultArgs<ExtArgs>
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  paymentTransaction?: boolean | Prisma.PostTransaction$paymentTransactionArgs<ExtArgs>
}

export type $PostTransactionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PostTransaction"
  objects: {
    post: Prisma.$PostOfSalePayload<ExtArgs>
    client: Prisma.$ClientPayload<ExtArgs>
    paymentTransaction: Prisma.$PaymentTransactionPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    postId: string
    clientId: string
    paymentTransactionId: string | null
    status: $Enums.PostTransactionStatus
    amount: number
    createdAt: Date
  }, ExtArgs["result"]["postTransaction"]>
  composites: {}
}

export type PostTransactionGetPayload<S extends boolean | null | undefined | PostTransactionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload, S>

export type PostTransactionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PostTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PostTransactionCountAggregateInputType | true
  }

export interface PostTransactionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostTransaction'], meta: { name: 'PostTransaction' } }
  /**
   * Find zero or one PostTransaction that matches the filter.
   * @param {PostTransactionFindUniqueArgs} args - Arguments to find a PostTransaction
   * @example
   * // Get one PostTransaction
   * const postTransaction = await prisma.postTransaction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PostTransactionFindUniqueArgs>(args: Prisma.SelectSubset<T, PostTransactionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PostTransactionClient<runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PostTransaction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PostTransactionFindUniqueOrThrowArgs} args - Arguments to find a PostTransaction
   * @example
   * // Get one PostTransaction
   * const postTransaction = await prisma.postTransaction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PostTransactionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PostTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PostTransactionClient<runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PostTransaction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostTransactionFindFirstArgs} args - Arguments to find a PostTransaction
   * @example
   * // Get one PostTransaction
   * const postTransaction = await prisma.postTransaction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PostTransactionFindFirstArgs>(args?: Prisma.SelectSubset<T, PostTransactionFindFirstArgs<ExtArgs>>): Prisma.Prisma__PostTransactionClient<runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PostTransaction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostTransactionFindFirstOrThrowArgs} args - Arguments to find a PostTransaction
   * @example
   * // Get one PostTransaction
   * const postTransaction = await prisma.postTransaction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PostTransactionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PostTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PostTransactionClient<runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PostTransactions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PostTransactions
   * const postTransactions = await prisma.postTransaction.findMany()
   * 
   * // Get first 10 PostTransactions
   * const postTransactions = await prisma.postTransaction.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const postTransactionWithIdOnly = await prisma.postTransaction.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PostTransactionFindManyArgs>(args?: Prisma.SelectSubset<T, PostTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PostTransaction.
   * @param {PostTransactionCreateArgs} args - Arguments to create a PostTransaction.
   * @example
   * // Create one PostTransaction
   * const PostTransaction = await prisma.postTransaction.create({
   *   data: {
   *     // ... data to create a PostTransaction
   *   }
   * })
   * 
   */
  create<T extends PostTransactionCreateArgs>(args: Prisma.SelectSubset<T, PostTransactionCreateArgs<ExtArgs>>): Prisma.Prisma__PostTransactionClient<runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PostTransactions.
   * @param {PostTransactionCreateManyArgs} args - Arguments to create many PostTransactions.
   * @example
   * // Create many PostTransactions
   * const postTransaction = await prisma.postTransaction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PostTransactionCreateManyArgs>(args?: Prisma.SelectSubset<T, PostTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PostTransactions and returns the data saved in the database.
   * @param {PostTransactionCreateManyAndReturnArgs} args - Arguments to create many PostTransactions.
   * @example
   * // Create many PostTransactions
   * const postTransaction = await prisma.postTransaction.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PostTransactions and only return the `id`
   * const postTransactionWithIdOnly = await prisma.postTransaction.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PostTransactionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PostTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PostTransaction.
   * @param {PostTransactionDeleteArgs} args - Arguments to delete one PostTransaction.
   * @example
   * // Delete one PostTransaction
   * const PostTransaction = await prisma.postTransaction.delete({
   *   where: {
   *     // ... filter to delete one PostTransaction
   *   }
   * })
   * 
   */
  delete<T extends PostTransactionDeleteArgs>(args: Prisma.SelectSubset<T, PostTransactionDeleteArgs<ExtArgs>>): Prisma.Prisma__PostTransactionClient<runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PostTransaction.
   * @param {PostTransactionUpdateArgs} args - Arguments to update one PostTransaction.
   * @example
   * // Update one PostTransaction
   * const postTransaction = await prisma.postTransaction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PostTransactionUpdateArgs>(args: Prisma.SelectSubset<T, PostTransactionUpdateArgs<ExtArgs>>): Prisma.Prisma__PostTransactionClient<runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PostTransactions.
   * @param {PostTransactionDeleteManyArgs} args - Arguments to filter PostTransactions to delete.
   * @example
   * // Delete a few PostTransactions
   * const { count } = await prisma.postTransaction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PostTransactionDeleteManyArgs>(args?: Prisma.SelectSubset<T, PostTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PostTransactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostTransactionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PostTransactions
   * const postTransaction = await prisma.postTransaction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PostTransactionUpdateManyArgs>(args: Prisma.SelectSubset<T, PostTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PostTransactions and returns the data updated in the database.
   * @param {PostTransactionUpdateManyAndReturnArgs} args - Arguments to update many PostTransactions.
   * @example
   * // Update many PostTransactions
   * const postTransaction = await prisma.postTransaction.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PostTransactions and only return the `id`
   * const postTransactionWithIdOnly = await prisma.postTransaction.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PostTransactionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PostTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PostTransaction.
   * @param {PostTransactionUpsertArgs} args - Arguments to update or create a PostTransaction.
   * @example
   * // Update or create a PostTransaction
   * const postTransaction = await prisma.postTransaction.upsert({
   *   create: {
   *     // ... data to create a PostTransaction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PostTransaction we want to update
   *   }
   * })
   */
  upsert<T extends PostTransactionUpsertArgs>(args: Prisma.SelectSubset<T, PostTransactionUpsertArgs<ExtArgs>>): Prisma.Prisma__PostTransactionClient<runtime.Types.Result.GetResult<Prisma.$PostTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PostTransactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostTransactionCountArgs} args - Arguments to filter PostTransactions to count.
   * @example
   * // Count the number of PostTransactions
   * const count = await prisma.postTransaction.count({
   *   where: {
   *     // ... the filter for the PostTransactions we want to count
   *   }
   * })
  **/
  count<T extends PostTransactionCountArgs>(
    args?: Prisma.Subset<T, PostTransactionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PostTransactionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PostTransaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PostTransactionAggregateArgs>(args: Prisma.Subset<T, PostTransactionAggregateArgs>): Prisma.PrismaPromise<GetPostTransactionAggregateType<T>>

  /**
   * Group by PostTransaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostTransactionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PostTransactionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PostTransactionGroupByArgs['orderBy'] }
      : { orderBy?: PostTransactionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PostTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PostTransaction model
 */
readonly fields: PostTransactionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PostTransaction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PostTransactionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  post<T extends Prisma.PostOfSaleDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PostOfSaleDefaultArgs<ExtArgs>>): Prisma.Prisma__PostOfSaleClient<runtime.Types.Result.GetResult<Prisma.$PostOfSalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  client<T extends Prisma.ClientDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClientDefaultArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  paymentTransaction<T extends Prisma.PostTransaction$paymentTransactionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PostTransaction$paymentTransactionArgs<ExtArgs>>): Prisma.Prisma__PaymentTransactionClient<runtime.Types.Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PostTransaction model
 */
export interface PostTransactionFieldRefs {
  readonly id: Prisma.FieldRef<"PostTransaction", 'String'>
  readonly postId: Prisma.FieldRef<"PostTransaction", 'String'>
  readonly clientId: Prisma.FieldRef<"PostTransaction", 'String'>
  readonly paymentTransactionId: Prisma.FieldRef<"PostTransaction", 'String'>
  readonly status: Prisma.FieldRef<"PostTransaction", 'PostTransactionStatus'>
  readonly amount: Prisma.FieldRef<"PostTransaction", 'Float'>
  readonly createdAt: Prisma.FieldRef<"PostTransaction", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PostTransaction findUnique
 */
export type PostTransactionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PostTransaction to fetch.
   */
  where: Prisma.PostTransactionWhereUniqueInput
}

/**
 * PostTransaction findUniqueOrThrow
 */
export type PostTransactionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PostTransaction to fetch.
   */
  where: Prisma.PostTransactionWhereUniqueInput
}

/**
 * PostTransaction findFirst
 */
export type PostTransactionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PostTransaction to fetch.
   */
  where?: Prisma.PostTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostTransactions to fetch.
   */
  orderBy?: Prisma.PostTransactionOrderByWithRelationInput | Prisma.PostTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PostTransactions.
   */
  cursor?: Prisma.PostTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PostTransactions.
   */
  distinct?: Prisma.PostTransactionScalarFieldEnum | Prisma.PostTransactionScalarFieldEnum[]
}

/**
 * PostTransaction findFirstOrThrow
 */
export type PostTransactionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PostTransaction to fetch.
   */
  where?: Prisma.PostTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostTransactions to fetch.
   */
  orderBy?: Prisma.PostTransactionOrderByWithRelationInput | Prisma.PostTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PostTransactions.
   */
  cursor?: Prisma.PostTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PostTransactions.
   */
  distinct?: Prisma.PostTransactionScalarFieldEnum | Prisma.PostTransactionScalarFieldEnum[]
}

/**
 * PostTransaction findMany
 */
export type PostTransactionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PostTransactions to fetch.
   */
  where?: Prisma.PostTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostTransactions to fetch.
   */
  orderBy?: Prisma.PostTransactionOrderByWithRelationInput | Prisma.PostTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PostTransactions.
   */
  cursor?: Prisma.PostTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostTransactions.
   */
  skip?: number
  distinct?: Prisma.PostTransactionScalarFieldEnum | Prisma.PostTransactionScalarFieldEnum[]
}

/**
 * PostTransaction create
 */
export type PostTransactionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionInclude<ExtArgs> | null
  /**
   * The data needed to create a PostTransaction.
   */
  data: Prisma.XOR<Prisma.PostTransactionCreateInput, Prisma.PostTransactionUncheckedCreateInput>
}

/**
 * PostTransaction createMany
 */
export type PostTransactionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PostTransactions.
   */
  data: Prisma.PostTransactionCreateManyInput | Prisma.PostTransactionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PostTransaction createManyAndReturn
 */
export type PostTransactionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * The data used to create many PostTransactions.
   */
  data: Prisma.PostTransactionCreateManyInput | Prisma.PostTransactionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PostTransaction update
 */
export type PostTransactionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionInclude<ExtArgs> | null
  /**
   * The data needed to update a PostTransaction.
   */
  data: Prisma.XOR<Prisma.PostTransactionUpdateInput, Prisma.PostTransactionUncheckedUpdateInput>
  /**
   * Choose, which PostTransaction to update.
   */
  where: Prisma.PostTransactionWhereUniqueInput
}

/**
 * PostTransaction updateMany
 */
export type PostTransactionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PostTransactions.
   */
  data: Prisma.XOR<Prisma.PostTransactionUpdateManyMutationInput, Prisma.PostTransactionUncheckedUpdateManyInput>
  /**
   * Filter which PostTransactions to update
   */
  where?: Prisma.PostTransactionWhereInput
  /**
   * Limit how many PostTransactions to update.
   */
  limit?: number
}

/**
 * PostTransaction updateManyAndReturn
 */
export type PostTransactionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * The data used to update PostTransactions.
   */
  data: Prisma.XOR<Prisma.PostTransactionUpdateManyMutationInput, Prisma.PostTransactionUncheckedUpdateManyInput>
  /**
   * Filter which PostTransactions to update
   */
  where?: Prisma.PostTransactionWhereInput
  /**
   * Limit how many PostTransactions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PostTransaction upsert
 */
export type PostTransactionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionInclude<ExtArgs> | null
  /**
   * The filter to search for the PostTransaction to update in case it exists.
   */
  where: Prisma.PostTransactionWhereUniqueInput
  /**
   * In case the PostTransaction found by the `where` argument doesn't exist, create a new PostTransaction with this data.
   */
  create: Prisma.XOR<Prisma.PostTransactionCreateInput, Prisma.PostTransactionUncheckedCreateInput>
  /**
   * In case the PostTransaction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PostTransactionUpdateInput, Prisma.PostTransactionUncheckedUpdateInput>
}

/**
 * PostTransaction delete
 */
export type PostTransactionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionInclude<ExtArgs> | null
  /**
   * Filter which PostTransaction to delete.
   */
  where: Prisma.PostTransactionWhereUniqueInput
}

/**
 * PostTransaction deleteMany
 */
export type PostTransactionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PostTransactions to delete
   */
  where?: Prisma.PostTransactionWhereInput
  /**
   * Limit how many PostTransactions to delete.
   */
  limit?: number
}

/**
 * PostTransaction.paymentTransaction
 */
export type PostTransaction$paymentTransactionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentTransaction
   */
  select?: Prisma.PaymentTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentTransaction
   */
  omit?: Prisma.PaymentTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentTransactionInclude<ExtArgs> | null
  where?: Prisma.PaymentTransactionWhereInput
}

/**
 * PostTransaction without action
 */
export type PostTransactionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostTransaction
   */
  select?: Prisma.PostTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostTransaction
   */
  omit?: Prisma.PostTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostTransactionInclude<ExtArgs> | null
}
