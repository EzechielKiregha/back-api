
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Chat` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Chat
 * 
 */
export type ChatModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatPayload>

export type AggregateChat = {
  _count: ChatCountAggregateOutputType | null
  _min: ChatMinAggregateOutputType | null
  _max: ChatMaxAggregateOutputType | null
}

export type ChatMinAggregateOutputType = {
  id: string | null
  clientId: string | null
  productId: string | null
  businessId: string | null
  workerId: string | null
  status: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChatMaxAggregateOutputType = {
  id: string | null
  clientId: string | null
  productId: string | null
  businessId: string | null
  workerId: string | null
  status: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChatCountAggregateOutputType = {
  id: number
  clientId: number
  productId: number
  businessId: number
  workerId: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ChatMinAggregateInputType = {
  id?: true
  clientId?: true
  productId?: true
  businessId?: true
  workerId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type ChatMaxAggregateInputType = {
  id?: true
  clientId?: true
  productId?: true
  businessId?: true
  workerId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type ChatCountAggregateInputType = {
  id?: true
  clientId?: true
  productId?: true
  businessId?: true
  workerId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ChatAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Chat to aggregate.
   */
  where?: Prisma.ChatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chats to fetch.
   */
  orderBy?: Prisma.ChatOrderByWithRelationInput | Prisma.ChatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Chats
  **/
  _count?: true | ChatCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatMaxAggregateInputType
}

export type GetChatAggregateType<T extends ChatAggregateArgs> = {
      [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChat[P]>
    : Prisma.GetScalarType<T[P], AggregateChat[P]>
}




export type ChatGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatWhereInput
  orderBy?: Prisma.ChatOrderByWithAggregationInput | Prisma.ChatOrderByWithAggregationInput[]
  by: Prisma.ChatScalarFieldEnum[] | Prisma.ChatScalarFieldEnum
  having?: Prisma.ChatScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatCountAggregateInputType | true
  _min?: ChatMinAggregateInputType
  _max?: ChatMaxAggregateInputType
}

export type ChatGroupByOutputType = {
  id: string
  clientId: string
  productId: string
  businessId: string | null
  workerId: string | null
  status: string
  createdAt: Date
  updatedAt: Date
  _count: ChatCountAggregateOutputType | null
  _min: ChatMinAggregateOutputType | null
  _max: ChatMaxAggregateOutputType | null
}

type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatGroupByOutputType[P]>
      }
    >
  > 



export type ChatWhereInput = {
  AND?: Prisma.ChatWhereInput | Prisma.ChatWhereInput[]
  OR?: Prisma.ChatWhereInput[]
  NOT?: Prisma.ChatWhereInput | Prisma.ChatWhereInput[]
  id?: Prisma.StringFilter<"Chat"> | string
  clientId?: Prisma.StringFilter<"Chat"> | string
  productId?: Prisma.StringFilter<"Chat"> | string
  businessId?: Prisma.StringNullableFilter<"Chat"> | string | null
  workerId?: Prisma.StringNullableFilter<"Chat"> | string | null
  status?: Prisma.StringFilter<"Chat"> | string
  createdAt?: Prisma.DateTimeFilter<"Chat"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Chat"> | Date | string
  client?: Prisma.XOR<Prisma.ClientScalarRelationFilter, Prisma.ClientWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  business?: Prisma.XOR<Prisma.BusinessNullableScalarRelationFilter, Prisma.BusinessWhereInput> | null
  worker?: Prisma.XOR<Prisma.WorkerNullableScalarRelationFilter, Prisma.WorkerWhereInput> | null
  messages?: Prisma.ChatMessageListRelationFilter
}

export type ChatOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  businessId?: Prisma.SortOrderInput | Prisma.SortOrder
  workerId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  client?: Prisma.ClientOrderByWithRelationInput
  product?: Prisma.ProductOrderByWithRelationInput
  business?: Prisma.BusinessOrderByWithRelationInput
  worker?: Prisma.WorkerOrderByWithRelationInput
  messages?: Prisma.ChatMessageOrderByRelationAggregateInput
}

export type ChatWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ChatWhereInput | Prisma.ChatWhereInput[]
  OR?: Prisma.ChatWhereInput[]
  NOT?: Prisma.ChatWhereInput | Prisma.ChatWhereInput[]
  clientId?: Prisma.StringFilter<"Chat"> | string
  productId?: Prisma.StringFilter<"Chat"> | string
  businessId?: Prisma.StringNullableFilter<"Chat"> | string | null
  workerId?: Prisma.StringNullableFilter<"Chat"> | string | null
  status?: Prisma.StringFilter<"Chat"> | string
  createdAt?: Prisma.DateTimeFilter<"Chat"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Chat"> | Date | string
  client?: Prisma.XOR<Prisma.ClientScalarRelationFilter, Prisma.ClientWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  business?: Prisma.XOR<Prisma.BusinessNullableScalarRelationFilter, Prisma.BusinessWhereInput> | null
  worker?: Prisma.XOR<Prisma.WorkerNullableScalarRelationFilter, Prisma.WorkerWhereInput> | null
  messages?: Prisma.ChatMessageListRelationFilter
}, "id">

export type ChatOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  businessId?: Prisma.SortOrderInput | Prisma.SortOrder
  workerId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ChatCountOrderByAggregateInput
  _max?: Prisma.ChatMaxOrderByAggregateInput
  _min?: Prisma.ChatMinOrderByAggregateInput
}

export type ChatScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatScalarWhereWithAggregatesInput | Prisma.ChatScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatScalarWhereWithAggregatesInput | Prisma.ChatScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Chat"> | string
  clientId?: Prisma.StringWithAggregatesFilter<"Chat"> | string
  productId?: Prisma.StringWithAggregatesFilter<"Chat"> | string
  businessId?: Prisma.StringNullableWithAggregatesFilter<"Chat"> | string | null
  workerId?: Prisma.StringNullableWithAggregatesFilter<"Chat"> | string | null
  status?: Prisma.StringWithAggregatesFilter<"Chat"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Chat"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Chat"> | Date | string
}

export type ChatCreateInput = {
  id?: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutChatsInput
  product: Prisma.ProductCreateNestedOneWithoutChatsInput
  business?: Prisma.BusinessCreateNestedOneWithoutChatsInput
  worker?: Prisma.WorkerCreateNestedOneWithoutChatsInput
  messages?: Prisma.ChatMessageCreateNestedManyWithoutChatInput
}

export type ChatUncheckedCreateInput = {
  id?: string
  clientId: string
  productId: string
  businessId?: string | null
  workerId?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  messages?: Prisma.ChatMessageUncheckedCreateNestedManyWithoutChatInput
}

export type ChatUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutChatsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutChatsNestedInput
  business?: Prisma.BusinessUpdateOneWithoutChatsNestedInput
  worker?: Prisma.WorkerUpdateOneWithoutChatsNestedInput
  messages?: Prisma.ChatMessageUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  messages?: Prisma.ChatMessageUncheckedUpdateManyWithoutChatNestedInput
}

export type ChatCreateManyInput = {
  id?: string
  clientId: string
  productId: string
  businessId?: string | null
  workerId?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatListRelationFilter = {
  every?: Prisma.ChatWhereInput
  some?: Prisma.ChatWhereInput
  none?: Prisma.ChatWhereInput
}

export type ChatOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChatCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatScalarRelationFilter = {
  is?: Prisma.ChatWhereInput
  isNot?: Prisma.ChatWhereInput
}

export type ChatCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutBusinessInput, Prisma.ChatUncheckedCreateWithoutBusinessInput> | Prisma.ChatCreateWithoutBusinessInput[] | Prisma.ChatUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutBusinessInput | Prisma.ChatCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.ChatCreateManyBusinessInputEnvelope
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
}

export type ChatUncheckedCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutBusinessInput, Prisma.ChatUncheckedCreateWithoutBusinessInput> | Prisma.ChatCreateWithoutBusinessInput[] | Prisma.ChatUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutBusinessInput | Prisma.ChatCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.ChatCreateManyBusinessInputEnvelope
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
}

export type ChatUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutBusinessInput, Prisma.ChatUncheckedCreateWithoutBusinessInput> | Prisma.ChatCreateWithoutBusinessInput[] | Prisma.ChatUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutBusinessInput | Prisma.ChatCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.ChatUpsertWithWhereUniqueWithoutBusinessInput | Prisma.ChatUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.ChatCreateManyBusinessInputEnvelope
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  update?: Prisma.ChatUpdateWithWhereUniqueWithoutBusinessInput | Prisma.ChatUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.ChatUpdateManyWithWhereWithoutBusinessInput | Prisma.ChatUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
}

export type ChatUncheckedUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutBusinessInput, Prisma.ChatUncheckedCreateWithoutBusinessInput> | Prisma.ChatCreateWithoutBusinessInput[] | Prisma.ChatUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutBusinessInput | Prisma.ChatCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.ChatUpsertWithWhereUniqueWithoutBusinessInput | Prisma.ChatUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.ChatCreateManyBusinessInputEnvelope
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  update?: Prisma.ChatUpdateWithWhereUniqueWithoutBusinessInput | Prisma.ChatUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.ChatUpdateManyWithWhereWithoutBusinessInput | Prisma.ChatUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
}

export type ChatCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutClientInput, Prisma.ChatUncheckedCreateWithoutClientInput> | Prisma.ChatCreateWithoutClientInput[] | Prisma.ChatUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutClientInput | Prisma.ChatCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.ChatCreateManyClientInputEnvelope
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
}

export type ChatUncheckedCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutClientInput, Prisma.ChatUncheckedCreateWithoutClientInput> | Prisma.ChatCreateWithoutClientInput[] | Prisma.ChatUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutClientInput | Prisma.ChatCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.ChatCreateManyClientInputEnvelope
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
}

export type ChatUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutClientInput, Prisma.ChatUncheckedCreateWithoutClientInput> | Prisma.ChatCreateWithoutClientInput[] | Prisma.ChatUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutClientInput | Prisma.ChatCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.ChatUpsertWithWhereUniqueWithoutClientInput | Prisma.ChatUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.ChatCreateManyClientInputEnvelope
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  update?: Prisma.ChatUpdateWithWhereUniqueWithoutClientInput | Prisma.ChatUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.ChatUpdateManyWithWhereWithoutClientInput | Prisma.ChatUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
}

export type ChatUncheckedUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutClientInput, Prisma.ChatUncheckedCreateWithoutClientInput> | Prisma.ChatCreateWithoutClientInput[] | Prisma.ChatUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutClientInput | Prisma.ChatCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.ChatUpsertWithWhereUniqueWithoutClientInput | Prisma.ChatUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.ChatCreateManyClientInputEnvelope
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  update?: Prisma.ChatUpdateWithWhereUniqueWithoutClientInput | Prisma.ChatUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.ChatUpdateManyWithWhereWithoutClientInput | Prisma.ChatUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
}

export type ChatCreateNestedManyWithoutWorkerInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutWorkerInput, Prisma.ChatUncheckedCreateWithoutWorkerInput> | Prisma.ChatCreateWithoutWorkerInput[] | Prisma.ChatUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutWorkerInput | Prisma.ChatCreateOrConnectWithoutWorkerInput[]
  createMany?: Prisma.ChatCreateManyWorkerInputEnvelope
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
}

export type ChatUncheckedCreateNestedManyWithoutWorkerInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutWorkerInput, Prisma.ChatUncheckedCreateWithoutWorkerInput> | Prisma.ChatCreateWithoutWorkerInput[] | Prisma.ChatUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutWorkerInput | Prisma.ChatCreateOrConnectWithoutWorkerInput[]
  createMany?: Prisma.ChatCreateManyWorkerInputEnvelope
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
}

export type ChatUpdateManyWithoutWorkerNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutWorkerInput, Prisma.ChatUncheckedCreateWithoutWorkerInput> | Prisma.ChatCreateWithoutWorkerInput[] | Prisma.ChatUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutWorkerInput | Prisma.ChatCreateOrConnectWithoutWorkerInput[]
  upsert?: Prisma.ChatUpsertWithWhereUniqueWithoutWorkerInput | Prisma.ChatUpsertWithWhereUniqueWithoutWorkerInput[]
  createMany?: Prisma.ChatCreateManyWorkerInputEnvelope
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  update?: Prisma.ChatUpdateWithWhereUniqueWithoutWorkerInput | Prisma.ChatUpdateWithWhereUniqueWithoutWorkerInput[]
  updateMany?: Prisma.ChatUpdateManyWithWhereWithoutWorkerInput | Prisma.ChatUpdateManyWithWhereWithoutWorkerInput[]
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
}

export type ChatUncheckedUpdateManyWithoutWorkerNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutWorkerInput, Prisma.ChatUncheckedCreateWithoutWorkerInput> | Prisma.ChatCreateWithoutWorkerInput[] | Prisma.ChatUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutWorkerInput | Prisma.ChatCreateOrConnectWithoutWorkerInput[]
  upsert?: Prisma.ChatUpsertWithWhereUniqueWithoutWorkerInput | Prisma.ChatUpsertWithWhereUniqueWithoutWorkerInput[]
  createMany?: Prisma.ChatCreateManyWorkerInputEnvelope
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  update?: Prisma.ChatUpdateWithWhereUniqueWithoutWorkerInput | Prisma.ChatUpdateWithWhereUniqueWithoutWorkerInput[]
  updateMany?: Prisma.ChatUpdateManyWithWhereWithoutWorkerInput | Prisma.ChatUpdateManyWithWhereWithoutWorkerInput[]
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
}

export type ChatCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutProductInput, Prisma.ChatUncheckedCreateWithoutProductInput> | Prisma.ChatCreateWithoutProductInput[] | Prisma.ChatUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutProductInput | Prisma.ChatCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ChatCreateManyProductInputEnvelope
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
}

export type ChatUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutProductInput, Prisma.ChatUncheckedCreateWithoutProductInput> | Prisma.ChatCreateWithoutProductInput[] | Prisma.ChatUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutProductInput | Prisma.ChatCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ChatCreateManyProductInputEnvelope
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
}

export type ChatUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutProductInput, Prisma.ChatUncheckedCreateWithoutProductInput> | Prisma.ChatCreateWithoutProductInput[] | Prisma.ChatUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutProductInput | Prisma.ChatCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ChatUpsertWithWhereUniqueWithoutProductInput | Prisma.ChatUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ChatCreateManyProductInputEnvelope
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  update?: Prisma.ChatUpdateWithWhereUniqueWithoutProductInput | Prisma.ChatUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ChatUpdateManyWithWhereWithoutProductInput | Prisma.ChatUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
}

export type ChatUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutProductInput, Prisma.ChatUncheckedCreateWithoutProductInput> | Prisma.ChatCreateWithoutProductInput[] | Prisma.ChatUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutProductInput | Prisma.ChatCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ChatUpsertWithWhereUniqueWithoutProductInput | Prisma.ChatUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ChatCreateManyProductInputEnvelope
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  update?: Prisma.ChatUpdateWithWhereUniqueWithoutProductInput | Prisma.ChatUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ChatUpdateManyWithWhereWithoutProductInput | Prisma.ChatUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
}

export type ChatCreateNestedOneWithoutMessagesInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutMessagesInput, Prisma.ChatUncheckedCreateWithoutMessagesInput>
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutMessagesInput
  connect?: Prisma.ChatWhereUniqueInput
}

export type ChatUpdateOneRequiredWithoutMessagesNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutMessagesInput, Prisma.ChatUncheckedCreateWithoutMessagesInput>
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutMessagesInput
  upsert?: Prisma.ChatUpsertWithoutMessagesInput
  connect?: Prisma.ChatWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChatUpdateToOneWithWhereWithoutMessagesInput, Prisma.ChatUpdateWithoutMessagesInput>, Prisma.ChatUncheckedUpdateWithoutMessagesInput>
}

export type ChatCreateWithoutBusinessInput = {
  id?: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutChatsInput
  product: Prisma.ProductCreateNestedOneWithoutChatsInput
  worker?: Prisma.WorkerCreateNestedOneWithoutChatsInput
  messages?: Prisma.ChatMessageCreateNestedManyWithoutChatInput
}

export type ChatUncheckedCreateWithoutBusinessInput = {
  id?: string
  clientId: string
  productId: string
  workerId?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  messages?: Prisma.ChatMessageUncheckedCreateNestedManyWithoutChatInput
}

export type ChatCreateOrConnectWithoutBusinessInput = {
  where: Prisma.ChatWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatCreateWithoutBusinessInput, Prisma.ChatUncheckedCreateWithoutBusinessInput>
}

export type ChatCreateManyBusinessInputEnvelope = {
  data: Prisma.ChatCreateManyBusinessInput | Prisma.ChatCreateManyBusinessInput[]
  skipDuplicates?: boolean
}

export type ChatUpsertWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.ChatWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatUpdateWithoutBusinessInput, Prisma.ChatUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.ChatCreateWithoutBusinessInput, Prisma.ChatUncheckedCreateWithoutBusinessInput>
}

export type ChatUpdateWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.ChatWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatUpdateWithoutBusinessInput, Prisma.ChatUncheckedUpdateWithoutBusinessInput>
}

export type ChatUpdateManyWithWhereWithoutBusinessInput = {
  where: Prisma.ChatScalarWhereInput
  data: Prisma.XOR<Prisma.ChatUpdateManyMutationInput, Prisma.ChatUncheckedUpdateManyWithoutBusinessInput>
}

export type ChatScalarWhereInput = {
  AND?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
  OR?: Prisma.ChatScalarWhereInput[]
  NOT?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
  id?: Prisma.StringFilter<"Chat"> | string
  clientId?: Prisma.StringFilter<"Chat"> | string
  productId?: Prisma.StringFilter<"Chat"> | string
  businessId?: Prisma.StringNullableFilter<"Chat"> | string | null
  workerId?: Prisma.StringNullableFilter<"Chat"> | string | null
  status?: Prisma.StringFilter<"Chat"> | string
  createdAt?: Prisma.DateTimeFilter<"Chat"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Chat"> | Date | string
}

export type ChatCreateWithoutClientInput = {
  id?: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutChatsInput
  business?: Prisma.BusinessCreateNestedOneWithoutChatsInput
  worker?: Prisma.WorkerCreateNestedOneWithoutChatsInput
  messages?: Prisma.ChatMessageCreateNestedManyWithoutChatInput
}

export type ChatUncheckedCreateWithoutClientInput = {
  id?: string
  productId: string
  businessId?: string | null
  workerId?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  messages?: Prisma.ChatMessageUncheckedCreateNestedManyWithoutChatInput
}

export type ChatCreateOrConnectWithoutClientInput = {
  where: Prisma.ChatWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatCreateWithoutClientInput, Prisma.ChatUncheckedCreateWithoutClientInput>
}

export type ChatCreateManyClientInputEnvelope = {
  data: Prisma.ChatCreateManyClientInput | Prisma.ChatCreateManyClientInput[]
  skipDuplicates?: boolean
}

export type ChatUpsertWithWhereUniqueWithoutClientInput = {
  where: Prisma.ChatWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatUpdateWithoutClientInput, Prisma.ChatUncheckedUpdateWithoutClientInput>
  create: Prisma.XOR<Prisma.ChatCreateWithoutClientInput, Prisma.ChatUncheckedCreateWithoutClientInput>
}

export type ChatUpdateWithWhereUniqueWithoutClientInput = {
  where: Prisma.ChatWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatUpdateWithoutClientInput, Prisma.ChatUncheckedUpdateWithoutClientInput>
}

export type ChatUpdateManyWithWhereWithoutClientInput = {
  where: Prisma.ChatScalarWhereInput
  data: Prisma.XOR<Prisma.ChatUpdateManyMutationInput, Prisma.ChatUncheckedUpdateManyWithoutClientInput>
}

export type ChatCreateWithoutWorkerInput = {
  id?: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutChatsInput
  product: Prisma.ProductCreateNestedOneWithoutChatsInput
  business?: Prisma.BusinessCreateNestedOneWithoutChatsInput
  messages?: Prisma.ChatMessageCreateNestedManyWithoutChatInput
}

export type ChatUncheckedCreateWithoutWorkerInput = {
  id?: string
  clientId: string
  productId: string
  businessId?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  messages?: Prisma.ChatMessageUncheckedCreateNestedManyWithoutChatInput
}

export type ChatCreateOrConnectWithoutWorkerInput = {
  where: Prisma.ChatWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatCreateWithoutWorkerInput, Prisma.ChatUncheckedCreateWithoutWorkerInput>
}

export type ChatCreateManyWorkerInputEnvelope = {
  data: Prisma.ChatCreateManyWorkerInput | Prisma.ChatCreateManyWorkerInput[]
  skipDuplicates?: boolean
}

export type ChatUpsertWithWhereUniqueWithoutWorkerInput = {
  where: Prisma.ChatWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatUpdateWithoutWorkerInput, Prisma.ChatUncheckedUpdateWithoutWorkerInput>
  create: Prisma.XOR<Prisma.ChatCreateWithoutWorkerInput, Prisma.ChatUncheckedCreateWithoutWorkerInput>
}

export type ChatUpdateWithWhereUniqueWithoutWorkerInput = {
  where: Prisma.ChatWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatUpdateWithoutWorkerInput, Prisma.ChatUncheckedUpdateWithoutWorkerInput>
}

export type ChatUpdateManyWithWhereWithoutWorkerInput = {
  where: Prisma.ChatScalarWhereInput
  data: Prisma.XOR<Prisma.ChatUpdateManyMutationInput, Prisma.ChatUncheckedUpdateManyWithoutWorkerInput>
}

export type ChatCreateWithoutProductInput = {
  id?: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutChatsInput
  business?: Prisma.BusinessCreateNestedOneWithoutChatsInput
  worker?: Prisma.WorkerCreateNestedOneWithoutChatsInput
  messages?: Prisma.ChatMessageCreateNestedManyWithoutChatInput
}

export type ChatUncheckedCreateWithoutProductInput = {
  id?: string
  clientId: string
  businessId?: string | null
  workerId?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  messages?: Prisma.ChatMessageUncheckedCreateNestedManyWithoutChatInput
}

export type ChatCreateOrConnectWithoutProductInput = {
  where: Prisma.ChatWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatCreateWithoutProductInput, Prisma.ChatUncheckedCreateWithoutProductInput>
}

export type ChatCreateManyProductInputEnvelope = {
  data: Prisma.ChatCreateManyProductInput | Prisma.ChatCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type ChatUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.ChatWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatUpdateWithoutProductInput, Prisma.ChatUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.ChatCreateWithoutProductInput, Prisma.ChatUncheckedCreateWithoutProductInput>
}

export type ChatUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.ChatWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatUpdateWithoutProductInput, Prisma.ChatUncheckedUpdateWithoutProductInput>
}

export type ChatUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.ChatScalarWhereInput
  data: Prisma.XOR<Prisma.ChatUpdateManyMutationInput, Prisma.ChatUncheckedUpdateManyWithoutProductInput>
}

export type ChatCreateWithoutMessagesInput = {
  id?: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutChatsInput
  product: Prisma.ProductCreateNestedOneWithoutChatsInput
  business?: Prisma.BusinessCreateNestedOneWithoutChatsInput
  worker?: Prisma.WorkerCreateNestedOneWithoutChatsInput
}

export type ChatUncheckedCreateWithoutMessagesInput = {
  id?: string
  clientId: string
  productId: string
  businessId?: string | null
  workerId?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatCreateOrConnectWithoutMessagesInput = {
  where: Prisma.ChatWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatCreateWithoutMessagesInput, Prisma.ChatUncheckedCreateWithoutMessagesInput>
}

export type ChatUpsertWithoutMessagesInput = {
  update: Prisma.XOR<Prisma.ChatUpdateWithoutMessagesInput, Prisma.ChatUncheckedUpdateWithoutMessagesInput>
  create: Prisma.XOR<Prisma.ChatCreateWithoutMessagesInput, Prisma.ChatUncheckedCreateWithoutMessagesInput>
  where?: Prisma.ChatWhereInput
}

export type ChatUpdateToOneWithWhereWithoutMessagesInput = {
  where?: Prisma.ChatWhereInput
  data: Prisma.XOR<Prisma.ChatUpdateWithoutMessagesInput, Prisma.ChatUncheckedUpdateWithoutMessagesInput>
}

export type ChatUpdateWithoutMessagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutChatsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutChatsNestedInput
  business?: Prisma.BusinessUpdateOneWithoutChatsNestedInput
  worker?: Prisma.WorkerUpdateOneWithoutChatsNestedInput
}

export type ChatUncheckedUpdateWithoutMessagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatCreateManyBusinessInput = {
  id?: string
  clientId: string
  productId: string
  workerId?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutChatsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutChatsNestedInput
  worker?: Prisma.WorkerUpdateOneWithoutChatsNestedInput
  messages?: Prisma.ChatMessageUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  messages?: Prisma.ChatMessageUncheckedUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateManyWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatCreateManyClientInput = {
  id?: string
  productId: string
  businessId?: string | null
  workerId?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutChatsNestedInput
  business?: Prisma.BusinessUpdateOneWithoutChatsNestedInput
  worker?: Prisma.WorkerUpdateOneWithoutChatsNestedInput
  messages?: Prisma.ChatMessageUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  messages?: Prisma.ChatMessageUncheckedUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateManyWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatCreateManyWorkerInput = {
  id?: string
  clientId: string
  productId: string
  businessId?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatUpdateWithoutWorkerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutChatsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutChatsNestedInput
  business?: Prisma.BusinessUpdateOneWithoutChatsNestedInput
  messages?: Prisma.ChatMessageUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateWithoutWorkerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  messages?: Prisma.ChatMessageUncheckedUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateManyWithoutWorkerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatCreateManyProductInput = {
  id?: string
  clientId: string
  businessId?: string | null
  workerId?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutChatsNestedInput
  business?: Prisma.BusinessUpdateOneWithoutChatsNestedInput
  worker?: Prisma.WorkerUpdateOneWithoutChatsNestedInput
  messages?: Prisma.ChatMessageUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  messages?: Prisma.ChatMessageUncheckedUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ChatCountOutputType
 */

export type ChatCountOutputType = {
  messages: number
}

export type ChatCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  messages?: boolean | ChatCountOutputTypeCountMessagesArgs
}

/**
 * ChatCountOutputType without action
 */
export type ChatCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatCountOutputType
   */
  select?: Prisma.ChatCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ChatCountOutputType without action
 */
export type ChatCountOutputTypeCountMessagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatMessageWhereInput
}


export type ChatSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clientId?: boolean
  productId?: boolean
  businessId?: boolean
  workerId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  business?: boolean | Prisma.Chat$businessArgs<ExtArgs>
  worker?: boolean | Prisma.Chat$workerArgs<ExtArgs>
  messages?: boolean | Prisma.Chat$messagesArgs<ExtArgs>
  _count?: boolean | Prisma.ChatCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chat"]>

export type ChatSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clientId?: boolean
  productId?: boolean
  businessId?: boolean
  workerId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  business?: boolean | Prisma.Chat$businessArgs<ExtArgs>
  worker?: boolean | Prisma.Chat$workerArgs<ExtArgs>
}, ExtArgs["result"]["chat"]>

export type ChatSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clientId?: boolean
  productId?: boolean
  businessId?: boolean
  workerId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  business?: boolean | Prisma.Chat$businessArgs<ExtArgs>
  worker?: boolean | Prisma.Chat$workerArgs<ExtArgs>
}, ExtArgs["result"]["chat"]>

export type ChatSelectScalar = {
  id?: boolean
  clientId?: boolean
  productId?: boolean
  businessId?: boolean
  workerId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ChatOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "clientId" | "productId" | "businessId" | "workerId" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["chat"]>
export type ChatInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  business?: boolean | Prisma.Chat$businessArgs<ExtArgs>
  worker?: boolean | Prisma.Chat$workerArgs<ExtArgs>
  messages?: boolean | Prisma.Chat$messagesArgs<ExtArgs>
  _count?: boolean | Prisma.ChatCountOutputTypeDefaultArgs<ExtArgs>
}
export type ChatIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  business?: boolean | Prisma.Chat$businessArgs<ExtArgs>
  worker?: boolean | Prisma.Chat$workerArgs<ExtArgs>
}
export type ChatIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  business?: boolean | Prisma.Chat$businessArgs<ExtArgs>
  worker?: boolean | Prisma.Chat$workerArgs<ExtArgs>
}

export type $ChatPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Chat"
  objects: {
    client: Prisma.$ClientPayload<ExtArgs>
    product: Prisma.$ProductPayload<ExtArgs>
    business: Prisma.$BusinessPayload<ExtArgs> | null
    worker: Prisma.$WorkerPayload<ExtArgs> | null
    messages: Prisma.$ChatMessagePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    clientId: string
    productId: string
    businessId: string | null
    workerId: string | null
    status: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["chat"]>
  composites: {}
}

export type ChatGetPayload<S extends boolean | null | undefined | ChatDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatPayload, S>

export type ChatCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatCountAggregateInputType | true
  }

export interface ChatDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chat'], meta: { name: 'Chat' } }
  /**
   * Find zero or one Chat that matches the filter.
   * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
   * @example
   * // Get one Chat
   * const chat = await prisma.chat.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Chat that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
   * @example
   * // Get one Chat
   * const chat = await prisma.chat.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chat that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatFindFirstArgs} args - Arguments to find a Chat
   * @example
   * // Get one Chat
   * const chat = await prisma.chat.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chat that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
   * @example
   * // Get one Chat
   * const chat = await prisma.chat.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Chats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Chats
   * const chats = await prisma.chat.findMany()
   * 
   * // Get first 10 Chats
   * const chats = await prisma.chat.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatWithIdOnly = await prisma.chat.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatFindManyArgs>(args?: Prisma.SelectSubset<T, ChatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Chat.
   * @param {ChatCreateArgs} args - Arguments to create a Chat.
   * @example
   * // Create one Chat
   * const Chat = await prisma.chat.create({
   *   data: {
   *     // ... data to create a Chat
   *   }
   * })
   * 
   */
  create<T extends ChatCreateArgs>(args: Prisma.SelectSubset<T, ChatCreateArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Chats.
   * @param {ChatCreateManyArgs} args - Arguments to create many Chats.
   * @example
   * // Create many Chats
   * const chat = await prisma.chat.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChatCreateManyArgs>(args?: Prisma.SelectSubset<T, ChatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Chats and returns the data saved in the database.
   * @param {ChatCreateManyAndReturnArgs} args - Arguments to create many Chats.
   * @example
   * // Create many Chats
   * const chat = await prisma.chat.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Chats and only return the `id`
   * const chatWithIdOnly = await prisma.chat.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChatCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Chat.
   * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
   * @example
   * // Delete one Chat
   * const Chat = await prisma.chat.delete({
   *   where: {
   *     // ... filter to delete one Chat
   *   }
   * })
   * 
   */
  delete<T extends ChatDeleteArgs>(args: Prisma.SelectSubset<T, ChatDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Chat.
   * @param {ChatUpdateArgs} args - Arguments to update one Chat.
   * @example
   * // Update one Chat
   * const chat = await prisma.chat.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatUpdateArgs>(args: Prisma.SelectSubset<T, ChatUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Chats.
   * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
   * @example
   * // Delete a few Chats
   * const { count } = await prisma.chat.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Chats
   * const chat = await prisma.chat.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chats and returns the data updated in the database.
   * @param {ChatUpdateManyAndReturnArgs} args - Arguments to update many Chats.
   * @example
   * // Update many Chats
   * const chat = await prisma.chat.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Chats and only return the `id`
   * const chatWithIdOnly = await prisma.chat.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChatUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Chat.
   * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
   * @example
   * // Update or create a Chat
   * const chat = await prisma.chat.upsert({
   *   create: {
   *     // ... data to create a Chat
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Chat we want to update
   *   }
   * })
   */
  upsert<T extends ChatUpsertArgs>(args: Prisma.SelectSubset<T, ChatUpsertArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatCountArgs} args - Arguments to filter Chats to count.
   * @example
   * // Count the number of Chats
   * const count = await prisma.chat.count({
   *   where: {
   *     // ... the filter for the Chats we want to count
   *   }
   * })
  **/
  count<T extends ChatCountArgs>(
    args?: Prisma.Subset<T, ChatCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Chat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatAggregateArgs>(args: Prisma.Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

  /**
   * Group by Chat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatGroupByArgs['orderBy'] }
      : { orderBy?: ChatGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Chat model
 */
readonly fields: ChatFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Chat.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  client<T extends Prisma.ClientDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClientDefaultArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  business<T extends Prisma.Chat$businessArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Chat$businessArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  worker<T extends Prisma.Chat$workerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Chat$workerArgs<ExtArgs>>): Prisma.Prisma__WorkerClient<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  messages<T extends Prisma.Chat$messagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Chat$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Chat model
 */
export interface ChatFieldRefs {
  readonly id: Prisma.FieldRef<"Chat", 'String'>
  readonly clientId: Prisma.FieldRef<"Chat", 'String'>
  readonly productId: Prisma.FieldRef<"Chat", 'String'>
  readonly businessId: Prisma.FieldRef<"Chat", 'String'>
  readonly workerId: Prisma.FieldRef<"Chat", 'String'>
  readonly status: Prisma.FieldRef<"Chat", 'String'>
  readonly createdAt: Prisma.FieldRef<"Chat", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Chat", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Chat findUnique
 */
export type ChatFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * Filter, which Chat to fetch.
   */
  where: Prisma.ChatWhereUniqueInput
}

/**
 * Chat findUniqueOrThrow
 */
export type ChatFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * Filter, which Chat to fetch.
   */
  where: Prisma.ChatWhereUniqueInput
}

/**
 * Chat findFirst
 */
export type ChatFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * Filter, which Chat to fetch.
   */
  where?: Prisma.ChatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chats to fetch.
   */
  orderBy?: Prisma.ChatOrderByWithRelationInput | Prisma.ChatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Chats.
   */
  cursor?: Prisma.ChatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Chats.
   */
  distinct?: Prisma.ChatScalarFieldEnum | Prisma.ChatScalarFieldEnum[]
}

/**
 * Chat findFirstOrThrow
 */
export type ChatFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * Filter, which Chat to fetch.
   */
  where?: Prisma.ChatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chats to fetch.
   */
  orderBy?: Prisma.ChatOrderByWithRelationInput | Prisma.ChatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Chats.
   */
  cursor?: Prisma.ChatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Chats.
   */
  distinct?: Prisma.ChatScalarFieldEnum | Prisma.ChatScalarFieldEnum[]
}

/**
 * Chat findMany
 */
export type ChatFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * Filter, which Chats to fetch.
   */
  where?: Prisma.ChatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chats to fetch.
   */
  orderBy?: Prisma.ChatOrderByWithRelationInput | Prisma.ChatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Chats.
   */
  cursor?: Prisma.ChatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chats.
   */
  skip?: number
  distinct?: Prisma.ChatScalarFieldEnum | Prisma.ChatScalarFieldEnum[]
}

/**
 * Chat create
 */
export type ChatCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * The data needed to create a Chat.
   */
  data: Prisma.XOR<Prisma.ChatCreateInput, Prisma.ChatUncheckedCreateInput>
}

/**
 * Chat createMany
 */
export type ChatCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Chats.
   */
  data: Prisma.ChatCreateManyInput | Prisma.ChatCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Chat createManyAndReturn
 */
export type ChatCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * The data used to create many Chats.
   */
  data: Prisma.ChatCreateManyInput | Prisma.ChatCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Chat update
 */
export type ChatUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * The data needed to update a Chat.
   */
  data: Prisma.XOR<Prisma.ChatUpdateInput, Prisma.ChatUncheckedUpdateInput>
  /**
   * Choose, which Chat to update.
   */
  where: Prisma.ChatWhereUniqueInput
}

/**
 * Chat updateMany
 */
export type ChatUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Chats.
   */
  data: Prisma.XOR<Prisma.ChatUpdateManyMutationInput, Prisma.ChatUncheckedUpdateManyInput>
  /**
   * Filter which Chats to update
   */
  where?: Prisma.ChatWhereInput
  /**
   * Limit how many Chats to update.
   */
  limit?: number
}

/**
 * Chat updateManyAndReturn
 */
export type ChatUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * The data used to update Chats.
   */
  data: Prisma.XOR<Prisma.ChatUpdateManyMutationInput, Prisma.ChatUncheckedUpdateManyInput>
  /**
   * Filter which Chats to update
   */
  where?: Prisma.ChatWhereInput
  /**
   * Limit how many Chats to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Chat upsert
 */
export type ChatUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * The filter to search for the Chat to update in case it exists.
   */
  where: Prisma.ChatWhereUniqueInput
  /**
   * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
   */
  create: Prisma.XOR<Prisma.ChatCreateInput, Prisma.ChatUncheckedCreateInput>
  /**
   * In case the Chat was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatUpdateInput, Prisma.ChatUncheckedUpdateInput>
}

/**
 * Chat delete
 */
export type ChatDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * Filter which Chat to delete.
   */
  where: Prisma.ChatWhereUniqueInput
}

/**
 * Chat deleteMany
 */
export type ChatDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Chats to delete
   */
  where?: Prisma.ChatWhereInput
  /**
   * Limit how many Chats to delete.
   */
  limit?: number
}

/**
 * Chat.business
 */
export type Chat$businessArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Business
   */
  select?: Prisma.BusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Business
   */
  omit?: Prisma.BusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessInclude<ExtArgs> | null
  where?: Prisma.BusinessWhereInput
}

/**
 * Chat.worker
 */
export type Chat$workerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Worker
   */
  select?: Prisma.WorkerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Worker
   */
  omit?: Prisma.WorkerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerInclude<ExtArgs> | null
  where?: Prisma.WorkerWhereInput
}

/**
 * Chat.messages
 */
export type Chat$messagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
  where?: Prisma.ChatMessageWhereInput
  orderBy?: Prisma.ChatMessageOrderByWithRelationInput | Prisma.ChatMessageOrderByWithRelationInput[]
  cursor?: Prisma.ChatMessageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChatMessageScalarFieldEnum | Prisma.ChatMessageScalarFieldEnum[]
}

/**
 * Chat without action
 */
export type ChatDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
}
