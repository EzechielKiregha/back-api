
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FreelanceOrder` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FreelanceOrder
 * 
 */
export type FreelanceOrderModel = runtime.Types.Result.DefaultSelection<Prisma.$FreelanceOrderPayload>

export type AggregateFreelanceOrder = {
  _count: FreelanceOrderCountAggregateOutputType | null
  _avg: FreelanceOrderAvgAggregateOutputType | null
  _sum: FreelanceOrderSumAggregateOutputType | null
  _min: FreelanceOrderMinAggregateOutputType | null
  _max: FreelanceOrderMaxAggregateOutputType | null
}

export type FreelanceOrderAvgAggregateOutputType = {
  quantity: number | null
  totalAmount: number | null
  escrowAmount: number | null
  commissionPercent: number | null
}

export type FreelanceOrderSumAggregateOutputType = {
  quantity: number | null
  totalAmount: number | null
  escrowAmount: number | null
  commissionPercent: number | null
}

export type FreelanceOrderMinAggregateOutputType = {
  id: string | null
  clientId: string | null
  serviceId: string | null
  status: $Enums.FreelanceStatus | null
  quantity: number | null
  totalAmount: number | null
  escrowAmount: number | null
  commissionPercent: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FreelanceOrderMaxAggregateOutputType = {
  id: string | null
  clientId: string | null
  serviceId: string | null
  status: $Enums.FreelanceStatus | null
  quantity: number | null
  totalAmount: number | null
  escrowAmount: number | null
  commissionPercent: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FreelanceOrderCountAggregateOutputType = {
  id: number
  clientId: number
  serviceId: number
  status: number
  quantity: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type FreelanceOrderAvgAggregateInputType = {
  quantity?: true
  totalAmount?: true
  escrowAmount?: true
  commissionPercent?: true
}

export type FreelanceOrderSumAggregateInputType = {
  quantity?: true
  totalAmount?: true
  escrowAmount?: true
  commissionPercent?: true
}

export type FreelanceOrderMinAggregateInputType = {
  id?: true
  clientId?: true
  serviceId?: true
  status?: true
  quantity?: true
  totalAmount?: true
  escrowAmount?: true
  commissionPercent?: true
  createdAt?: true
  updatedAt?: true
}

export type FreelanceOrderMaxAggregateInputType = {
  id?: true
  clientId?: true
  serviceId?: true
  status?: true
  quantity?: true
  totalAmount?: true
  escrowAmount?: true
  commissionPercent?: true
  createdAt?: true
  updatedAt?: true
}

export type FreelanceOrderCountAggregateInputType = {
  id?: true
  clientId?: true
  serviceId?: true
  status?: true
  quantity?: true
  totalAmount?: true
  escrowAmount?: true
  commissionPercent?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FreelanceOrderAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FreelanceOrder to aggregate.
   */
  where?: Prisma.FreelanceOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FreelanceOrders to fetch.
   */
  orderBy?: Prisma.FreelanceOrderOrderByWithRelationInput | Prisma.FreelanceOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FreelanceOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FreelanceOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FreelanceOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FreelanceOrders
  **/
  _count?: true | FreelanceOrderCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FreelanceOrderAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FreelanceOrderSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FreelanceOrderMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FreelanceOrderMaxAggregateInputType
}

export type GetFreelanceOrderAggregateType<T extends FreelanceOrderAggregateArgs> = {
      [P in keyof T & keyof AggregateFreelanceOrder]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFreelanceOrder[P]>
    : Prisma.GetScalarType<T[P], AggregateFreelanceOrder[P]>
}




export type FreelanceOrderGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FreelanceOrderWhereInput
  orderBy?: Prisma.FreelanceOrderOrderByWithAggregationInput | Prisma.FreelanceOrderOrderByWithAggregationInput[]
  by: Prisma.FreelanceOrderScalarFieldEnum[] | Prisma.FreelanceOrderScalarFieldEnum
  having?: Prisma.FreelanceOrderScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FreelanceOrderCountAggregateInputType | true
  _avg?: FreelanceOrderAvgAggregateInputType
  _sum?: FreelanceOrderSumAggregateInputType
  _min?: FreelanceOrderMinAggregateInputType
  _max?: FreelanceOrderMaxAggregateInputType
}

export type FreelanceOrderGroupByOutputType = {
  id: string
  clientId: string
  serviceId: string
  status: $Enums.FreelanceStatus
  quantity: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt: Date
  updatedAt: Date
  _count: FreelanceOrderCountAggregateOutputType | null
  _avg: FreelanceOrderAvgAggregateOutputType | null
  _sum: FreelanceOrderSumAggregateOutputType | null
  _min: FreelanceOrderMinAggregateOutputType | null
  _max: FreelanceOrderMaxAggregateOutputType | null
}

type GetFreelanceOrderGroupByPayload<T extends FreelanceOrderGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FreelanceOrderGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FreelanceOrderGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FreelanceOrderGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FreelanceOrderGroupByOutputType[P]>
      }
    >
  > 



export type FreelanceOrderWhereInput = {
  AND?: Prisma.FreelanceOrderWhereInput | Prisma.FreelanceOrderWhereInput[]
  OR?: Prisma.FreelanceOrderWhereInput[]
  NOT?: Prisma.FreelanceOrderWhereInput | Prisma.FreelanceOrderWhereInput[]
  id?: Prisma.StringFilter<"FreelanceOrder"> | string
  clientId?: Prisma.StringFilter<"FreelanceOrder"> | string
  serviceId?: Prisma.StringFilter<"FreelanceOrder"> | string
  status?: Prisma.EnumFreelanceStatusFilter<"FreelanceOrder"> | $Enums.FreelanceStatus
  quantity?: Prisma.IntFilter<"FreelanceOrder"> | number
  totalAmount?: Prisma.FloatFilter<"FreelanceOrder"> | number
  escrowAmount?: Prisma.FloatFilter<"FreelanceOrder"> | number
  commissionPercent?: Prisma.FloatFilter<"FreelanceOrder"> | number
  createdAt?: Prisma.DateTimeFilter<"FreelanceOrder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FreelanceOrder"> | Date | string
  client?: Prisma.XOR<Prisma.ClientScalarRelationFilter, Prisma.ClientWhereInput>
  service?: Prisma.XOR<Prisma.FreelanceServiceScalarRelationFilter, Prisma.FreelanceServiceWhereInput>
  businesses?: Prisma.BusinessListRelationFilter
}

export type FreelanceOrderOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  escrowAmount?: Prisma.SortOrder
  commissionPercent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  client?: Prisma.ClientOrderByWithRelationInput
  service?: Prisma.FreelanceServiceOrderByWithRelationInput
  businesses?: Prisma.BusinessOrderByRelationAggregateInput
}

export type FreelanceOrderWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FreelanceOrderWhereInput | Prisma.FreelanceOrderWhereInput[]
  OR?: Prisma.FreelanceOrderWhereInput[]
  NOT?: Prisma.FreelanceOrderWhereInput | Prisma.FreelanceOrderWhereInput[]
  clientId?: Prisma.StringFilter<"FreelanceOrder"> | string
  serviceId?: Prisma.StringFilter<"FreelanceOrder"> | string
  status?: Prisma.EnumFreelanceStatusFilter<"FreelanceOrder"> | $Enums.FreelanceStatus
  quantity?: Prisma.IntFilter<"FreelanceOrder"> | number
  totalAmount?: Prisma.FloatFilter<"FreelanceOrder"> | number
  escrowAmount?: Prisma.FloatFilter<"FreelanceOrder"> | number
  commissionPercent?: Prisma.FloatFilter<"FreelanceOrder"> | number
  createdAt?: Prisma.DateTimeFilter<"FreelanceOrder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FreelanceOrder"> | Date | string
  client?: Prisma.XOR<Prisma.ClientScalarRelationFilter, Prisma.ClientWhereInput>
  service?: Prisma.XOR<Prisma.FreelanceServiceScalarRelationFilter, Prisma.FreelanceServiceWhereInput>
  businesses?: Prisma.BusinessListRelationFilter
}, "id">

export type FreelanceOrderOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  escrowAmount?: Prisma.SortOrder
  commissionPercent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FreelanceOrderCountOrderByAggregateInput
  _avg?: Prisma.FreelanceOrderAvgOrderByAggregateInput
  _max?: Prisma.FreelanceOrderMaxOrderByAggregateInput
  _min?: Prisma.FreelanceOrderMinOrderByAggregateInput
  _sum?: Prisma.FreelanceOrderSumOrderByAggregateInput
}

export type FreelanceOrderScalarWhereWithAggregatesInput = {
  AND?: Prisma.FreelanceOrderScalarWhereWithAggregatesInput | Prisma.FreelanceOrderScalarWhereWithAggregatesInput[]
  OR?: Prisma.FreelanceOrderScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FreelanceOrderScalarWhereWithAggregatesInput | Prisma.FreelanceOrderScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FreelanceOrder"> | string
  clientId?: Prisma.StringWithAggregatesFilter<"FreelanceOrder"> | string
  serviceId?: Prisma.StringWithAggregatesFilter<"FreelanceOrder"> | string
  status?: Prisma.EnumFreelanceStatusWithAggregatesFilter<"FreelanceOrder"> | $Enums.FreelanceStatus
  quantity?: Prisma.IntWithAggregatesFilter<"FreelanceOrder"> | number
  totalAmount?: Prisma.FloatWithAggregatesFilter<"FreelanceOrder"> | number
  escrowAmount?: Prisma.FloatWithAggregatesFilter<"FreelanceOrder"> | number
  commissionPercent?: Prisma.FloatWithAggregatesFilter<"FreelanceOrder"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FreelanceOrder"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FreelanceOrder"> | Date | string
}

export type FreelanceOrderCreateInput = {
  id?: string
  status?: $Enums.FreelanceStatus
  quantity?: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutFreelanceOrdersInput
  service: Prisma.FreelanceServiceCreateNestedOneWithoutOrdersInput
  businesses?: Prisma.BusinessCreateNestedManyWithoutFreelanceOrdersInput
}

export type FreelanceOrderUncheckedCreateInput = {
  id?: string
  clientId: string
  serviceId: string
  status?: $Enums.FreelanceStatus
  quantity?: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt?: Date | string
  updatedAt?: Date | string
  businesses?: Prisma.BusinessUncheckedCreateNestedManyWithoutFreelanceOrdersInput
}

export type FreelanceOrderUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutFreelanceOrdersNestedInput
  service?: Prisma.FreelanceServiceUpdateOneRequiredWithoutOrdersNestedInput
  businesses?: Prisma.BusinessUpdateManyWithoutFreelanceOrdersNestedInput
}

export type FreelanceOrderUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  businesses?: Prisma.BusinessUncheckedUpdateManyWithoutFreelanceOrdersNestedInput
}

export type FreelanceOrderCreateManyInput = {
  id?: string
  clientId: string
  serviceId: string
  status?: $Enums.FreelanceStatus
  quantity?: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FreelanceOrderUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceOrderUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceOrderListRelationFilter = {
  every?: Prisma.FreelanceOrderWhereInput
  some?: Prisma.FreelanceOrderWhereInput
  none?: Prisma.FreelanceOrderWhereInput
}

export type FreelanceOrderOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FreelanceOrderCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  escrowAmount?: Prisma.SortOrder
  commissionPercent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FreelanceOrderAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  escrowAmount?: Prisma.SortOrder
  commissionPercent?: Prisma.SortOrder
}

export type FreelanceOrderMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  escrowAmount?: Prisma.SortOrder
  commissionPercent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FreelanceOrderMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  escrowAmount?: Prisma.SortOrder
  commissionPercent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FreelanceOrderSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  escrowAmount?: Prisma.SortOrder
  commissionPercent?: Prisma.SortOrder
}

export type FreelanceOrderCreateNestedManyWithoutBusinessesInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutBusinessesInput, Prisma.FreelanceOrderUncheckedCreateWithoutBusinessesInput> | Prisma.FreelanceOrderCreateWithoutBusinessesInput[] | Prisma.FreelanceOrderUncheckedCreateWithoutBusinessesInput[]
  connectOrCreate?: Prisma.FreelanceOrderCreateOrConnectWithoutBusinessesInput | Prisma.FreelanceOrderCreateOrConnectWithoutBusinessesInput[]
  connect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
}

export type FreelanceOrderUncheckedCreateNestedManyWithoutBusinessesInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutBusinessesInput, Prisma.FreelanceOrderUncheckedCreateWithoutBusinessesInput> | Prisma.FreelanceOrderCreateWithoutBusinessesInput[] | Prisma.FreelanceOrderUncheckedCreateWithoutBusinessesInput[]
  connectOrCreate?: Prisma.FreelanceOrderCreateOrConnectWithoutBusinessesInput | Prisma.FreelanceOrderCreateOrConnectWithoutBusinessesInput[]
  connect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
}

export type FreelanceOrderUpdateManyWithoutBusinessesNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutBusinessesInput, Prisma.FreelanceOrderUncheckedCreateWithoutBusinessesInput> | Prisma.FreelanceOrderCreateWithoutBusinessesInput[] | Prisma.FreelanceOrderUncheckedCreateWithoutBusinessesInput[]
  connectOrCreate?: Prisma.FreelanceOrderCreateOrConnectWithoutBusinessesInput | Prisma.FreelanceOrderCreateOrConnectWithoutBusinessesInput[]
  upsert?: Prisma.FreelanceOrderUpsertWithWhereUniqueWithoutBusinessesInput | Prisma.FreelanceOrderUpsertWithWhereUniqueWithoutBusinessesInput[]
  set?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  disconnect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  delete?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  connect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  update?: Prisma.FreelanceOrderUpdateWithWhereUniqueWithoutBusinessesInput | Prisma.FreelanceOrderUpdateWithWhereUniqueWithoutBusinessesInput[]
  updateMany?: Prisma.FreelanceOrderUpdateManyWithWhereWithoutBusinessesInput | Prisma.FreelanceOrderUpdateManyWithWhereWithoutBusinessesInput[]
  deleteMany?: Prisma.FreelanceOrderScalarWhereInput | Prisma.FreelanceOrderScalarWhereInput[]
}

export type FreelanceOrderUncheckedUpdateManyWithoutBusinessesNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutBusinessesInput, Prisma.FreelanceOrderUncheckedCreateWithoutBusinessesInput> | Prisma.FreelanceOrderCreateWithoutBusinessesInput[] | Prisma.FreelanceOrderUncheckedCreateWithoutBusinessesInput[]
  connectOrCreate?: Prisma.FreelanceOrderCreateOrConnectWithoutBusinessesInput | Prisma.FreelanceOrderCreateOrConnectWithoutBusinessesInput[]
  upsert?: Prisma.FreelanceOrderUpsertWithWhereUniqueWithoutBusinessesInput | Prisma.FreelanceOrderUpsertWithWhereUniqueWithoutBusinessesInput[]
  set?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  disconnect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  delete?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  connect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  update?: Prisma.FreelanceOrderUpdateWithWhereUniqueWithoutBusinessesInput | Prisma.FreelanceOrderUpdateWithWhereUniqueWithoutBusinessesInput[]
  updateMany?: Prisma.FreelanceOrderUpdateManyWithWhereWithoutBusinessesInput | Prisma.FreelanceOrderUpdateManyWithWhereWithoutBusinessesInput[]
  deleteMany?: Prisma.FreelanceOrderScalarWhereInput | Prisma.FreelanceOrderScalarWhereInput[]
}

export type FreelanceOrderCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutClientInput, Prisma.FreelanceOrderUncheckedCreateWithoutClientInput> | Prisma.FreelanceOrderCreateWithoutClientInput[] | Prisma.FreelanceOrderUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.FreelanceOrderCreateOrConnectWithoutClientInput | Prisma.FreelanceOrderCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.FreelanceOrderCreateManyClientInputEnvelope
  connect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
}

export type FreelanceOrderUncheckedCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutClientInput, Prisma.FreelanceOrderUncheckedCreateWithoutClientInput> | Prisma.FreelanceOrderCreateWithoutClientInput[] | Prisma.FreelanceOrderUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.FreelanceOrderCreateOrConnectWithoutClientInput | Prisma.FreelanceOrderCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.FreelanceOrderCreateManyClientInputEnvelope
  connect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
}

export type FreelanceOrderUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutClientInput, Prisma.FreelanceOrderUncheckedCreateWithoutClientInput> | Prisma.FreelanceOrderCreateWithoutClientInput[] | Prisma.FreelanceOrderUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.FreelanceOrderCreateOrConnectWithoutClientInput | Prisma.FreelanceOrderCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.FreelanceOrderUpsertWithWhereUniqueWithoutClientInput | Prisma.FreelanceOrderUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.FreelanceOrderCreateManyClientInputEnvelope
  set?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  disconnect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  delete?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  connect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  update?: Prisma.FreelanceOrderUpdateWithWhereUniqueWithoutClientInput | Prisma.FreelanceOrderUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.FreelanceOrderUpdateManyWithWhereWithoutClientInput | Prisma.FreelanceOrderUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.FreelanceOrderScalarWhereInput | Prisma.FreelanceOrderScalarWhereInput[]
}

export type FreelanceOrderUncheckedUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutClientInput, Prisma.FreelanceOrderUncheckedCreateWithoutClientInput> | Prisma.FreelanceOrderCreateWithoutClientInput[] | Prisma.FreelanceOrderUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.FreelanceOrderCreateOrConnectWithoutClientInput | Prisma.FreelanceOrderCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.FreelanceOrderUpsertWithWhereUniqueWithoutClientInput | Prisma.FreelanceOrderUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.FreelanceOrderCreateManyClientInputEnvelope
  set?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  disconnect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  delete?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  connect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  update?: Prisma.FreelanceOrderUpdateWithWhereUniqueWithoutClientInput | Prisma.FreelanceOrderUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.FreelanceOrderUpdateManyWithWhereWithoutClientInput | Prisma.FreelanceOrderUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.FreelanceOrderScalarWhereInput | Prisma.FreelanceOrderScalarWhereInput[]
}

export type FreelanceOrderCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutServiceInput, Prisma.FreelanceOrderUncheckedCreateWithoutServiceInput> | Prisma.FreelanceOrderCreateWithoutServiceInput[] | Prisma.FreelanceOrderUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.FreelanceOrderCreateOrConnectWithoutServiceInput | Prisma.FreelanceOrderCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.FreelanceOrderCreateManyServiceInputEnvelope
  connect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
}

export type FreelanceOrderUncheckedCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutServiceInput, Prisma.FreelanceOrderUncheckedCreateWithoutServiceInput> | Prisma.FreelanceOrderCreateWithoutServiceInput[] | Prisma.FreelanceOrderUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.FreelanceOrderCreateOrConnectWithoutServiceInput | Prisma.FreelanceOrderCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.FreelanceOrderCreateManyServiceInputEnvelope
  connect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
}

export type FreelanceOrderUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutServiceInput, Prisma.FreelanceOrderUncheckedCreateWithoutServiceInput> | Prisma.FreelanceOrderCreateWithoutServiceInput[] | Prisma.FreelanceOrderUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.FreelanceOrderCreateOrConnectWithoutServiceInput | Prisma.FreelanceOrderCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.FreelanceOrderUpsertWithWhereUniqueWithoutServiceInput | Prisma.FreelanceOrderUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.FreelanceOrderCreateManyServiceInputEnvelope
  set?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  disconnect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  delete?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  connect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  update?: Prisma.FreelanceOrderUpdateWithWhereUniqueWithoutServiceInput | Prisma.FreelanceOrderUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.FreelanceOrderUpdateManyWithWhereWithoutServiceInput | Prisma.FreelanceOrderUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.FreelanceOrderScalarWhereInput | Prisma.FreelanceOrderScalarWhereInput[]
}

export type FreelanceOrderUncheckedUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutServiceInput, Prisma.FreelanceOrderUncheckedCreateWithoutServiceInput> | Prisma.FreelanceOrderCreateWithoutServiceInput[] | Prisma.FreelanceOrderUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.FreelanceOrderCreateOrConnectWithoutServiceInput | Prisma.FreelanceOrderCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.FreelanceOrderUpsertWithWhereUniqueWithoutServiceInput | Prisma.FreelanceOrderUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.FreelanceOrderCreateManyServiceInputEnvelope
  set?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  disconnect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  delete?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  connect?: Prisma.FreelanceOrderWhereUniqueInput | Prisma.FreelanceOrderWhereUniqueInput[]
  update?: Prisma.FreelanceOrderUpdateWithWhereUniqueWithoutServiceInput | Prisma.FreelanceOrderUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.FreelanceOrderUpdateManyWithWhereWithoutServiceInput | Prisma.FreelanceOrderUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.FreelanceOrderScalarWhereInput | Prisma.FreelanceOrderScalarWhereInput[]
}

export type EnumFreelanceStatusFieldUpdateOperationsInput = {
  set?: $Enums.FreelanceStatus
}

export type FreelanceOrderCreateWithoutBusinessesInput = {
  id?: string
  status?: $Enums.FreelanceStatus
  quantity?: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutFreelanceOrdersInput
  service: Prisma.FreelanceServiceCreateNestedOneWithoutOrdersInput
}

export type FreelanceOrderUncheckedCreateWithoutBusinessesInput = {
  id?: string
  clientId: string
  serviceId: string
  status?: $Enums.FreelanceStatus
  quantity?: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FreelanceOrderCreateOrConnectWithoutBusinessesInput = {
  where: Prisma.FreelanceOrderWhereUniqueInput
  create: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutBusinessesInput, Prisma.FreelanceOrderUncheckedCreateWithoutBusinessesInput>
}

export type FreelanceOrderUpsertWithWhereUniqueWithoutBusinessesInput = {
  where: Prisma.FreelanceOrderWhereUniqueInput
  update: Prisma.XOR<Prisma.FreelanceOrderUpdateWithoutBusinessesInput, Prisma.FreelanceOrderUncheckedUpdateWithoutBusinessesInput>
  create: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutBusinessesInput, Prisma.FreelanceOrderUncheckedCreateWithoutBusinessesInput>
}

export type FreelanceOrderUpdateWithWhereUniqueWithoutBusinessesInput = {
  where: Prisma.FreelanceOrderWhereUniqueInput
  data: Prisma.XOR<Prisma.FreelanceOrderUpdateWithoutBusinessesInput, Prisma.FreelanceOrderUncheckedUpdateWithoutBusinessesInput>
}

export type FreelanceOrderUpdateManyWithWhereWithoutBusinessesInput = {
  where: Prisma.FreelanceOrderScalarWhereInput
  data: Prisma.XOR<Prisma.FreelanceOrderUpdateManyMutationInput, Prisma.FreelanceOrderUncheckedUpdateManyWithoutBusinessesInput>
}

export type FreelanceOrderScalarWhereInput = {
  AND?: Prisma.FreelanceOrderScalarWhereInput | Prisma.FreelanceOrderScalarWhereInput[]
  OR?: Prisma.FreelanceOrderScalarWhereInput[]
  NOT?: Prisma.FreelanceOrderScalarWhereInput | Prisma.FreelanceOrderScalarWhereInput[]
  id?: Prisma.StringFilter<"FreelanceOrder"> | string
  clientId?: Prisma.StringFilter<"FreelanceOrder"> | string
  serviceId?: Prisma.StringFilter<"FreelanceOrder"> | string
  status?: Prisma.EnumFreelanceStatusFilter<"FreelanceOrder"> | $Enums.FreelanceStatus
  quantity?: Prisma.IntFilter<"FreelanceOrder"> | number
  totalAmount?: Prisma.FloatFilter<"FreelanceOrder"> | number
  escrowAmount?: Prisma.FloatFilter<"FreelanceOrder"> | number
  commissionPercent?: Prisma.FloatFilter<"FreelanceOrder"> | number
  createdAt?: Prisma.DateTimeFilter<"FreelanceOrder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FreelanceOrder"> | Date | string
}

export type FreelanceOrderCreateWithoutClientInput = {
  id?: string
  status?: $Enums.FreelanceStatus
  quantity?: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.FreelanceServiceCreateNestedOneWithoutOrdersInput
  businesses?: Prisma.BusinessCreateNestedManyWithoutFreelanceOrdersInput
}

export type FreelanceOrderUncheckedCreateWithoutClientInput = {
  id?: string
  serviceId: string
  status?: $Enums.FreelanceStatus
  quantity?: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt?: Date | string
  updatedAt?: Date | string
  businesses?: Prisma.BusinessUncheckedCreateNestedManyWithoutFreelanceOrdersInput
}

export type FreelanceOrderCreateOrConnectWithoutClientInput = {
  where: Prisma.FreelanceOrderWhereUniqueInput
  create: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutClientInput, Prisma.FreelanceOrderUncheckedCreateWithoutClientInput>
}

export type FreelanceOrderCreateManyClientInputEnvelope = {
  data: Prisma.FreelanceOrderCreateManyClientInput | Prisma.FreelanceOrderCreateManyClientInput[]
  skipDuplicates?: boolean
}

export type FreelanceOrderUpsertWithWhereUniqueWithoutClientInput = {
  where: Prisma.FreelanceOrderWhereUniqueInput
  update: Prisma.XOR<Prisma.FreelanceOrderUpdateWithoutClientInput, Prisma.FreelanceOrderUncheckedUpdateWithoutClientInput>
  create: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutClientInput, Prisma.FreelanceOrderUncheckedCreateWithoutClientInput>
}

export type FreelanceOrderUpdateWithWhereUniqueWithoutClientInput = {
  where: Prisma.FreelanceOrderWhereUniqueInput
  data: Prisma.XOR<Prisma.FreelanceOrderUpdateWithoutClientInput, Prisma.FreelanceOrderUncheckedUpdateWithoutClientInput>
}

export type FreelanceOrderUpdateManyWithWhereWithoutClientInput = {
  where: Prisma.FreelanceOrderScalarWhereInput
  data: Prisma.XOR<Prisma.FreelanceOrderUpdateManyMutationInput, Prisma.FreelanceOrderUncheckedUpdateManyWithoutClientInput>
}

export type FreelanceOrderCreateWithoutServiceInput = {
  id?: string
  status?: $Enums.FreelanceStatus
  quantity?: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutFreelanceOrdersInput
  businesses?: Prisma.BusinessCreateNestedManyWithoutFreelanceOrdersInput
}

export type FreelanceOrderUncheckedCreateWithoutServiceInput = {
  id?: string
  clientId: string
  status?: $Enums.FreelanceStatus
  quantity?: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt?: Date | string
  updatedAt?: Date | string
  businesses?: Prisma.BusinessUncheckedCreateNestedManyWithoutFreelanceOrdersInput
}

export type FreelanceOrderCreateOrConnectWithoutServiceInput = {
  where: Prisma.FreelanceOrderWhereUniqueInput
  create: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutServiceInput, Prisma.FreelanceOrderUncheckedCreateWithoutServiceInput>
}

export type FreelanceOrderCreateManyServiceInputEnvelope = {
  data: Prisma.FreelanceOrderCreateManyServiceInput | Prisma.FreelanceOrderCreateManyServiceInput[]
  skipDuplicates?: boolean
}

export type FreelanceOrderUpsertWithWhereUniqueWithoutServiceInput = {
  where: Prisma.FreelanceOrderWhereUniqueInput
  update: Prisma.XOR<Prisma.FreelanceOrderUpdateWithoutServiceInput, Prisma.FreelanceOrderUncheckedUpdateWithoutServiceInput>
  create: Prisma.XOR<Prisma.FreelanceOrderCreateWithoutServiceInput, Prisma.FreelanceOrderUncheckedCreateWithoutServiceInput>
}

export type FreelanceOrderUpdateWithWhereUniqueWithoutServiceInput = {
  where: Prisma.FreelanceOrderWhereUniqueInput
  data: Prisma.XOR<Prisma.FreelanceOrderUpdateWithoutServiceInput, Prisma.FreelanceOrderUncheckedUpdateWithoutServiceInput>
}

export type FreelanceOrderUpdateManyWithWhereWithoutServiceInput = {
  where: Prisma.FreelanceOrderScalarWhereInput
  data: Prisma.XOR<Prisma.FreelanceOrderUpdateManyMutationInput, Prisma.FreelanceOrderUncheckedUpdateManyWithoutServiceInput>
}

export type FreelanceOrderUpdateWithoutBusinessesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutFreelanceOrdersNestedInput
  service?: Prisma.FreelanceServiceUpdateOneRequiredWithoutOrdersNestedInput
}

export type FreelanceOrderUncheckedUpdateWithoutBusinessesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceOrderUncheckedUpdateManyWithoutBusinessesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceOrderCreateManyClientInput = {
  id?: string
  serviceId: string
  status?: $Enums.FreelanceStatus
  quantity?: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FreelanceOrderUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.FreelanceServiceUpdateOneRequiredWithoutOrdersNestedInput
  businesses?: Prisma.BusinessUpdateManyWithoutFreelanceOrdersNestedInput
}

export type FreelanceOrderUncheckedUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  businesses?: Prisma.BusinessUncheckedUpdateManyWithoutFreelanceOrdersNestedInput
}

export type FreelanceOrderUncheckedUpdateManyWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FreelanceOrderCreateManyServiceInput = {
  id?: string
  clientId: string
  status?: $Enums.FreelanceStatus
  quantity?: number
  totalAmount: number
  escrowAmount: number
  commissionPercent: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FreelanceOrderUpdateWithoutServiceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutFreelanceOrdersNestedInput
  businesses?: Prisma.BusinessUpdateManyWithoutFreelanceOrdersNestedInput
}

export type FreelanceOrderUncheckedUpdateWithoutServiceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  businesses?: Prisma.BusinessUncheckedUpdateManyWithoutFreelanceOrdersNestedInput
}

export type FreelanceOrderUncheckedUpdateManyWithoutServiceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumFreelanceStatusFieldUpdateOperationsInput | $Enums.FreelanceStatus
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  escrowAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  commissionPercent?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type FreelanceOrderCountOutputType
 */

export type FreelanceOrderCountOutputType = {
  businesses: number
}

export type FreelanceOrderCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  businesses?: boolean | FreelanceOrderCountOutputTypeCountBusinessesArgs
}

/**
 * FreelanceOrderCountOutputType without action
 */
export type FreelanceOrderCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrderCountOutputType
   */
  select?: Prisma.FreelanceOrderCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FreelanceOrderCountOutputType without action
 */
export type FreelanceOrderCountOutputTypeCountBusinessesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BusinessWhereInput
}


export type FreelanceOrderSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clientId?: boolean
  serviceId?: boolean
  status?: boolean
  quantity?: boolean
  totalAmount?: boolean
  escrowAmount?: boolean
  commissionPercent?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  service?: boolean | Prisma.FreelanceServiceDefaultArgs<ExtArgs>
  businesses?: boolean | Prisma.FreelanceOrder$businessesArgs<ExtArgs>
  _count?: boolean | Prisma.FreelanceOrderCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["freelanceOrder"]>

export type FreelanceOrderSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clientId?: boolean
  serviceId?: boolean
  status?: boolean
  quantity?: boolean
  totalAmount?: boolean
  escrowAmount?: boolean
  commissionPercent?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  service?: boolean | Prisma.FreelanceServiceDefaultArgs<ExtArgs>
}, ExtArgs["result"]["freelanceOrder"]>

export type FreelanceOrderSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clientId?: boolean
  serviceId?: boolean
  status?: boolean
  quantity?: boolean
  totalAmount?: boolean
  escrowAmount?: boolean
  commissionPercent?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  service?: boolean | Prisma.FreelanceServiceDefaultArgs<ExtArgs>
}, ExtArgs["result"]["freelanceOrder"]>

export type FreelanceOrderSelectScalar = {
  id?: boolean
  clientId?: boolean
  serviceId?: boolean
  status?: boolean
  quantity?: boolean
  totalAmount?: boolean
  escrowAmount?: boolean
  commissionPercent?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FreelanceOrderOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "clientId" | "serviceId" | "status" | "quantity" | "totalAmount" | "escrowAmount" | "commissionPercent" | "createdAt" | "updatedAt", ExtArgs["result"]["freelanceOrder"]>
export type FreelanceOrderInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  service?: boolean | Prisma.FreelanceServiceDefaultArgs<ExtArgs>
  businesses?: boolean | Prisma.FreelanceOrder$businessesArgs<ExtArgs>
  _count?: boolean | Prisma.FreelanceOrderCountOutputTypeDefaultArgs<ExtArgs>
}
export type FreelanceOrderIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  service?: boolean | Prisma.FreelanceServiceDefaultArgs<ExtArgs>
}
export type FreelanceOrderIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  service?: boolean | Prisma.FreelanceServiceDefaultArgs<ExtArgs>
}

export type $FreelanceOrderPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FreelanceOrder"
  objects: {
    client: Prisma.$ClientPayload<ExtArgs>
    service: Prisma.$FreelanceServicePayload<ExtArgs>
    businesses: Prisma.$BusinessPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    clientId: string
    serviceId: string
    status: $Enums.FreelanceStatus
    quantity: number
    totalAmount: number
    escrowAmount: number
    commissionPercent: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["freelanceOrder"]>
  composites: {}
}

export type FreelanceOrderGetPayload<S extends boolean | null | undefined | FreelanceOrderDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload, S>

export type FreelanceOrderCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FreelanceOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FreelanceOrderCountAggregateInputType | true
  }

export interface FreelanceOrderDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FreelanceOrder'], meta: { name: 'FreelanceOrder' } }
  /**
   * Find zero or one FreelanceOrder that matches the filter.
   * @param {FreelanceOrderFindUniqueArgs} args - Arguments to find a FreelanceOrder
   * @example
   * // Get one FreelanceOrder
   * const freelanceOrder = await prisma.freelanceOrder.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FreelanceOrderFindUniqueArgs>(args: Prisma.SelectSubset<T, FreelanceOrderFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FreelanceOrder that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FreelanceOrderFindUniqueOrThrowArgs} args - Arguments to find a FreelanceOrder
   * @example
   * // Get one FreelanceOrder
   * const freelanceOrder = await prisma.freelanceOrder.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FreelanceOrderFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FreelanceOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FreelanceOrder that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderFindFirstArgs} args - Arguments to find a FreelanceOrder
   * @example
   * // Get one FreelanceOrder
   * const freelanceOrder = await prisma.freelanceOrder.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FreelanceOrderFindFirstArgs>(args?: Prisma.SelectSubset<T, FreelanceOrderFindFirstArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FreelanceOrder that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderFindFirstOrThrowArgs} args - Arguments to find a FreelanceOrder
   * @example
   * // Get one FreelanceOrder
   * const freelanceOrder = await prisma.freelanceOrder.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FreelanceOrderFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FreelanceOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FreelanceOrders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FreelanceOrders
   * const freelanceOrders = await prisma.freelanceOrder.findMany()
   * 
   * // Get first 10 FreelanceOrders
   * const freelanceOrders = await prisma.freelanceOrder.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const freelanceOrderWithIdOnly = await prisma.freelanceOrder.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FreelanceOrderFindManyArgs>(args?: Prisma.SelectSubset<T, FreelanceOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FreelanceOrder.
   * @param {FreelanceOrderCreateArgs} args - Arguments to create a FreelanceOrder.
   * @example
   * // Create one FreelanceOrder
   * const FreelanceOrder = await prisma.freelanceOrder.create({
   *   data: {
   *     // ... data to create a FreelanceOrder
   *   }
   * })
   * 
   */
  create<T extends FreelanceOrderCreateArgs>(args: Prisma.SelectSubset<T, FreelanceOrderCreateArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FreelanceOrders.
   * @param {FreelanceOrderCreateManyArgs} args - Arguments to create many FreelanceOrders.
   * @example
   * // Create many FreelanceOrders
   * const freelanceOrder = await prisma.freelanceOrder.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FreelanceOrderCreateManyArgs>(args?: Prisma.SelectSubset<T, FreelanceOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FreelanceOrders and returns the data saved in the database.
   * @param {FreelanceOrderCreateManyAndReturnArgs} args - Arguments to create many FreelanceOrders.
   * @example
   * // Create many FreelanceOrders
   * const freelanceOrder = await prisma.freelanceOrder.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FreelanceOrders and only return the `id`
   * const freelanceOrderWithIdOnly = await prisma.freelanceOrder.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FreelanceOrderCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FreelanceOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FreelanceOrder.
   * @param {FreelanceOrderDeleteArgs} args - Arguments to delete one FreelanceOrder.
   * @example
   * // Delete one FreelanceOrder
   * const FreelanceOrder = await prisma.freelanceOrder.delete({
   *   where: {
   *     // ... filter to delete one FreelanceOrder
   *   }
   * })
   * 
   */
  delete<T extends FreelanceOrderDeleteArgs>(args: Prisma.SelectSubset<T, FreelanceOrderDeleteArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FreelanceOrder.
   * @param {FreelanceOrderUpdateArgs} args - Arguments to update one FreelanceOrder.
   * @example
   * // Update one FreelanceOrder
   * const freelanceOrder = await prisma.freelanceOrder.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FreelanceOrderUpdateArgs>(args: Prisma.SelectSubset<T, FreelanceOrderUpdateArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FreelanceOrders.
   * @param {FreelanceOrderDeleteManyArgs} args - Arguments to filter FreelanceOrders to delete.
   * @example
   * // Delete a few FreelanceOrders
   * const { count } = await prisma.freelanceOrder.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FreelanceOrderDeleteManyArgs>(args?: Prisma.SelectSubset<T, FreelanceOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FreelanceOrders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FreelanceOrders
   * const freelanceOrder = await prisma.freelanceOrder.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FreelanceOrderUpdateManyArgs>(args: Prisma.SelectSubset<T, FreelanceOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FreelanceOrders and returns the data updated in the database.
   * @param {FreelanceOrderUpdateManyAndReturnArgs} args - Arguments to update many FreelanceOrders.
   * @example
   * // Update many FreelanceOrders
   * const freelanceOrder = await prisma.freelanceOrder.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FreelanceOrders and only return the `id`
   * const freelanceOrderWithIdOnly = await prisma.freelanceOrder.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FreelanceOrderUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FreelanceOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FreelanceOrder.
   * @param {FreelanceOrderUpsertArgs} args - Arguments to update or create a FreelanceOrder.
   * @example
   * // Update or create a FreelanceOrder
   * const freelanceOrder = await prisma.freelanceOrder.upsert({
   *   create: {
   *     // ... data to create a FreelanceOrder
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FreelanceOrder we want to update
   *   }
   * })
   */
  upsert<T extends FreelanceOrderUpsertArgs>(args: Prisma.SelectSubset<T, FreelanceOrderUpsertArgs<ExtArgs>>): Prisma.Prisma__FreelanceOrderClient<runtime.Types.Result.GetResult<Prisma.$FreelanceOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FreelanceOrders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderCountArgs} args - Arguments to filter FreelanceOrders to count.
   * @example
   * // Count the number of FreelanceOrders
   * const count = await prisma.freelanceOrder.count({
   *   where: {
   *     // ... the filter for the FreelanceOrders we want to count
   *   }
   * })
  **/
  count<T extends FreelanceOrderCountArgs>(
    args?: Prisma.Subset<T, FreelanceOrderCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FreelanceOrderCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FreelanceOrder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FreelanceOrderAggregateArgs>(args: Prisma.Subset<T, FreelanceOrderAggregateArgs>): Prisma.PrismaPromise<GetFreelanceOrderAggregateType<T>>

  /**
   * Group by FreelanceOrder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FreelanceOrderGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FreelanceOrderGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FreelanceOrderGroupByArgs['orderBy'] }
      : { orderBy?: FreelanceOrderGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FreelanceOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFreelanceOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FreelanceOrder model
 */
readonly fields: FreelanceOrderFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FreelanceOrder.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FreelanceOrderClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  client<T extends Prisma.ClientDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClientDefaultArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  service<T extends Prisma.FreelanceServiceDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FreelanceServiceDefaultArgs<ExtArgs>>): Prisma.Prisma__FreelanceServiceClient<runtime.Types.Result.GetResult<Prisma.$FreelanceServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  businesses<T extends Prisma.FreelanceOrder$businessesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FreelanceOrder$businessesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FreelanceOrder model
 */
export interface FreelanceOrderFieldRefs {
  readonly id: Prisma.FieldRef<"FreelanceOrder", 'String'>
  readonly clientId: Prisma.FieldRef<"FreelanceOrder", 'String'>
  readonly serviceId: Prisma.FieldRef<"FreelanceOrder", 'String'>
  readonly status: Prisma.FieldRef<"FreelanceOrder", 'FreelanceStatus'>
  readonly quantity: Prisma.FieldRef<"FreelanceOrder", 'Int'>
  readonly totalAmount: Prisma.FieldRef<"FreelanceOrder", 'Float'>
  readonly escrowAmount: Prisma.FieldRef<"FreelanceOrder", 'Float'>
  readonly commissionPercent: Prisma.FieldRef<"FreelanceOrder", 'Float'>
  readonly createdAt: Prisma.FieldRef<"FreelanceOrder", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"FreelanceOrder", 'DateTime'>
}
    

// Custom InputTypes
/**
 * FreelanceOrder findUnique
 */
export type FreelanceOrderFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceOrder to fetch.
   */
  where: Prisma.FreelanceOrderWhereUniqueInput
}

/**
 * FreelanceOrder findUniqueOrThrow
 */
export type FreelanceOrderFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceOrder to fetch.
   */
  where: Prisma.FreelanceOrderWhereUniqueInput
}

/**
 * FreelanceOrder findFirst
 */
export type FreelanceOrderFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceOrder to fetch.
   */
  where?: Prisma.FreelanceOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FreelanceOrders to fetch.
   */
  orderBy?: Prisma.FreelanceOrderOrderByWithRelationInput | Prisma.FreelanceOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FreelanceOrders.
   */
  cursor?: Prisma.FreelanceOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FreelanceOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FreelanceOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FreelanceOrders.
   */
  distinct?: Prisma.FreelanceOrderScalarFieldEnum | Prisma.FreelanceOrderScalarFieldEnum[]
}

/**
 * FreelanceOrder findFirstOrThrow
 */
export type FreelanceOrderFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceOrder to fetch.
   */
  where?: Prisma.FreelanceOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FreelanceOrders to fetch.
   */
  orderBy?: Prisma.FreelanceOrderOrderByWithRelationInput | Prisma.FreelanceOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FreelanceOrders.
   */
  cursor?: Prisma.FreelanceOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FreelanceOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FreelanceOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FreelanceOrders.
   */
  distinct?: Prisma.FreelanceOrderScalarFieldEnum | Prisma.FreelanceOrderScalarFieldEnum[]
}

/**
 * FreelanceOrder findMany
 */
export type FreelanceOrderFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderInclude<ExtArgs> | null
  /**
   * Filter, which FreelanceOrders to fetch.
   */
  where?: Prisma.FreelanceOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FreelanceOrders to fetch.
   */
  orderBy?: Prisma.FreelanceOrderOrderByWithRelationInput | Prisma.FreelanceOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FreelanceOrders.
   */
  cursor?: Prisma.FreelanceOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FreelanceOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FreelanceOrders.
   */
  skip?: number
  distinct?: Prisma.FreelanceOrderScalarFieldEnum | Prisma.FreelanceOrderScalarFieldEnum[]
}

/**
 * FreelanceOrder create
 */
export type FreelanceOrderCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderInclude<ExtArgs> | null
  /**
   * The data needed to create a FreelanceOrder.
   */
  data: Prisma.XOR<Prisma.FreelanceOrderCreateInput, Prisma.FreelanceOrderUncheckedCreateInput>
}

/**
 * FreelanceOrder createMany
 */
export type FreelanceOrderCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FreelanceOrders.
   */
  data: Prisma.FreelanceOrderCreateManyInput | Prisma.FreelanceOrderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FreelanceOrder createManyAndReturn
 */
export type FreelanceOrderCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * The data used to create many FreelanceOrders.
   */
  data: Prisma.FreelanceOrderCreateManyInput | Prisma.FreelanceOrderCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FreelanceOrder update
 */
export type FreelanceOrderUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderInclude<ExtArgs> | null
  /**
   * The data needed to update a FreelanceOrder.
   */
  data: Prisma.XOR<Prisma.FreelanceOrderUpdateInput, Prisma.FreelanceOrderUncheckedUpdateInput>
  /**
   * Choose, which FreelanceOrder to update.
   */
  where: Prisma.FreelanceOrderWhereUniqueInput
}

/**
 * FreelanceOrder updateMany
 */
export type FreelanceOrderUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FreelanceOrders.
   */
  data: Prisma.XOR<Prisma.FreelanceOrderUpdateManyMutationInput, Prisma.FreelanceOrderUncheckedUpdateManyInput>
  /**
   * Filter which FreelanceOrders to update
   */
  where?: Prisma.FreelanceOrderWhereInput
  /**
   * Limit how many FreelanceOrders to update.
   */
  limit?: number
}

/**
 * FreelanceOrder updateManyAndReturn
 */
export type FreelanceOrderUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * The data used to update FreelanceOrders.
   */
  data: Prisma.XOR<Prisma.FreelanceOrderUpdateManyMutationInput, Prisma.FreelanceOrderUncheckedUpdateManyInput>
  /**
   * Filter which FreelanceOrders to update
   */
  where?: Prisma.FreelanceOrderWhereInput
  /**
   * Limit how many FreelanceOrders to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FreelanceOrder upsert
 */
export type FreelanceOrderUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderInclude<ExtArgs> | null
  /**
   * The filter to search for the FreelanceOrder to update in case it exists.
   */
  where: Prisma.FreelanceOrderWhereUniqueInput
  /**
   * In case the FreelanceOrder found by the `where` argument doesn't exist, create a new FreelanceOrder with this data.
   */
  create: Prisma.XOR<Prisma.FreelanceOrderCreateInput, Prisma.FreelanceOrderUncheckedCreateInput>
  /**
   * In case the FreelanceOrder was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FreelanceOrderUpdateInput, Prisma.FreelanceOrderUncheckedUpdateInput>
}

/**
 * FreelanceOrder delete
 */
export type FreelanceOrderDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderInclude<ExtArgs> | null
  /**
   * Filter which FreelanceOrder to delete.
   */
  where: Prisma.FreelanceOrderWhereUniqueInput
}

/**
 * FreelanceOrder deleteMany
 */
export type FreelanceOrderDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FreelanceOrders to delete
   */
  where?: Prisma.FreelanceOrderWhereInput
  /**
   * Limit how many FreelanceOrders to delete.
   */
  limit?: number
}

/**
 * FreelanceOrder.businesses
 */
export type FreelanceOrder$businessesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Business
   */
  select?: Prisma.BusinessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Business
   */
  omit?: Prisma.BusinessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BusinessInclude<ExtArgs> | null
  where?: Prisma.BusinessWhereInput
  orderBy?: Prisma.BusinessOrderByWithRelationInput | Prisma.BusinessOrderByWithRelationInput[]
  cursor?: Prisma.BusinessWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BusinessScalarFieldEnum | Prisma.BusinessScalarFieldEnum[]
}

/**
 * FreelanceOrder without action
 */
export type FreelanceOrderDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FreelanceOrder
   */
  select?: Prisma.FreelanceOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FreelanceOrder
   */
  omit?: Prisma.FreelanceOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FreelanceOrderInclude<ExtArgs> | null
}
