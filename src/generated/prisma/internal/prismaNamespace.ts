
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
export const prismaVersion: PrismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  Business: 'Business',
  Client: 'Client',
  Worker: 'Worker',
  Category: 'Category',
  Product: 'Product',
  Media: 'Media',
  Order: 'Order',
  OrderProduct: 'OrderProduct',
  Review: 'Review',
  Chat: 'Chat',
  ChatMessage: 'ChatMessage',
  RepostedProduct: 'RepostedProduct',
  ReOwnedProduct: 'ReOwnedProduct',
  KYC: 'KYC',
  AccountRecharge: 'AccountRecharge',
  Token: 'Token',
  PaymentTransaction: 'PaymentTransaction',
  Ad: 'Ad',
  FreelanceService: 'FreelanceService',
  WorkerServiceAssignment: 'WorkerServiceAssignment',
  FreelanceOrder: 'FreelanceOrder',
  FreelanceOrderBusiness: 'FreelanceOrderBusiness',
  Referral: 'Referral',
  PostOfSale: 'PostOfSale',
  PostTransaction: 'PostTransaction'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "business" | "client" | "worker" | "category" | "product" | "media" | "order" | "orderProduct" | "review" | "chat" | "chatMessage" | "repostedProduct" | "reOwnedProduct" | "kYC" | "accountRecharge" | "token" | "paymentTransaction" | "ad" | "freelanceService" | "workerServiceAssignment" | "freelanceOrder" | "freelanceOrderBusiness" | "referral" | "postOfSale" | "postTransaction"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Business: {
      payload: Prisma.$BusinessPayload<ExtArgs>
      fields: Prisma.BusinessFieldRefs
      operations: {
        findUnique: {
          args: Prisma.BusinessFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BusinessPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.BusinessFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BusinessPayload>
        }
        findFirst: {
          args: Prisma.BusinessFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BusinessPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.BusinessFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BusinessPayload>
        }
        findMany: {
          args: Prisma.BusinessFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BusinessPayload>[]
        }
        create: {
          args: Prisma.BusinessCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BusinessPayload>
        }
        createMany: {
          args: Prisma.BusinessCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.BusinessCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BusinessPayload>[]
        }
        delete: {
          args: Prisma.BusinessDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BusinessPayload>
        }
        update: {
          args: Prisma.BusinessUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BusinessPayload>
        }
        deleteMany: {
          args: Prisma.BusinessDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.BusinessUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.BusinessUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BusinessPayload>[]
        }
        upsert: {
          args: Prisma.BusinessUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BusinessPayload>
        }
        aggregate: {
          args: Prisma.BusinessAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBusiness>
        }
        groupBy: {
          args: Prisma.BusinessGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BusinessGroupByOutputType>[]
        }
        count: {
          args: Prisma.BusinessCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BusinessCountAggregateOutputType> | number
        }
      }
    }
    Client: {
      payload: Prisma.$ClientPayload<ExtArgs>
      fields: Prisma.ClientFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ClientFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>
        }
        findFirst: {
          args: Prisma.ClientFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>
        }
        findMany: {
          args: Prisma.ClientFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>[]
        }
        create: {
          args: Prisma.ClientCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>
        }
        createMany: {
          args: Prisma.ClientCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>[]
        }
        delete: {
          args: Prisma.ClientDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>
        }
        update: {
          args: Prisma.ClientUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>
        }
        deleteMany: {
          args: Prisma.ClientDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ClientUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ClientUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>[]
        }
        upsert: {
          args: Prisma.ClientUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>
        }
        aggregate: {
          args: Prisma.ClientAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateClient>
        }
        groupBy: {
          args: Prisma.ClientGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClientGroupByOutputType>[]
        }
        count: {
          args: Prisma.ClientCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClientCountAggregateOutputType> | number
        }
      }
    }
    Worker: {
      payload: Prisma.$WorkerPayload<ExtArgs>
      fields: Prisma.WorkerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WorkerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WorkerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerPayload>
        }
        findFirst: {
          args: Prisma.WorkerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WorkerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerPayload>
        }
        findMany: {
          args: Prisma.WorkerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerPayload>[]
        }
        create: {
          args: Prisma.WorkerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerPayload>
        }
        createMany: {
          args: Prisma.WorkerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WorkerCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerPayload>[]
        }
        delete: {
          args: Prisma.WorkerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerPayload>
        }
        update: {
          args: Prisma.WorkerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerPayload>
        }
        deleteMany: {
          args: Prisma.WorkerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WorkerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WorkerUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerPayload>[]
        }
        upsert: {
          args: Prisma.WorkerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerPayload>
        }
        aggregate: {
          args: Prisma.WorkerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorker>
        }
        groupBy: {
          args: Prisma.WorkerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkerGroupByOutputType>[]
        }
        count: {
          args: Prisma.WorkerCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkerCountAggregateOutputType> | number
        }
      }
    }
    Category: {
      payload: Prisma.$CategoryPayload<ExtArgs>
      fields: Prisma.CategoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CategoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        findFirst: {
          args: Prisma.CategoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        findMany: {
          args: Prisma.CategoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>[]
        }
        create: {
          args: Prisma.CategoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        createMany: {
          args: Prisma.CategoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>[]
        }
        delete: {
          args: Prisma.CategoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        update: {
          args: Prisma.CategoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        deleteMany: {
          args: Prisma.CategoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CategoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>[]
        }
        upsert: {
          args: Prisma.CategoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        aggregate: {
          args: Prisma.CategoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCategory>
        }
        groupBy: {
          args: Prisma.CategoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.CategoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoryCountAggregateOutputType> | number
        }
      }
    }
    Product: {
      payload: Prisma.$ProductPayload<ExtArgs>
      fields: Prisma.ProductFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProductFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>
        }
        findFirst: {
          args: Prisma.ProductFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>
        }
        findMany: {
          args: Prisma.ProductFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>[]
        }
        create: {
          args: Prisma.ProductCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>
        }
        createMany: {
          args: Prisma.ProductCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>[]
        }
        delete: {
          args: Prisma.ProductDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>
        }
        update: {
          args: Prisma.ProductUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>
        }
        deleteMany: {
          args: Prisma.ProductDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProductUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>[]
        }
        upsert: {
          args: Prisma.ProductUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>
        }
        aggregate: {
          args: Prisma.ProductAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProduct>
        }
        groupBy: {
          args: Prisma.ProductGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProductCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductCountAggregateOutputType> | number
        }
      }
    }
    Media: {
      payload: Prisma.$MediaPayload<ExtArgs>
      fields: Prisma.MediaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MediaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MediaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>
        }
        findFirst: {
          args: Prisma.MediaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MediaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>
        }
        findMany: {
          args: Prisma.MediaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>[]
        }
        create: {
          args: Prisma.MediaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>
        }
        createMany: {
          args: Prisma.MediaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MediaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>[]
        }
        delete: {
          args: Prisma.MediaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>
        }
        update: {
          args: Prisma.MediaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>
        }
        deleteMany: {
          args: Prisma.MediaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MediaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MediaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>[]
        }
        upsert: {
          args: Prisma.MediaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>
        }
        aggregate: {
          args: Prisma.MediaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMedia>
        }
        groupBy: {
          args: Prisma.MediaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaGroupByOutputType>[]
        }
        count: {
          args: Prisma.MediaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MediaCountAggregateOutputType> | number
        }
      }
    }
    Order: {
      payload: Prisma.$OrderPayload<ExtArgs>
      fields: Prisma.OrderFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrderFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>
        }
        findFirst: {
          args: Prisma.OrderFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>
        }
        findMany: {
          args: Prisma.OrderFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>[]
        }
        create: {
          args: Prisma.OrderCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>
        }
        createMany: {
          args: Prisma.OrderCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>[]
        }
        delete: {
          args: Prisma.OrderDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>
        }
        update: {
          args: Prisma.OrderUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>
        }
        deleteMany: {
          args: Prisma.OrderDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrderUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>[]
        }
        upsert: {
          args: Prisma.OrderUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>
        }
        aggregate: {
          args: Prisma.OrderAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrder>
        }
        groupBy: {
          args: Prisma.OrderGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrderGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrderCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrderCountAggregateOutputType> | number
        }
      }
    }
    OrderProduct: {
      payload: Prisma.$OrderProductPayload<ExtArgs>
      fields: Prisma.OrderProductFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrderProductFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrderProductFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>
        }
        findFirst: {
          args: Prisma.OrderProductFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrderProductFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>
        }
        findMany: {
          args: Prisma.OrderProductFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>[]
        }
        create: {
          args: Prisma.OrderProductCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>
        }
        createMany: {
          args: Prisma.OrderProductCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrderProductCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>[]
        }
        delete: {
          args: Prisma.OrderProductDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>
        }
        update: {
          args: Prisma.OrderProductUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>
        }
        deleteMany: {
          args: Prisma.OrderProductDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrderProductUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrderProductUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>[]
        }
        upsert: {
          args: Prisma.OrderProductUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderProductPayload>
        }
        aggregate: {
          args: Prisma.OrderProductAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrderProduct>
        }
        groupBy: {
          args: Prisma.OrderProductGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrderProductGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrderProductCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrderProductCountAggregateOutputType> | number
        }
      }
    }
    Review: {
      payload: Prisma.$ReviewPayload<ExtArgs>
      fields: Prisma.ReviewFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ReviewFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReviewPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReviewPayload>
        }
        findFirst: {
          args: Prisma.ReviewFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReviewPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReviewPayload>
        }
        findMany: {
          args: Prisma.ReviewFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReviewPayload>[]
        }
        create: {
          args: Prisma.ReviewCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReviewPayload>
        }
        createMany: {
          args: Prisma.ReviewCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReviewPayload>[]
        }
        delete: {
          args: Prisma.ReviewDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReviewPayload>
        }
        update: {
          args: Prisma.ReviewUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReviewPayload>
        }
        deleteMany: {
          args: Prisma.ReviewDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ReviewUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ReviewUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReviewPayload>[]
        }
        upsert: {
          args: Prisma.ReviewUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReviewPayload>
        }
        aggregate: {
          args: Prisma.ReviewAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateReview>
        }
        groupBy: {
          args: Prisma.ReviewGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReviewGroupByOutputType>[]
        }
        count: {
          args: Prisma.ReviewCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReviewCountAggregateOutputType> | number
        }
      }
    }
    Chat: {
      payload: Prisma.$ChatPayload<ExtArgs>
      fields: Prisma.ChatFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ChatFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ChatFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        findFirst: {
          args: Prisma.ChatFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ChatFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        findMany: {
          args: Prisma.ChatFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>[]
        }
        create: {
          args: Prisma.ChatCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        createMany: {
          args: Prisma.ChatCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ChatCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>[]
        }
        delete: {
          args: Prisma.ChatDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        update: {
          args: Prisma.ChatUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        deleteMany: {
          args: Prisma.ChatDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ChatUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ChatUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>[]
        }
        upsert: {
          args: Prisma.ChatUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        aggregate: {
          args: Prisma.ChatAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChat>
        }
        groupBy: {
          args: Prisma.ChatGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChatGroupByOutputType>[]
        }
        count: {
          args: Prisma.ChatCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChatCountAggregateOutputType> | number
        }
      }
    }
    ChatMessage: {
      payload: Prisma.$ChatMessagePayload<ExtArgs>
      fields: Prisma.ChatMessageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>
        }
        findFirst: {
          args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>
        }
        findMany: {
          args: Prisma.ChatMessageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
        }
        create: {
          args: Prisma.ChatMessageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>
        }
        createMany: {
          args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
        }
        delete: {
          args: Prisma.ChatMessageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>
        }
        update: {
          args: Prisma.ChatMessageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>
        }
        deleteMany: {
          args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ChatMessageUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
        }
        upsert: {
          args: Prisma.ChatMessageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatMessagePayload>
        }
        aggregate: {
          args: Prisma.ChatMessageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChatMessage>
        }
        groupBy: {
          args: Prisma.ChatMessageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChatMessageGroupByOutputType>[]
        }
        count: {
          args: Prisma.ChatMessageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChatMessageCountAggregateOutputType> | number
        }
      }
    }
    RepostedProduct: {
      payload: Prisma.$RepostedProductPayload<ExtArgs>
      fields: Prisma.RepostedProductFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RepostedProductFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RepostedProductPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RepostedProductFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RepostedProductPayload>
        }
        findFirst: {
          args: Prisma.RepostedProductFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RepostedProductPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RepostedProductFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RepostedProductPayload>
        }
        findMany: {
          args: Prisma.RepostedProductFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RepostedProductPayload>[]
        }
        create: {
          args: Prisma.RepostedProductCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RepostedProductPayload>
        }
        createMany: {
          args: Prisma.RepostedProductCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RepostedProductCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RepostedProductPayload>[]
        }
        delete: {
          args: Prisma.RepostedProductDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RepostedProductPayload>
        }
        update: {
          args: Prisma.RepostedProductUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RepostedProductPayload>
        }
        deleteMany: {
          args: Prisma.RepostedProductDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RepostedProductUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RepostedProductUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RepostedProductPayload>[]
        }
        upsert: {
          args: Prisma.RepostedProductUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RepostedProductPayload>
        }
        aggregate: {
          args: Prisma.RepostedProductAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRepostedProduct>
        }
        groupBy: {
          args: Prisma.RepostedProductGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RepostedProductGroupByOutputType>[]
        }
        count: {
          args: Prisma.RepostedProductCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RepostedProductCountAggregateOutputType> | number
        }
      }
    }
    ReOwnedProduct: {
      payload: Prisma.$ReOwnedProductPayload<ExtArgs>
      fields: Prisma.ReOwnedProductFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ReOwnedProductFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReOwnedProductPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ReOwnedProductFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReOwnedProductPayload>
        }
        findFirst: {
          args: Prisma.ReOwnedProductFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReOwnedProductPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ReOwnedProductFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReOwnedProductPayload>
        }
        findMany: {
          args: Prisma.ReOwnedProductFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReOwnedProductPayload>[]
        }
        create: {
          args: Prisma.ReOwnedProductCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReOwnedProductPayload>
        }
        createMany: {
          args: Prisma.ReOwnedProductCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ReOwnedProductCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReOwnedProductPayload>[]
        }
        delete: {
          args: Prisma.ReOwnedProductDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReOwnedProductPayload>
        }
        update: {
          args: Prisma.ReOwnedProductUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReOwnedProductPayload>
        }
        deleteMany: {
          args: Prisma.ReOwnedProductDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ReOwnedProductUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ReOwnedProductUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReOwnedProductPayload>[]
        }
        upsert: {
          args: Prisma.ReOwnedProductUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReOwnedProductPayload>
        }
        aggregate: {
          args: Prisma.ReOwnedProductAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateReOwnedProduct>
        }
        groupBy: {
          args: Prisma.ReOwnedProductGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReOwnedProductGroupByOutputType>[]
        }
        count: {
          args: Prisma.ReOwnedProductCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReOwnedProductCountAggregateOutputType> | number
        }
      }
    }
    KYC: {
      payload: Prisma.$KYCPayload<ExtArgs>
      fields: Prisma.KYCFieldRefs
      operations: {
        findUnique: {
          args: Prisma.KYCFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.KYCFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>
        }
        findFirst: {
          args: Prisma.KYCFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.KYCFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>
        }
        findMany: {
          args: Prisma.KYCFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>[]
        }
        create: {
          args: Prisma.KYCCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>
        }
        createMany: {
          args: Prisma.KYCCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.KYCCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>[]
        }
        delete: {
          args: Prisma.KYCDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>
        }
        update: {
          args: Prisma.KYCUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>
        }
        deleteMany: {
          args: Prisma.KYCDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.KYCUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.KYCUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>[]
        }
        upsert: {
          args: Prisma.KYCUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>
        }
        aggregate: {
          args: Prisma.KYCAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateKYC>
        }
        groupBy: {
          args: Prisma.KYCGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.KYCGroupByOutputType>[]
        }
        count: {
          args: Prisma.KYCCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.KYCCountAggregateOutputType> | number
        }
      }
    }
    AccountRecharge: {
      payload: Prisma.$AccountRechargePayload<ExtArgs>
      fields: Prisma.AccountRechargeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AccountRechargeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountRechargePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AccountRechargeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountRechargePayload>
        }
        findFirst: {
          args: Prisma.AccountRechargeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountRechargePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AccountRechargeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountRechargePayload>
        }
        findMany: {
          args: Prisma.AccountRechargeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountRechargePayload>[]
        }
        create: {
          args: Prisma.AccountRechargeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountRechargePayload>
        }
        createMany: {
          args: Prisma.AccountRechargeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AccountRechargeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountRechargePayload>[]
        }
        delete: {
          args: Prisma.AccountRechargeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountRechargePayload>
        }
        update: {
          args: Prisma.AccountRechargeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountRechargePayload>
        }
        deleteMany: {
          args: Prisma.AccountRechargeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AccountRechargeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AccountRechargeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountRechargePayload>[]
        }
        upsert: {
          args: Prisma.AccountRechargeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountRechargePayload>
        }
        aggregate: {
          args: Prisma.AccountRechargeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccountRecharge>
        }
        groupBy: {
          args: Prisma.AccountRechargeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountRechargeGroupByOutputType>[]
        }
        count: {
          args: Prisma.AccountRechargeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountRechargeCountAggregateOutputType> | number
        }
      }
    }
    Token: {
      payload: Prisma.$TokenPayload<ExtArgs>
      fields: Prisma.TokenFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TokenFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>
        }
        findFirst: {
          args: Prisma.TokenFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>
        }
        findMany: {
          args: Prisma.TokenFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>[]
        }
        create: {
          args: Prisma.TokenCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>
        }
        createMany: {
          args: Prisma.TokenCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TokenCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>[]
        }
        delete: {
          args: Prisma.TokenDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>
        }
        update: {
          args: Prisma.TokenUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>
        }
        deleteMany: {
          args: Prisma.TokenDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TokenUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TokenUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>[]
        }
        upsert: {
          args: Prisma.TokenUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>
        }
        aggregate: {
          args: Prisma.TokenAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateToken>
        }
        groupBy: {
          args: Prisma.TokenGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TokenGroupByOutputType>[]
        }
        count: {
          args: Prisma.TokenCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TokenCountAggregateOutputType> | number
        }
      }
    }
    PaymentTransaction: {
      payload: Prisma.$PaymentTransactionPayload<ExtArgs>
      fields: Prisma.PaymentTransactionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PaymentTransactionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentTransactionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PaymentTransactionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
        }
        findFirst: {
          args: Prisma.PaymentTransactionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentTransactionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PaymentTransactionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
        }
        findMany: {
          args: Prisma.PaymentTransactionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>[]
        }
        create: {
          args: Prisma.PaymentTransactionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
        }
        createMany: {
          args: Prisma.PaymentTransactionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PaymentTransactionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>[]
        }
        delete: {
          args: Prisma.PaymentTransactionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
        }
        update: {
          args: Prisma.PaymentTransactionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
        }
        deleteMany: {
          args: Prisma.PaymentTransactionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PaymentTransactionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PaymentTransactionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>[]
        }
        upsert: {
          args: Prisma.PaymentTransactionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
        }
        aggregate: {
          args: Prisma.PaymentTransactionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePaymentTransaction>
        }
        groupBy: {
          args: Prisma.PaymentTransactionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentTransactionGroupByOutputType>[]
        }
        count: {
          args: Prisma.PaymentTransactionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentTransactionCountAggregateOutputType> | number
        }
      }
    }
    Ad: {
      payload: Prisma.$AdPayload<ExtArgs>
      fields: Prisma.AdFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AdFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AdFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdPayload>
        }
        findFirst: {
          args: Prisma.AdFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AdFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdPayload>
        }
        findMany: {
          args: Prisma.AdFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdPayload>[]
        }
        create: {
          args: Prisma.AdCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdPayload>
        }
        createMany: {
          args: Prisma.AdCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AdCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdPayload>[]
        }
        delete: {
          args: Prisma.AdDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdPayload>
        }
        update: {
          args: Prisma.AdUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdPayload>
        }
        deleteMany: {
          args: Prisma.AdDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AdUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AdUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdPayload>[]
        }
        upsert: {
          args: Prisma.AdUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdPayload>
        }
        aggregate: {
          args: Prisma.AdAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAd>
        }
        groupBy: {
          args: Prisma.AdGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AdGroupByOutputType>[]
        }
        count: {
          args: Prisma.AdCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AdCountAggregateOutputType> | number
        }
      }
    }
    FreelanceService: {
      payload: Prisma.$FreelanceServicePayload<ExtArgs>
      fields: Prisma.FreelanceServiceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FreelanceServiceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceServicePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FreelanceServiceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceServicePayload>
        }
        findFirst: {
          args: Prisma.FreelanceServiceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceServicePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FreelanceServiceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceServicePayload>
        }
        findMany: {
          args: Prisma.FreelanceServiceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceServicePayload>[]
        }
        create: {
          args: Prisma.FreelanceServiceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceServicePayload>
        }
        createMany: {
          args: Prisma.FreelanceServiceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FreelanceServiceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceServicePayload>[]
        }
        delete: {
          args: Prisma.FreelanceServiceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceServicePayload>
        }
        update: {
          args: Prisma.FreelanceServiceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceServicePayload>
        }
        deleteMany: {
          args: Prisma.FreelanceServiceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FreelanceServiceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FreelanceServiceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceServicePayload>[]
        }
        upsert: {
          args: Prisma.FreelanceServiceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceServicePayload>
        }
        aggregate: {
          args: Prisma.FreelanceServiceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFreelanceService>
        }
        groupBy: {
          args: Prisma.FreelanceServiceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FreelanceServiceGroupByOutputType>[]
        }
        count: {
          args: Prisma.FreelanceServiceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FreelanceServiceCountAggregateOutputType> | number
        }
      }
    }
    WorkerServiceAssignment: {
      payload: Prisma.$WorkerServiceAssignmentPayload<ExtArgs>
      fields: Prisma.WorkerServiceAssignmentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WorkerServiceAssignmentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerServiceAssignmentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WorkerServiceAssignmentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerServiceAssignmentPayload>
        }
        findFirst: {
          args: Prisma.WorkerServiceAssignmentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerServiceAssignmentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WorkerServiceAssignmentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerServiceAssignmentPayload>
        }
        findMany: {
          args: Prisma.WorkerServiceAssignmentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerServiceAssignmentPayload>[]
        }
        create: {
          args: Prisma.WorkerServiceAssignmentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerServiceAssignmentPayload>
        }
        createMany: {
          args: Prisma.WorkerServiceAssignmentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WorkerServiceAssignmentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerServiceAssignmentPayload>[]
        }
        delete: {
          args: Prisma.WorkerServiceAssignmentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerServiceAssignmentPayload>
        }
        update: {
          args: Prisma.WorkerServiceAssignmentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerServiceAssignmentPayload>
        }
        deleteMany: {
          args: Prisma.WorkerServiceAssignmentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WorkerServiceAssignmentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WorkerServiceAssignmentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerServiceAssignmentPayload>[]
        }
        upsert: {
          args: Prisma.WorkerServiceAssignmentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkerServiceAssignmentPayload>
        }
        aggregate: {
          args: Prisma.WorkerServiceAssignmentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkerServiceAssignment>
        }
        groupBy: {
          args: Prisma.WorkerServiceAssignmentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkerServiceAssignmentGroupByOutputType>[]
        }
        count: {
          args: Prisma.WorkerServiceAssignmentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkerServiceAssignmentCountAggregateOutputType> | number
        }
      }
    }
    FreelanceOrder: {
      payload: Prisma.$FreelanceOrderPayload<ExtArgs>
      fields: Prisma.FreelanceOrderFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FreelanceOrderFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FreelanceOrderFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderPayload>
        }
        findFirst: {
          args: Prisma.FreelanceOrderFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FreelanceOrderFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderPayload>
        }
        findMany: {
          args: Prisma.FreelanceOrderFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderPayload>[]
        }
        create: {
          args: Prisma.FreelanceOrderCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderPayload>
        }
        createMany: {
          args: Prisma.FreelanceOrderCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FreelanceOrderCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderPayload>[]
        }
        delete: {
          args: Prisma.FreelanceOrderDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderPayload>
        }
        update: {
          args: Prisma.FreelanceOrderUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderPayload>
        }
        deleteMany: {
          args: Prisma.FreelanceOrderDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FreelanceOrderUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FreelanceOrderUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderPayload>[]
        }
        upsert: {
          args: Prisma.FreelanceOrderUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderPayload>
        }
        aggregate: {
          args: Prisma.FreelanceOrderAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFreelanceOrder>
        }
        groupBy: {
          args: Prisma.FreelanceOrderGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FreelanceOrderGroupByOutputType>[]
        }
        count: {
          args: Prisma.FreelanceOrderCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FreelanceOrderCountAggregateOutputType> | number
        }
      }
    }
    FreelanceOrderBusiness: {
      payload: Prisma.$FreelanceOrderBusinessPayload<ExtArgs>
      fields: Prisma.FreelanceOrderBusinessFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FreelanceOrderBusinessFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderBusinessPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FreelanceOrderBusinessFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderBusinessPayload>
        }
        findFirst: {
          args: Prisma.FreelanceOrderBusinessFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderBusinessPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FreelanceOrderBusinessFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderBusinessPayload>
        }
        findMany: {
          args: Prisma.FreelanceOrderBusinessFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderBusinessPayload>[]
        }
        create: {
          args: Prisma.FreelanceOrderBusinessCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderBusinessPayload>
        }
        createMany: {
          args: Prisma.FreelanceOrderBusinessCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FreelanceOrderBusinessCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderBusinessPayload>[]
        }
        delete: {
          args: Prisma.FreelanceOrderBusinessDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderBusinessPayload>
        }
        update: {
          args: Prisma.FreelanceOrderBusinessUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderBusinessPayload>
        }
        deleteMany: {
          args: Prisma.FreelanceOrderBusinessDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FreelanceOrderBusinessUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FreelanceOrderBusinessUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderBusinessPayload>[]
        }
        upsert: {
          args: Prisma.FreelanceOrderBusinessUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FreelanceOrderBusinessPayload>
        }
        aggregate: {
          args: Prisma.FreelanceOrderBusinessAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFreelanceOrderBusiness>
        }
        groupBy: {
          args: Prisma.FreelanceOrderBusinessGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FreelanceOrderBusinessGroupByOutputType>[]
        }
        count: {
          args: Prisma.FreelanceOrderBusinessCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FreelanceOrderBusinessCountAggregateOutputType> | number
        }
      }
    }
    Referral: {
      payload: Prisma.$ReferralPayload<ExtArgs>
      fields: Prisma.ReferralFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ReferralFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferralPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ReferralFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferralPayload>
        }
        findFirst: {
          args: Prisma.ReferralFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferralPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ReferralFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferralPayload>
        }
        findMany: {
          args: Prisma.ReferralFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferralPayload>[]
        }
        create: {
          args: Prisma.ReferralCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferralPayload>
        }
        createMany: {
          args: Prisma.ReferralCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ReferralCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferralPayload>[]
        }
        delete: {
          args: Prisma.ReferralDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferralPayload>
        }
        update: {
          args: Prisma.ReferralUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferralPayload>
        }
        deleteMany: {
          args: Prisma.ReferralDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ReferralUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ReferralUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferralPayload>[]
        }
        upsert: {
          args: Prisma.ReferralUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferralPayload>
        }
        aggregate: {
          args: Prisma.ReferralAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateReferral>
        }
        groupBy: {
          args: Prisma.ReferralGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReferralGroupByOutputType>[]
        }
        count: {
          args: Prisma.ReferralCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReferralCountAggregateOutputType> | number
        }
      }
    }
    PostOfSale: {
      payload: Prisma.$PostOfSalePayload<ExtArgs>
      fields: Prisma.PostOfSaleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PostOfSaleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostOfSalePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PostOfSaleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostOfSalePayload>
        }
        findFirst: {
          args: Prisma.PostOfSaleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostOfSalePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PostOfSaleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostOfSalePayload>
        }
        findMany: {
          args: Prisma.PostOfSaleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostOfSalePayload>[]
        }
        create: {
          args: Prisma.PostOfSaleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostOfSalePayload>
        }
        createMany: {
          args: Prisma.PostOfSaleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PostOfSaleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostOfSalePayload>[]
        }
        delete: {
          args: Prisma.PostOfSaleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostOfSalePayload>
        }
        update: {
          args: Prisma.PostOfSaleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostOfSalePayload>
        }
        deleteMany: {
          args: Prisma.PostOfSaleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PostOfSaleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PostOfSaleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostOfSalePayload>[]
        }
        upsert: {
          args: Prisma.PostOfSaleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostOfSalePayload>
        }
        aggregate: {
          args: Prisma.PostOfSaleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePostOfSale>
        }
        groupBy: {
          args: Prisma.PostOfSaleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PostOfSaleGroupByOutputType>[]
        }
        count: {
          args: Prisma.PostOfSaleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PostOfSaleCountAggregateOutputType> | number
        }
      }
    }
    PostTransaction: {
      payload: Prisma.$PostTransactionPayload<ExtArgs>
      fields: Prisma.PostTransactionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PostTransactionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostTransactionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PostTransactionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostTransactionPayload>
        }
        findFirst: {
          args: Prisma.PostTransactionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostTransactionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PostTransactionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostTransactionPayload>
        }
        findMany: {
          args: Prisma.PostTransactionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostTransactionPayload>[]
        }
        create: {
          args: Prisma.PostTransactionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostTransactionPayload>
        }
        createMany: {
          args: Prisma.PostTransactionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PostTransactionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostTransactionPayload>[]
        }
        delete: {
          args: Prisma.PostTransactionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostTransactionPayload>
        }
        update: {
          args: Prisma.PostTransactionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostTransactionPayload>
        }
        deleteMany: {
          args: Prisma.PostTransactionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PostTransactionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PostTransactionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostTransactionPayload>[]
        }
        upsert: {
          args: Prisma.PostTransactionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostTransactionPayload>
        }
        aggregate: {
          args: Prisma.PostTransactionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePostTransaction>
        }
        groupBy: {
          args: Prisma.PostTransactionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PostTransactionGroupByOutputType>[]
        }
        count: {
          args: Prisma.PostTransactionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PostTransactionCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const BusinessScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  description: 'description',
  avatar: 'avatar',
  coverImage: 'coverImage',
  address: 'address',
  phone: 'phone',
  password: 'password',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type BusinessScalarFieldEnum = (typeof BusinessScalarFieldEnum)[keyof typeof BusinessScalarFieldEnum]


export const ClientScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  fullName: 'fullName',
  avatar: 'avatar',
  address: 'address',
  phone: 'phone',
  password: 'password',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


export const WorkerScalarFieldEnum = {
  id: 'id',
  email: 'email',
  fullName: 'fullName',
  role: 'role',
  phone: 'phone',
  password: 'password',
  businessId: 'businessId',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type WorkerScalarFieldEnum = (typeof WorkerScalarFieldEnum)[keyof typeof WorkerScalarFieldEnum]


export const CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


export const ProductScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  price: 'price',
  stock: 'stock',
  businessId: 'businessId',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


export const MediaScalarFieldEnum = {
  id: 'id',
  url: 'url',
  type: 'type',
  productId: 'productId',
  createdAt: 'createdAt'
} as const

export type MediaScalarFieldEnum = (typeof MediaScalarFieldEnum)[keyof typeof MediaScalarFieldEnum]


export const OrderScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  deliveryFee: 'deliveryFee',
  deliveryAddress: 'deliveryAddress',
  qrCode: 'qrCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


export const OrderProductScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  createdAt: 'createdAt'
} as const

export type OrderProductScalarFieldEnum = (typeof OrderProductScalarFieldEnum)[keyof typeof OrderProductScalarFieldEnum]


export const ReviewScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  productId: 'productId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
} as const

export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


export const ChatScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  productId: 'productId',
  businessId: 'businessId',
  workerId: 'workerId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


export const ChatMessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  message: 'message',
  senderId: 'senderId',
  createdAt: 'createdAt'
} as const

export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


export const RepostedProductScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  productId: 'productId',
  earnPercentage: 'earnPercentage',
  createdAt: 'createdAt'
} as const

export type RepostedProductScalarFieldEnum = (typeof RepostedProductScalarFieldEnum)[keyof typeof RepostedProductScalarFieldEnum]


export const ReOwnedProductScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  productId: 'productId',
  oldOwnerId: 'oldOwnerId',
  oldPrice: 'oldPrice',
  newPrice: 'newPrice',
  markupPercentage: 'markupPercentage',
  agreedViaChatId: 'agreedViaChatId',
  createdAt: 'createdAt'
} as const

export type ReOwnedProductScalarFieldEnum = (typeof ReOwnedProductScalarFieldEnum)[keyof typeof ReOwnedProductScalarFieldEnum]


export const KYCScalarFieldEnum = {
  id: 'id',
  status: 'status',
  documentUrl: 'documentUrl',
  submittedAt: 'submittedAt',
  verifiedAt: 'verifiedAt',
  businessId: 'businessId',
  clientId: 'clientId',
  workerId: 'workerId'
} as const

export type KYCScalarFieldEnum = (typeof KYCScalarFieldEnum)[keyof typeof KYCScalarFieldEnum]


export const AccountRechargeScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  method: 'method',
  origin: 'origin',
  businessId: 'businessId',
  clientId: 'clientId',
  createdAt: 'createdAt'
} as const

export type AccountRechargeScalarFieldEnum = (typeof AccountRechargeScalarFieldEnum)[keyof typeof AccountRechargeScalarFieldEnum]


export const TokenScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  createdAt: 'createdAt'
} as const

export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


export const PaymentTransactionScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  status: 'status',
  method: 'method',
  amount: 'amount',
  transactionDate: 'transactionDate',
  qrCode: 'qrCode',
  createdAt: 'createdAt',
  freelanceOrderId: 'freelanceOrderId'
} as const

export type PaymentTransactionScalarFieldEnum = (typeof PaymentTransactionScalarFieldEnum)[keyof typeof PaymentTransactionScalarFieldEnum]


export const AdScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  productId: 'productId',
  price: 'price',
  periodDays: 'periodDays',
  createdAt: 'createdAt',
  endedAt: 'endedAt'
} as const

export type AdScalarFieldEnum = (typeof AdScalarFieldEnum)[keyof typeof AdScalarFieldEnum]


export const FreelanceServiceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  isHourly: 'isHourly',
  rate: 'rate',
  category: 'category',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type FreelanceServiceScalarFieldEnum = (typeof FreelanceServiceScalarFieldEnum)[keyof typeof FreelanceServiceScalarFieldEnum]


export const WorkerServiceAssignmentScalarFieldEnum = {
  id: 'id',
  workerId: 'workerId',
  freelanceServiceId: 'freelanceServiceId',
  role: 'role',
  assignedAt: 'assignedAt'
} as const

export type WorkerServiceAssignmentScalarFieldEnum = (typeof WorkerServiceAssignmentScalarFieldEnum)[keyof typeof WorkerServiceAssignmentScalarFieldEnum]


export const FreelanceOrderScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  serviceId: 'serviceId',
  status: 'status',
  quantity: 'quantity',
  totalAmount: 'totalAmount',
  escrowAmount: 'escrowAmount',
  commissionPercent: 'commissionPercent',
  escrowStatus: 'escrowStatus',
  escrowReleasedAt: 'escrowReleasedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type FreelanceOrderScalarFieldEnum = (typeof FreelanceOrderScalarFieldEnum)[keyof typeof FreelanceOrderScalarFieldEnum]


export const FreelanceOrderBusinessScalarFieldEnum = {
  id: 'id',
  freelanceOrderId: 'freelanceOrderId',
  businessId: 'businessId',
  role: 'role',
  assignedAt: 'assignedAt'
} as const

export type FreelanceOrderBusinessScalarFieldEnum = (typeof FreelanceOrderBusinessScalarFieldEnum)[keyof typeof FreelanceOrderBusinessScalarFieldEnum]


export const ReferralScalarFieldEnum = {
  id: 'id',
  affiliateBusinessId: 'affiliateBusinessId',
  affiliateClientId: 'affiliateClientId',
  referredBusinessId: 'referredBusinessId',
  referredClientId: 'referredClientId',
  verifiedPurchase: 'verifiedPurchase',
  createdAt: 'createdAt'
} as const

export type ReferralScalarFieldEnum = (typeof ReferralScalarFieldEnum)[keyof typeof ReferralScalarFieldEnum]


export const PostOfSaleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  price: 'price',
  status: 'status',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PostOfSaleScalarFieldEnum = (typeof PostOfSaleScalarFieldEnum)[keyof typeof PostOfSaleScalarFieldEnum]


export const PostTransactionScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  clientId: 'clientId',
  paymentTransactionId: 'paymentTransactionId',
  status: 'status',
  amount: 'amount',
  createdAt: 'createdAt'
} as const

export type PostTransactionScalarFieldEnum = (typeof PostTransactionScalarFieldEnum)[keyof typeof PostTransactionScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'MediaType'
 */
export type EnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaType'>
    


/**
 * Reference to a field of type 'MediaType[]'
 */
export type ListEnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaType[]'>
    


/**
 * Reference to a field of type 'KycStatus'
 */
export type EnumKycStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KycStatus'>
    


/**
 * Reference to a field of type 'KycStatus[]'
 */
export type ListEnumKycStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KycStatus[]'>
    


/**
 * Reference to a field of type 'RechargeMethod'
 */
export type EnumRechargeMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RechargeMethod'>
    


/**
 * Reference to a field of type 'RechargeMethod[]'
 */
export type ListEnumRechargeMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RechargeMethod[]'>
    


/**
 * Reference to a field of type 'Country'
 */
export type EnumCountryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Country'>
    


/**
 * Reference to a field of type 'Country[]'
 */
export type ListEnumCountryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Country[]'>
    


/**
 * Reference to a field of type 'PaymentStatus'
 */
export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


/**
 * Reference to a field of type 'PaymentStatus[]'
 */
export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


/**
 * Reference to a field of type 'PaymentMethod'
 */
export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


/**
 * Reference to a field of type 'PaymentMethod[]'
 */
export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


/**
 * Reference to a field of type 'FreelanceServiceCategory'
 */
export type EnumFreelanceServiceCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FreelanceServiceCategory'>
    


/**
 * Reference to a field of type 'FreelanceServiceCategory[]'
 */
export type ListEnumFreelanceServiceCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FreelanceServiceCategory[]'>
    


/**
 * Reference to a field of type 'FreelanceStatus'
 */
export type EnumFreelanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FreelanceStatus'>
    


/**
 * Reference to a field of type 'FreelanceStatus[]'
 */
export type ListEnumFreelanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FreelanceStatus[]'>
    


/**
 * Reference to a field of type 'EscrowStatus'
 */
export type EnumEscrowStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EscrowStatus'>
    


/**
 * Reference to a field of type 'EscrowStatus[]'
 */
export type ListEnumEscrowStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EscrowStatus[]'>
    


/**
 * Reference to a field of type 'PostStatus'
 */
export type EnumPostStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostStatus'>
    


/**
 * Reference to a field of type 'PostStatus[]'
 */
export type ListEnumPostStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostStatus[]'>
    


/**
 * Reference to a field of type 'PostTransactionStatus'
 */
export type EnumPostTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostTransactionStatus'>
    


/**
 * Reference to a field of type 'PostTransactionStatus[]'
 */
export type ListEnumPostTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostTransactionStatus[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  business?: Prisma.BusinessOmit
  client?: Prisma.ClientOmit
  worker?: Prisma.WorkerOmit
  category?: Prisma.CategoryOmit
  product?: Prisma.ProductOmit
  media?: Prisma.MediaOmit
  order?: Prisma.OrderOmit
  orderProduct?: Prisma.OrderProductOmit
  review?: Prisma.ReviewOmit
  chat?: Prisma.ChatOmit
  chatMessage?: Prisma.ChatMessageOmit
  repostedProduct?: Prisma.RepostedProductOmit
  reOwnedProduct?: Prisma.ReOwnedProductOmit
  kYC?: Prisma.KYCOmit
  accountRecharge?: Prisma.AccountRechargeOmit
  token?: Prisma.TokenOmit
  paymentTransaction?: Prisma.PaymentTransactionOmit
  ad?: Prisma.AdOmit
  freelanceService?: Prisma.FreelanceServiceOmit
  workerServiceAssignment?: Prisma.WorkerServiceAssignmentOmit
  freelanceOrder?: Prisma.FreelanceOrderOmit
  freelanceOrderBusiness?: Prisma.FreelanceOrderBusinessOmit
  referral?: Prisma.ReferralOmit
  postOfSale?: Prisma.PostOfSaleOmit
  postTransaction?: Prisma.PostTransactionOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

